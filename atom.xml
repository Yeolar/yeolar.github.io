<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yeolar.github.io</id>
    <title>互联网调研</title>
    <updated>2020-11-03T14:27:58.998Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yeolar.github.io"/>
    <link rel="self" href="https://yeolar.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yeolar.github.io/images/avatar.png</logo>
    <icon>https://yeolar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 互联网调研</rights>
    <entry>
        <title type="html"><![CDATA[一个人，一个网站，5.75亿美元卖掉]]></title>
        <id>https://yeolar.github.io/post/yi-ge-ren-yi-ge-wang-zhan-575-yi-mei-yuan-mai-diao/</id>
        <link href="https://yeolar.github.io/post/yi-ge-ren-yi-ge-wang-zhan-575-yi-mei-yuan-mai-diao/">
        </link>
        <updated>2020-11-03T14:19:54.000Z</updated>
        <summary type="html"><![CDATA[<p>一个人，24岁时写了一个网站， 每天只工作2小时，他还嫌工作量太大。他每天从谷歌广告赚好几万美元，不用合伙人，从来也不融资，一个人掌握100%股权， 36岁时5.75亿美元卖掉公司。</p>
<p>2015年7月14日，婚恋网站Plenty of Fish以5.75亿美元的价格被Match Group收购，他的创始人Markus Frind现年才36岁。网站长期由Markus自己一个人从2003年开始经营，就靠放谷歌广告赚钱。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个人，24岁时写了一个网站， 每天只工作2小时，他还嫌工作量太大。他每天从谷歌广告赚好几万美元，不用合伙人，从来也不融资，一个人掌握100%股权， 36岁时5.75亿美元卖掉公司。</p>
<p>2015年7月14日，婚恋网站Plenty of Fish以5.75亿美元的价格被Match Group收购，他的创始人Markus Frind现年才36岁。网站长期由Markus自己一个人从2003年开始经营，就靠放谷歌广告赚钱。</p>
<!-- more -->
<p>因为网站太赚钱，又没有什么员工，所以Markus完全不需要合伙人，不需要融资，公司的股权100%属于他一个人。卖掉公司时，没有任何人来分这5.75亿美元，5.75亿美元全部属于他一个人！</p>
<p>这简直就是屌丝一个人创业的楷模。</p>
<p>2008年的时候，Markus告诉《纽约时报》，他的网站一年的净利润是1000万美元。他每周工作10小时，每天只干2小时。但是，他居然跟记者说：这个工作量太大了！</p>
<p>Markus对Business Insider说，当他知道什么是风险投资这种东西的时候，他每年已经有几百万美元的净利润了。所以，他实在不知道该怎么跟风险投资人说，实在不知道该怎么融资。</p>
<p>Markus今年卖掉Plenty of Fish的时候， 网站已经有9000万注册用户了。360万活跃用户。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604413295821.jpg" alt="" loading="lazy"></figure>
<p>Markus说他2003年刚开始想做Plenty of Fish，是因为刚刚学会了一门新出来的计算机语言ASP。为了练练手，以后找工作的时候能证明自己懂ASP，就随手做了Plenty of Fish。结果居然有很多人来网站注册，慢慢就火起来了。等到网站每个月能赚4000美元，差不多能养活他自己的时候，他就辞了工作，靠网站的广告费为生。</p>
<p>Markus觉得他创办和维护Plenty of Fish期间，从来没有出现过任何真正困难。Plenty of Fish上线只建立了几个月的时候， 一天只有几百个访客，但是流量增加很匀速、成长很稳定。所以他可以很明确的预到，接下来的四五个月会有多少访客。然后他就有足够的时间，一个人慢慢提高服务器的性能、改善数据库的结构。Markus对记者说，他最骄傲的事情是： “就靠我一个人，每个月能生成10亿个网页页面”。</p>
<p>Markus每天只工作2个小时。INC采访他的时候，问他每天什么时候他觉得最有意思。他说，早上，因为只有早上2-3个小时我在工作。当被问到，你觉得工作时最有意思的事情是什么时，他的回答是：“去银行，把谷歌广告给我开的面额100万的支票存到进去。”</p>
<p>说到谷歌给Markus开的广告费，不得不把Markus的广告收入明细列出来。就是下图：</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604413351211.jpg" alt="" loading="lazy"></figure>
<p>2003年6月，只有493个浏览量，广告收入7.6加拿大元（差不多跟美元等值）；2013年7月，就有了18万多的浏览量，广告收入1千7百多了。慢慢每月稳步递增，道理2004年2月，广告收入已经到了1万2千多了。2004年6月的收入，突破了5万块钱。2005年4月， 月收入突破10万元。</p>
<p>2006年6月，他贴出了一张谷歌广告给他寄来的90万元的支票，相对于每天赚3万块。这个时候，这个网站仍旧还是只有他一个人。而他的竞争对手，一般都至少有600台服务器，至少300名以上的员工。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1604413368892.jpg" alt="" loading="lazy"></figure>
<p>在实现了每个月自己一个人都能赚到百万美元的目标之后，又过了一年，到了2007年Markus才有了第一个员工人。到现在， Plenty of Fish每个月已经有了 3.7亿的独立IP和25亿的浏览量，员工仍然只有65个人。</p>
<p>一个人，默默创业（甚至都谈不上创业，只是业余做了个“小”网站）；一个人，默默改善自己的网站；一个人，默默赚钱（直到数钱数到手抽筋）。</p>
<p>这才是创业，才是真正的脚踏实地，才是真正的生意。</p>
<p>Markus是每个白手起家者的楷模。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MongoDB简史]]></title>
        <id>https://yeolar.github.io/post/mongodb-jian-shi/</id>
        <link href="https://yeolar.github.io/post/mongodb-jian-shi/">
        </link>
        <updated>2020-11-03T13:19:28.000Z</updated>
        <summary type="html"><![CDATA[<p>说到现代 Web 应用程序开发，不得不提到 MongoDB。如果你是一名全栈程序员，每天都会跟 MERN 打交道，其中 M 指的就是 MongoDB。MongoDB 开源社区版为大量的 Web 应用程序提供支持。从 2007 年开始，MongoDB 走过了漫长的道路。它是 MongoDB 公司的主要产品，这家公司市值已经超过 100 亿美元。与很多产品一样，在线广告是推动 MongoDB 愿景和发展的关键催化剂。MongoDB 的故事很有趣，在本文中，我将带你一起探索 MongoDB 的发展之旅。</p>
]]></summary>
        <content type="html"><![CDATA[<p>说到现代 Web 应用程序开发，不得不提到 MongoDB。如果你是一名全栈程序员，每天都会跟 MERN 打交道，其中 M 指的就是 MongoDB。MongoDB 开源社区版为大量的 Web 应用程序提供支持。从 2007 年开始，MongoDB 走过了漫长的道路。它是 MongoDB 公司的主要产品，这家公司市值已经超过 100 亿美元。与很多产品一样，在线广告是推动 MongoDB 愿景和发展的关键催化剂。MongoDB 的故事很有趣，在本文中，我将带你一起探索 MongoDB 的发展之旅。</p>
<!-- more -->
<h1 id="开端大型数据库想法的萌芽">开端：大型数据库想法的萌芽</h1>
<p>MongoDB 的故事开始于 2007 年。1995 年，Dwight Merriman 和 Kevin O’Connor 创办了著名的在线广告公司 DoubleClick。不久后，Kevin Ryan 也加入了这个团队 (Dwight 和 Kevin 后来共同创办了 5 家公司——Gilt、10gen、Panther Express、ShopWiki 和 Business Insider)。DoubleClick 很快就大获成功，几年之内，它的广告流量达到了每秒 40 万条。当时的关系型数据库技术还没有预料到会有如此大规模的流量。配备如此规模的关系数据库需要大量的资金和硬件资源。因此，Dwight(他是当时的 CTO) 和他的团队开发了自定义数据库实现来扩展 DoubleClick，以应对流量的激增。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604409691495.png" alt="" loading="lazy"></figure>
<p>2003 年，Eliot Horowitz 在大学毕业之后加入 DoubleClick 的研发部门，成为一名软件工程师。两年后，他离开了 DoubleClick，和 Dwight 一起创办了 ShopWiki。他们都意识到，他们在一次又一次地解决同样的水平伸缩性问题。因此，2007 年，Dwight、Eliot 和 Kevin Ryan 一起创办了一家叫作 10gen 的新公司。10gen 专注于提供一个带有自有应用程序和数据库栈的 PaaS 托管解决方案。10gen 很快引起了风险投资人 Albert Wenger(Union Square Ventures) 的注意，他向 10gen 投资了 150 万美元。以下是 Albert Wenger 在 2008 年写的有关 10gen 投资的文字：</p>
<blockquote>
<p>今天，我们很高兴地宣布，我们将为一支特立独行的团队提供支持，也就是 10gen 的一班天才们。他们汇聚了构建互联网规模系统的经验，比如 DART、Panther Express CDN，广泛参与了开源活动，包括 Apache 软件基金会。他们正在为云计算构建一个开源技术栈，包括一个应用服务器和一个数据库，它们都是基于现代硬件能力和构建 Web 站点或服务的经验从头开始开发的。应用服务器最初支持服务器端 JavaScript 和 Ruby(实验性的)。数据库采用了一种有趣的设计来存储对象，这种设计在快速随机访问和高效的集合扫描之间做出了平衡。</p>
</blockquote>
<p>Albert 所说的“采用了有趣的设计的数据库”实际上指的就是 MongoDB。从 2007 年到 2009 年，这个新数据库迅速发展。Dwight 第一次提交的 MongoDB 代码可以在<a href="https://github.com/mongodb/mongo/commit/e73188b5512c82290a4070af4afddac20d0b981e">这里看到</a>。</p>
<p>MongoDB 的核心引擎是用 C++ 开发的。之所以把这个数据库叫作 MongoDB，是因为他们想用它来为一些典型的应用场景 (如内容服务) 提供海量数据的存储服务。最初，这个团队只有 4 名工程师 (包括 Dwight 和 Eliot)，并只专注于 MongoDB 数据库。他们的商业理念是通过开源免费下载的方式来发布数据库，并在这个基础上提供商业支持和培训服务。</p>
<p>MongoDB 1.0 于 2009 年 2 月发布。最初的版本提供了一种具有文档模型、索引和基本复制功能的查询语言，还提供了实验版的分片功能，但生产版本的分片集群功能在一年后发布的 1.6 版本中才有。</p>
<p>以下是 Dwight 对于“Mongo 是否适用于高度可伸缩系统”的问题的回答：</p>
<blockquote>
<p>在水平伸缩方面，可以使用自动分片功能来构建大型的 MongoDB 集群。现在是 alpha 版，但如果你的项目才刚刚启动，那么当你需要它的时候，它可能已经生产就绪了。</p>
</blockquote>
<h1 id="mongodb-早期的设计哲学">MongoDB 早期的设计哲学</h1>
<p>在早期，MongoDB 的基本设计原则如下：</p>
<ul>
<li>快速和简单的数据模型，实现更快的编程——支持 CRUD 的文档模型。</li>
<li>使用熟悉的编程语言和格式——JavaScript/JSON。</li>
<li>无模式文档——方便敏捷迭代开发。</li>
<li>为了快速开发和更易于伸缩，只提供必要的功能，没有连接和跨集合的事务。</li>
<li>支持简单的水平伸缩和持久性 / 可用性 (复制 / 分片)。</li>
</ul>
<p>在 2011 年的一次“NoSQL 以及为什么我们要开发 MongoDB”的 <a href="https://youtu.be/hOOQJpGu1kY?t=2408">ZendCon 演讲</a>中，Dwight 详细介绍了这些原则。大约在 42 分钟的时候，还出现了一个有关复制和分片之间区别的讨论。随着代码的成熟和 MongoDB 成为主流，这些原则当中有很多都被明显淡化了。最新的 MongoDB（从 4.2 开始）可以在一定程度上支持连接，甚至是支持分布式事务！</p>
<h1 id="什么是-mongodb">什么是 MongoDB？</h1>
<p>在详细讲述 MongoDB 的历史和发展历程之前，我们先简单地了解一下 MongoDB！</p>
<p>MongoDB 是一个基于文档的 NoSQL 数据库。它可以在所有主流平台上运行 (Windows、Linux、Mac)，并且可以免费下载它的开源版本。MongoDB 将数据实体存储在集合中，存储的每一个数据块都是 JSON 格式。例如，如果一个用户提交了一个在线订单，该订单的全部细节 (订单号、订单项、收获地址等) 将保存在一个 JSON 文档中，然后将其保存到“customer_order”集合中。</p>
<p>MongoDB 还附带了一个控制台客户端，这是一个功能齐全的 JavaScript 环境，你可以用它添加、删除、编辑或查询数据库中的文档数据。</p>
<h1 id="mongodb-架构">MongoDB 架构</h1>
<p>下面是 MongoDB 服务器主要组件的架构视图。</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604410079716.png" alt="" loading="lazy"></figure>
<p>MongoDB 目前为 13 种编程语言提供了驱动程序，包括 Java、Node.JS、Python、PHP 和 Swift。存储引擎 MMAPv1 从 4.2 版本开始就被移除了。加密存储引擎只在商业版中提供。</p>
<p>MongoDB 的美妙之处在于它的开源免费社区版为你提供了这些能力：</p>
<ul>
<li>一个简单的单机实例就可以满足大多数小型应用程序的需求。</li>
<li>一个多机实例可以为大多数商业应用程序提供持久性 / 高可用性。</li>
<li>一个具有水平伸缩能力的大型集群 (分片集群) 可以处理非常大的数据集和大量的查询。MongoDB 提供了自动化基础设施，用于实现分布式的数据分布和处理。</li>
</ul>
<p>下面的这些图表演示了各种运行 MongoDB 实例的方式。</p>
<h1 id="单服务器-容错设置">单服务器 / 容错设置</h1>
<p>对于小型应用程序，单台服务器就足以满足频繁的数据备份需求了。如果需要容错，可以使用副本集。在容错配置中，通常有 3 个或更多的 MongoDB 实例。这些实例当中只有一个作为主实例，如果它发生故障，其他两个辅助实例中的一个将成为主实例。这些实例中的数据都是一样的。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1604410167501.png" alt="" loading="lazy"></figure>
<h1 id="具有水平伸缩能力的分片集群">具有水平伸缩能力的分片集群</h1>
<p>对于同时要求具备水平伸缩能力和容错能力的大型数据库，需要使用 MongoDB 分片集群。从下图可以看出，一个容错分片集群推荐的最小机器数量是 14 台！每一个容错副本集只处理数据的一个子集，数据分区是由 MongoDB 引擎自动完成的。</p>
<figure data-type="image" tabindex="4"><img src="https://yeolar.github.io/post-images/1604410301598.png" alt="" loading="lazy"></figure>
<p>在下载最新版本的 MongoDB(4.4) 并解压缩之后，你会发现它只包含以下三个主要文件：</p>
<ul>
<li>mongo——MongoDB Shell，使用基于 JavaScript 的命令与服务器发生交互。</li>
<li>mongod——运行 MongoDB 的主文件，可以作为单个数据库实例、分片集群的成员或分片集群的配置服务器运行。</li>
<li>mongos——一个路由器应用程序，用在具有水平伸缩能力的数据库服务器集群中。</li>
</ul>
<p>在 Mac 上，这 3 个可执行文件的总大小约为 150MB。对于任意类型的 MongoDB 部署，都只需要这几个组件！在一个软件膨胀的世界里，这是一种很受欢迎的变革！这种简单和优雅让 MongoDB 变得强大而可靠。</p>
<h1 id="mongodb-的演化史-2009-年2020-年">MongoDB 的演化史 (2009 年——2020 年)</h1>
<p>MongoDB 1.0 是在 2009 年 2 月发布的，提供了大部分基本的查询功能。MongoDB 1.2 是在 2009 年 12 月发布的，引入了 map-reduce，支持大规模数据处理。在看到 MongoDB 的巨大潜力之后，10gen 公司迅速壮大了团队。MongoDB 1.4(2010 年 3 月) 引入了后台索引创建，MongoDB 1.6(2010 年 8 月) 引入了一些主要特性，比如用于水平伸缩的分片、具备自动故障转移能力的副本集以及对 IPv6 的支持。</p>
<figure data-type="image" tabindex="5"><img src="https://yeolar.github.io/post-images/1604410370487.png" alt="" loading="lazy"></figure>
<p>到了 2012 年，10gen 有 100 名员工，公司开始提供 24/7 服务。MongoDB 2.2 版本 (2012 年 8 月) 引入了聚合管道，可以将多个数据处理步骤组合成一个操作链。到了 2013 年，10gen 拥有 250 多名员工和 1000 多名客户。为了挖掘商业潜力，10gen 更名为 MongoDB 公司，专注于数据库产品。MongoDB 2.4 版本 (2013 年 3 月) 在 Mongo Shell 中引入了文本搜索和谷歌的 V8 JS 引擎等增强功能。除了 2.4 之外，还发布了 MongoDB 企业版，提供了监控和安全集成等附加功能。</p>
<p>MongoDB 早期版本的一个主要问题是它用来保存和管理磁盘数据的存储引擎相对较弱。于是，MongoDB 公司进行了第一笔收购，收购了 WiredTiger 公司。这家公司有超级稳定的存储引擎产品 WiredTiger。MongoDB 拿下了这家公司的开发团队和产品，以及首席架构师 Michael Cahill(也是 Berkeley DB 的架构师之一)，让他担任存储工程总监一职。WiredTiger 是一个高效的存储引擎，使用了各种编程技术，如风险指针（hazard pointer）、无锁算法、快速锁存（fast latch）和消息传递，与其他引擎相比，WiredTiger 可以在每个 CPU 内核上执行更多的任务。为了最小化磁盘开销和 I/O，WiredTiger 使用了紧凑的文件格式和压缩（可选）。</p>
<p>MongoDB 的下一个主要版本是 3.0(2015 年 3 月)，其中包含了新的 WiredTiger 存储引擎、可插拔存储引擎 API、增加了 50 个副本集限制和安全改进。同年，Glassdoor 将 MongoDB 公司列为最佳的雇主之一。同年晚些时候又发布了 3.2 版本，支持文档验证、部分索引和一些主要的聚合增强。</p>
<p>2017 年，微软发布了多模型 NoSQL 数据库服务 CosmosDB，作为微软 Azure 云平台的一部分。它提供了与 MongoDB 3.2 的协议兼容性，针对 MongoDB 3.2 的查询也可以在 CosmosDB 上运行，这加快了开发人员采用 CosmosDB 的速度。</p>
<p>截止 2016 年，MongoDB 公司拥有 500 多名员工，数据库的下载量超过 2000 万次。2017 年 10 月，MongoDB 公司上市，市值超过 10 亿美元。MongoDB 3.6 在一个月后 (2017 年 11 月) 发布，为多集合连接查询、变更流和使用 JSON 模式进行文档验证提供了更好的支持。MongoDB 3.6 是微软 Azure CosmosDB 截至 2020 年 8 月能够支持的最新版本。</p>
<figure data-type="image" tabindex="6"><img src="https://yeolar.github.io/post-images/1604410427511.png" alt="" loading="lazy"></figure>
<p>2018 年，MongoDB 公司斥资 6800 万美元收购了 mLab，这是 MongoDB 公司的第二笔收购。当时，mLab 在云端提供 MongoDB 服务 (DBaaS)，并拥有大量的客户。云计算是未来，MongoDB 公司迅速收购并集成了 mLab，将其作为 MongoDB Atlas 云平台的一部分。然后，他们通过改变开源版本的许可条款来限制更多的 DBaaS 竞争者出现！</p>
<p>MongoDB 开源社区版和高级企业版都使用了相同的底层引擎。这意味着任何人都可以使用社区版，然后基于社区版提供付费的云服务。对于 MongoDB 公司来说，它们的云产品 MongoDB Atlas 就多了很多直接竞争者。因此，在 2018 年 10 月，MongoDB 公司将社区版的许可从 GNU AGPLv3 (AGPL) 更改为服务器端公共许可 (SSPL)。许可中有一个条款用来防止未来 SaaS 竞争对手使用 MongoDB 并提供他们自己的 SaaS 版本：</p>
<blockquote>
<p>如果您将本程序的功能或修改版本作为服务提供给第三方，必须将服务源代码通过网络下载的方式免费提供给所有人。</p>
</blockquote>
<p>这是一个由 MongoDB 公司自己提出的许可条款，并声称兼容 OSI。不过，该条款后来在开放源码计划 (OSI) 的审批过程中被撤回，不过开源版本的 MongoDB 仍然采用 SSPL 许可。</p>
<p>到了 2018 年，MongoDB 公司拥有 1000 多名员工。下一个主要版本 MongoDB 4.0(2018 年 6 月) 提供了跨文档事务处理能力。这是一个重要的里程碑，MongoDB 已经为高数据完整性需求做好了准备。</p>
<p>云生态系统在快速增长，不久后，MongoDB 公司意识到他们需要发展成一个成熟的云平台，而不只是提供数据库服务。2019 年，MongoDB 公司进行了第三笔收购，以 3900 万美元收购了云计算移动数据库公司 Realm。有意思的是，MongoDB 最初也是一种 PaaS 托管解决方案，而 12 年之后，它又回到了同样的方向。同年，MongoDB 公司发布了带有分布式事务支持的 MongoDB 4.2。</p>
<p>截至 2020 年 8 月，MongoDB 社区版版本是 4.4。值得注意的是，MongoDB 数据库工具可以单独下载。MongoDB 4.4 包含了一些主要的特性增强，比如多集合联合聚合、复合哈希分片键和对冲读（Hedged Read）/ 镜像读。</p>
<h1 id="现在的-mongodb">现在的 MongoDB</h1>
<p>截至 2020 年，MongoDB 的全球下载量达到了 1.1 亿次。MongoDB 公司目前有 2000 多名员工，有超过 18000 名付费客户，其中有很多客户同时使用 MongoDB Atlas 和 MongoDB 企业版。截至 2020 年 8 月，MongoDB 社区版版本是 4.4。大多数大公司在内部的一些场景中使用社区版。MongoDB 社区版仍然是开源的，除了一些关键特性外，它与 MongoDB 企业版差不多。</p>
<p>MongoDB 企业版 (每个服务器每年的费用在 1 万美元左右) 提供了以下这些附加功能：</p>
<ul>
<li>内存存储引擎——适用于需要快速数据访问而不需要持久存储的场景。</li>
<li>审计——数据库管理员在部署时跟踪系统活动。</li>
<li>身份验证和授权——支持 Kerberos 身份验证和 LDAP 身份验证和授权。</li>
<li>加密——WiredTiger 引擎提供了一个原生加密选项。默认是 AES256，使用 OpenSSL。</li>
</ul>
<p>除了社区版，MongoDB 公司还提供了以下这些产品：</p>
<ul>
<li>MongoDB Database Tools——命令行工具集合，包括导入 / 导出 (mongodump、mongorestore 等) 和诊断工具 (mongostat、mongotop)。</li>
<li>MongoDB 企业服务器——企业版，提供额外的安全和审计功能。</li>
<li>MongoDB Atlas——基于云的 SaaS 版服务器。</li>
<li>Atlas Data Lake——一个基于云的数据湖工具，由 MongoDB 查询语言提供支持，可以通过 MongoDB Atlas 和 AWS S3 查询和分析数据。</li>
<li>Atlas Search——一个基于云的全文搜索引擎，基于 MongoDB Atlas。</li>
<li>MongoDB Realm——一个为移动应用提供后端服务的托管云服务。</li>
<li>MongoDB Charts——一个云工具，用于创建 MongoDB 数据的可视化表示。</li>
<li>MongoDB Compass——可下载的 GUI 工具，用于连接 MongoDB 数据库和查询数据。</li>
<li>MongoDB Ops Manager——用于在自定义基础设施上部署、备份和扩展 MongoDB 的管理平台。</li>
<li>MongoDB Cloud Manager——云版本的 Ops 管理器。</li>
<li>MongoDB Connectors——为其他平台 / 工具提供的用于连接 MongoDB 的驱动程序。</li>
</ul>
<h1 id="前方的道路">前方的道路</h1>
<p>由于在 SSPL 许可方面存在争议，开发者社区中有一些人对 MongoDB 生态系统持谨慎态度。投资者还面临着围绕生态系统创收的压力。如果你把 2008 年版和 2020 年版的 MongoDB 主页放在一起看，这一点就显而易见 (见下图)。MongoDB 社区版下载页面实际上也列出了企业版中才有的特性！</p>
<figure data-type="image" tabindex="7"><img src="https://yeolar.github.io/post-images/1604410797150.png" alt="" loading="lazy"></figure>
<p>另外，MongoDB 公司还面临来自云供应商的激烈竞争。MongoDB 公司面临的主要问题是数据存储只是企业应用程序的一部分，如果没有一个令人信服的全栈云服务，在未来可能很难与云供应商竞争。</p>
<p>Eliot Horowitz (MongoDB 的关键人物) 于 2020 年 7 月离开了公司。尽管他还在担任顾问的角色，但 MongoDB 的产品仍存在一些风险，比如焦点被弱化、减少对免费社区版的支持或进一步修改许可条款。</p>
<h1 id="写在最后">写在最后</h1>
<p>MongoDB 是一个围绕开源技术产品成功创办一家公司的完美案例，也是在产品生命周期中如何选择正确时机转向的绝佳例子。MongoDB 的简单性和较小的安装体积可以在不增加很多开销的情况下构建复杂的系统。我希望 MongoDB 公司在未来几年继续为社区版提供支持。</p>
<p><strong>原文链接</strong><br>
<a href="https://www.quickprogrammingtips.com/mongodb/mongodb-history.html">MongoDB History</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云计算与人工智能]]></title>
        <id>https://yeolar.github.io/post/yun-ji-suan-yu-ren-gong-zhi-neng/</id>
        <link href="https://yeolar.github.io/post/yun-ji-suan-yu-ren-gong-zhi-neng/">
        </link>
        <updated>2020-10-30T13:54:09.000Z</updated>
        <content type="html"><![CDATA[<p>我今天要讲这三个话题，一个是云计算，一个大数据，一个人工智能，我为什么要讲这三个东西呢？因为这三个东西现在非常非常的火，它们之间好像互相有关系，一般谈云计算的时候也会提到大数据，谈人工智能的时候也会提大数据，谈人工智能的时候也会提云计算。所以说感觉他们又相辅相成不可分割，如果是非技术的人员来讲可能比较难理解说这三个之间的相互关系，所以有必要解释一下。</p>
<h1 id="一-云计算最初是实现资源管理的灵活性">一、云计算最初是实现资源管理的灵活性</h1>
<p>我们首先来说云计算，云计算最初的目标是对资源的管理，管理的主要是计算资源，网络资源，存储资源三个方面。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604066295169.jpeg" alt="" loading="lazy"></figure>
<h2 id="11-管数据中心就像配电脑">1.1 管数据中心就像配电脑</h2>
<p>什么叫计算，网络，存储资源呢？就说你要买台笔记本电脑吧，你是不是要关心这台电脑什么样的CPU啊？多大的内存啊？这两个我们称为计算资源。</p>
<p>这台电脑要能上网吧，需要有个网口可以插网线，或者有无线网卡可以连接我们家的路由器，您家也需要到运营商比如联通，移动，电信开通一个网络，比如100M的带宽，然后会有师傅弄一根网线到您家来，师傅可能会帮您将您的路由器和他们公司的网络连接配置好，这样您家的所有的电脑，手机，平板就都可以通过您的路由器上网了。这就是网络。</p>
<p>您可能还会问硬盘多大啊？原来硬盘都很小，10G之类的，后来500G，1T，2T的硬盘也不新鲜了。(1T是1000G)，这就是存储。</p>
<p>对于一台电脑是这个样子的，对于一个数据中心也是同样的。想象你有一个非常非常大的机房，里面堆了很多的服务器，这些服务器也是有CPU，内存，硬盘的，也是通过类似路由器的设备上网的。这个时候的一个问题就是，运营数据中心的人是怎么把这些设备统一的管理起来的呢？</p>
<h2 id="12-灵活就是想啥时要都有想要多少都行">1.2 灵活就是想啥时要都有，想要多少都行</h2>
<p>管理的目标就是要达到两个方面的灵活性。哪两个方面呢？比如有个人需要一台很小很小的电脑，只有一个CPU，1G内存，10G的硬盘，一兆的带宽，你能给他吗？像这种这么小规格的电脑，现在随便一个笔记本电脑都比这个配置强了，家里随便拉一个宽带都要100M。然而如果去一个云计算的平台上，他要想要这个资源的时候，只要一点就有了。</p>
<p>所以说它就能达到两个方面灵活性。</p>
<ul>
<li>第一个方面就是想什么时候要就什么时候要，比如需要的时候一点就出来了，这个叫做时间灵活性。</li>
<li>第二个方面就是想要多少呢就有多少，比如需要一个很小很小的电脑，可以满足，比如需要一个特别大的空间，以云盘为例，似乎云盘给每个人分配的空间动不动就就很大很大，随时上传随时有空间，永远用不完，这个叫做空间灵活性。</li>
</ul>
<p>空间灵活性和时间灵活性，也即我们常说的云计算的弹性。</p>
<p>为了解决这个弹性的问题，经历了漫长时间的发展。</p>
<h2 id="13-物理设备不灵活">1.3 物理设备不灵活</h2>
<p>首先第一个阶段就是物理机，或者说物理设备时期。这个时期相当于客户需要一台电脑，我们就买一台放在数据中心里。物理设备当然是越来越牛，例如服务器，内存动不动就是百G内存，例如网络设备，一个端口的带宽就能有几十G甚至上百G，例如存储，在数据中心至少是PB级别的(一个P是1000个T，一个T是1000个G)。</p>
<p>然而物理设备不能做到很好的灵活性。首先它不能够达到想什么时候要就什么时候要、比如买台服务器，哪怕买个电脑，都有采购的时间。突然用户告诉某个云厂商，说想要开台电脑，如果使用物理服务器，当时去采购啊就很难，如果说供应商啊关系一般，可能采购一个月，供应商关系好的话也需要一个星期。用户等了一个星期后，这时候电脑才到位，用户还要登录上去开始慢慢部署自己的应用，时间灵活性非常差。第二是空间灵活性也不行，例如上述的用户，要一个很小很小的电脑，现在哪还有这么小型号的电脑啊。不能为了满足用户只要一个G的内存是80G硬盘的，就去买一个这么小的机器。但是如果买一个大的呢，因为电脑大，就向用户多收钱，用户说他只用这么小的一点，如果让用户多付钱就很冤。</p>
<h2 id="14-虚拟化灵活多了">1.4 虚拟化灵活多了</h2>
<p>有人就想办法了。第一个办法就是虚拟化。用户不是只要一个很小的电脑么？数据中心的物理设备都很强大，我可以从物理的CPU，内存，硬盘中虚拟出一小块来给客户，同时也可以虚拟出一小块来给其他客户，每个客户都只能看到自己虚的那一小块，其实每个客户用的是整个大的设备上其中的一小块。虚拟化的技术能使得不同的客户的电脑看起来是隔离的，我看着好像这块盘就是我的，你看这呢这块盘就是你的，实际情况可能我这个10G和您这个10G是落在同样一个很大很大的这个存储上的。</p>
<p>而且如果事先物理设备都准备好，虚拟化软件虚拟出一个电脑是非常快的，基本上几分钟就能解决。所以在任何一个云上要创建一台电脑，一点几分钟就出来了，就是这个道理。</p>
<p>这个空间灵活性和时间灵活性就基本解决了。</p>
<h2 id="15-虚拟世界的赚钱与情怀">1.5 虚拟世界的赚钱与情怀</h2>
<p>在虚拟化阶段，最牛的公司是Vmware，是实现虚拟化技术比较早的一家公司，可以实现计算，网络，存储的虚拟化，这家公司很牛，性能也做得非常好，然后虚拟化软件卖的也非常好，赚了好多的钱，后来让EMC(世界五百强，存储厂商第一品牌)给收购了。</p>
<p>但是这个世界上还是有很多有情怀的人的，尤其是程序员里面，有情怀的人喜欢做一件什么事情呢？开源。这个世界上很多软件都是有闭源就有开源，源就是源代码。就是说某个软件做的好，所有人都爱用，这个软件的代码呢，我封闭起来只有我公司知道，其他人不知道，如果其他人想用这个软件，就要付我钱，这就叫闭源。但是世界上总有一些大牛看不惯钱都让一家赚了去。大牛们觉得，这个技术你会我也会，你能开发出来，我也能，我开发出来就是不收钱，把代码拿出来分享给大家，全世界谁用都可以，所有的人都可以享受到好处，这个叫做开源。</p>
<p>比如最近蒂姆·伯纳斯·李就是个非常有情怀的人，2017年，他因“发明万维网、第一个浏览器和使万维网得以扩展的基本协议和算法”而获得2016年度的图灵奖。图灵奖就是计算机界的诺贝尔奖。然而他最令人敬佩的是，他将万维网，也就是我们常见的www的技术无偿贡献给全世界免费使用。我们现在在网上的所有行为都应该感谢他的功劳，如果他将这个技术拿来收钱，应该和比尔盖茨差不多有钱。</p>
<p>例如在闭源的世界里有windows，大家用windows都得给微软付钱，开源的世界里面就出现了Linux。比尔盖茨靠windows，Office这些闭源的软件赚了很多钱，称为世界首富，就有大牛开发了另外一种操作系统Linux。很多人可能没有听说过Linux，很多后台的服务器上跑的程序都是Linux上的，比如大家享受双十一，支撑双十一抢购的系统，无论是淘宝，京东，考拉，都是跑在Linux上的。</p>
<p>再如有apple就有安卓。apple市值很高，但是苹果系统的代码我们是看不到的。于是就有大牛写了安卓手机操作系统。所以大家可以看到几乎所有的其他手机厂商，里面都装安卓系统，因为苹果系统不开源，而安卓系统大家都可以用。</p>
<p>在虚拟化软件也一样，有了Vmware，这个软件非常非常的贵。那就有大牛写了两个开源的虚拟化软件，一个叫做Xen，一个叫做KVM，如果不做技术的，可以不用管这两个名字，但是后面还是会提到。</p>
<h2 id="16-虚拟化的半自动和云计算的全自动">1.6 虚拟化的半自动和云计算的全自动</h2>
<p>虚拟化软件似乎解决了灵活性问题，其实不全对。因为虚拟化软件一般创建一台虚拟的电脑，是需要人工指定这台虚拟电脑放在哪台物理机上的，可能还需要比较复杂的人工配置，所以使用Vmware的虚拟化软件，需要考一个很牛的证书，能拿到这个证书的人，薪资是相当的高，也可见复杂程度。所以仅仅凭虚拟化软件所能管理的物理机的集群规模都不是特别的大，一般在十几台，几十台，最多百台这么一个规模。这一方面会影响时间灵活性，虽然虚拟出一台电脑的时间很短，但是随着集群规模的扩大，人工配置的过程越来越复杂，越来越耗时。另一方面也影响空间灵活性，当用户数量多的时候，这点集群规模，还远达不到想要多少要多少的程度，很可能这点资源很快就用完了，还得去采购。所以随着集群的规模越来越大，基本都是千台起步，动辄上万台，甚至几十上百万台，如果去查一下BAT，包括网易，包括谷歌，亚马逊，服务器数目都大的吓人。这么多机器要靠人去选一个位置放这台虚拟化的电脑并做相应的配置，几乎是不可能的事情，还是需要机器去做这个事情。</p>
<p>人们发明了各种各样的算法来做这个事情，算法的名字叫做调度(Scheduler)。通俗一点的说，就是有一个调度中心，几千台机器都在一个池子里面，无论用户需要多少CPU，内存，硬盘的虚拟电脑，调度中心会自动在大池子里面找一个能够满足用户需求的地方，把虚拟电脑启动起来做好配置，用户就直接能用了。这个阶段，我们称为池化，或者云化，到了这个阶段，才可以称为云计算，在这之前都只能叫虚拟化。</p>
<h2 id="17-云计算的私有与公有">1.7 云计算的私有与公有</h2>
<p>云计算大致分两种，一个是私有云，一个是公有云，还有人把私有云和公有云连接起来称为混合云，我们暂且不说这个。私有云就是把虚拟化和云化的这套软件部署在别人的数据中心里面，使用私有云的用户往往很有钱，自己买地建机房，自己买服务器，然后让云厂商部署在自己这里，Vmware后来除了虚拟化，也推出了云计算的产品，并且在私有云市场赚的盆满钵满。所谓公有云就是虚拟化和云化软件部署在云厂商自己数据中心里面的，用户不需要很大的投入，只要注册一个账号，就能在一个网页上点一下创建一台虚拟电脑，例如AWS也即亚马逊的公有云，例如国内的阿里云，腾讯云，网易云等。</p>
<p>亚马逊呢为什么要做公有云呢？我们知道亚马逊原来是国外比较大的一个电商，它做电商的时候也肯定会遇到类似双11的场景，在某一个时刻大家都冲上来买东西。当大家都冲上买东西的时候，就特别需要云的时间灵活性和空间灵活性。因为它不能时刻准备好所有的资源，那样太浪费了。但也不能什么都不准备，看着双十一这么多用户想买东西登不上去。所以需要双十一的时候，创建一大批虚拟电脑来支撑电商应用，过了双十一再把这些资源都释放掉去干别的。所以亚马逊是需要一个云平台的。</p>
<p>然而商用的虚拟化软件实在是太贵了，亚马逊总不能把自己在电商赚的钱全部给了虚拟化厂商吧。于是亚马逊基于开源的虚拟化技术，如上所述的Xen或者KVM，开发了一套自己的云化软件。没想到亚马逊后来电商越做越牛，云平台也越做越牛。而且由于他的云平台需要支撑自己的电商应用，而传统的云计算厂商多为IT厂商出身，几乎没有自己的应用，因而亚马逊的云平台对应用更加的友好，迅速发展成为云计算的第一品牌，赚了很多钱。在亚马逊公布其云计算平台财报之前，人们都猜测，亚马逊电商赚钱，云也赚钱吗？后来一公布财报，发现不是一般的赚钱，仅仅去年，亚马逊AWS年营收达122亿美元，运营利润31亿美元。</p>
<h2 id="18-云计算的赚钱与情怀">1.8 云计算的赚钱与情怀</h2>
<p>公有云的第一名亚马逊过得很爽，第二名Rackspace过的就一般了。没办法，这就是互联网行业的残酷性，多是赢者通吃的模式。所以第二名如果不是云计算行业的，很多人可能都没听过了。第二名就想，我干不过老大怎么办呢？开源吧。如上所述，亚马逊虽然使用了开源的虚拟化技术，但是云化的代码是闭源的，很多想做又做不了云化平台的公司，只能眼巴巴的看着亚马逊挣大钱。Rackspace把源代码一公开，整个行业就可以一起把这个平台越做越好，兄弟们大家一起上，和老大拼了。</p>
<p>于是Rackspace和美国航空航天局合作创办了开源软件OpenStack，如图所示OpenStack的架构图，不是云计算行业的不用弄懂这个图，但是能够看到三个关键字，Compute计算，Networking网络，Storage存储。还是一个计算，网络，存储的云化管理平台。</p>
<p>当然第二名的技术也是非常棒的，有了OpenStack之后，果真像Rackspace想象的一样，所有想做云的大企业都疯了，你能想象到的所有如雷贯耳的大型IT企业，IBM，惠普，戴尔，华为，联想等等，都疯了。原来云平台大家都想做，看着亚马逊和Vmware赚了这么多钱，眼巴巴看着没办法，想自己做一个好像难度还挺大。现在好了，有了这样一个开源的云平台OpenStack，所有的IT厂商都加入到这个社区中来，对这个云平台进行贡献，包装成自己的产品，连同自己的硬件设备一起卖。有的做了私有云，有的做了公有云，OpenStack已经成为开源云平台的事实标准。</p>
<h2 id="19-iaas-资源层面的灵活性">1.9 IaaS, 资源层面的灵活性</h2>
<p>随着OpenStack的技术越来越成熟，可以管理的规模也越来越大，并且可以有多个OpenStack集群部署多套，比如北京部署一套，杭州部署两套，广州部署一套，然后进行统一的管理。这样整个规模就更大了。在这个规模下，对于普通用户的感知来讲，基本能够做到想什么时候要就什么时候要，想要多少就要多少。还是拿云盘举例子，每个用户云盘都分配了5T甚至更大的空间，如果有1亿人，那加起来空间多大啊。其实背后的机制是这样的，分配你的空间，你可能只用了其中很少一点，比如说它分配给你了5个T，这么大的空间仅仅是你看到的，而不是真的就给你了，你其实只用了50个G，则真实给你的就是50个G，随着你文件的不断上传，分给你的空间会越来越多。当大家都上传，云平台发现快满了的时候(例如用了70%)，会采购更多的服务器，扩充背后的资源，这个对用户是透明的，看不到的，从感觉上来讲，就实现了云计算的弹性。其实有点像银行，给储户的感觉是什么时候取钱都有，只要不同时挤兑，银行就不会垮。</p>
<p>这里做一个简单的总结，到了这个阶段，云计算基本上实现了时间灵活性和空间灵活性，实现了计算，网络，存储资源的弹性。计算，网络，存储我们常称为基础设施Infranstracture, 因而这个阶段的弹性称为资源层面的弹性，管理资源的云平台，我们称为基础设施服务，就是我们常听到的IaaS，Infranstracture As A Service。</p>
<h1 id="二-云计算不光管资源也要管应用">二、云计算不光管资源，也要管应用</h1>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604136183344.jpeg" alt="" loading="lazy"></figure>
<p>有了IaaS，实现了资源层面的弹性就够了吗？显然不是。还有应用层面的弹性。这里举个例子，比如说实现一个电商的应用，平时十台机器就够了，双十一需要一百台。你可能觉得很好办啊，有了IaaS，新创建九十台机器就可以了啊。但是90台机器创建出来是空的啊，电商应用并没有放上去啊，只能你公司的运维人员一台一台的弄，还是需要很长时间才能安装好的。虽然资源层面实现了弹性，但是没有应用层的弹性，依然灵活性是不够的。</p>
<p>有没有方法解决这个问题呢？于是人们在IaaS平台之上又加了一层，用于管理资源以上的应用弹性的问题，这一层通常称为PaaS（Platform As A Service）。这一层往往比较难理解，其实大致分两部分，一部分我称为你自己的应用自动安装，一部分我称为通用的应用不用安装。</p>
<p>我们先来说第一部分，自己的应用自动安装。比如电商应用是你自己开发的，除了你自己，其他人是不知道怎么安装的，比如电商应用，安装的时候需要配置支付宝或者微信的账号，才能别人在你的电商上买东西的时候，付的钱是打到你的账户里面的，除了你，谁也不知道，所以安装的过程平台帮不了忙，但是能够帮你做的自动化，你需要做一些工作，将自己的配置信息融入到自动化的安装过程中方可。比如上面的例子，双十一新创建出来的90台机器是空的，如果能够提供一个工具，能够自动在这新的90台机器上将电商应用安装好，就能够实现应用层面的真正弹性。例如Puppet, Chef, Ansible, Cloud Foundary都可以干这件事情，最新的容器技术Docker能更好的干这件事情，不做技术的可以不用管这些词。</p>
<p>第二部分，通用的应用不用安装。所谓通用的应用，一般指一些复杂性比较高，但是大家都在用的，例如数据库。几乎所有的应用都会用数据库，但是数据库软件是标准的，虽然安装和维护比较复杂，但是无论谁安装都是一样。这样的应用可以变成标准的PaaS层的应用放在云平台的界面上。当用户需要一个数据库的时候，一点就出来了，用户就可以直接用了。有人问，既然谁安装都一个样，那我自己来好了，不需要花钱在云平台上买。当然不是，数据库是一个非常难的东西，光Oracle这家公司，靠数据库就能赚这么多钱。买Oracle也是要花很多很多钱的。然而大多数云平台会提供Mysql这样的开源数据库，又是开源，钱不需要花这么多了，但是维护这个数据库，却需要专门招一个很大的团队，如果这个数据库能够优化到能够支撑双十一，也不是一年两年能够搞定的。比如您是一个做单车的，当然没必要招一个非常大的数据库团队来干这件事情，成本太高了，应该交给云平台来做这件事情，专业的事情专业的人来做，云平台专门养了几百人维护这套系统，您只要专注于您的单车应用就可以了。</p>
<p>要么是自动部署，要么是不用部署，总的来说就是应用层你也要少操心，这就是PaaS层的重要作用。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1604138955538.jpeg" alt="" loading="lazy"></figure>
<p>虽说脚本的方式能够解决自己的应用的部署问题，然而不同的环境千差万别，一个脚本往往在一个环境上运行正确，到另一个环境就不正确了。</p>
<p>而容器是能更好的解决这个问题的。</p>
<figure data-type="image" tabindex="4"><img src="https://yeolar.github.io/post-images/1604139808999.jpeg" alt="" loading="lazy"></figure>
<p>容器是 Container，Container另一个意思是集装箱，其实容器的思想就是要变成软件交付的集装箱。集装箱的特点，一是封装，二是标准。</p>
<figure data-type="image" tabindex="5"><img src="https://yeolar.github.io/post-images/1604139947559.png" alt="" loading="lazy"></figure>
<p>在没有集装箱的时代，假设将货物从 A运到 B，中间要经过三个码头、换三次船。每次都要将货物卸下船来，摆的七零八落，然后搬上船重新整齐摆好。因此在没有集装箱的时候，每次换船，船员们都要在岸上待几天才能走。</p>
<figure data-type="image" tabindex="6"><img src="https://yeolar.github.io/post-images/1604139966106.png" alt="" loading="lazy"></figure>
<p>有了集装箱以后，所有的货物都打包在一起了，并且集装箱的尺寸全部一致，所以每次换船的时候，一个箱子整体搬过去就行了，小时级别就能完成，船员再也不用上岸长时间耽搁了。</p>
<p>这是集装箱“封装”、“标准”两大特点在生活中的应用。</p>
<figure data-type="image" tabindex="7"><img src="https://yeolar.github.io/post-images/1604140007933.png" alt="" loading="lazy"></figure>
<p>那么容器如何对应用打包呢？还是要学习集装箱，首先要有个封闭的环境，将货物封装起来，让货物之间互不干扰，互相隔离，这样装货卸货才方便。好在 Ubuntu中的LXC技术早就能做到这一点。</p>
<p>封闭的环境主要使用了两种技术，一种是看起来是隔离的技术，称为 Namespace，也即每个 Namespace中的应用看到的是不同的 IP地址、用户空间、程号等。另一种是用起来是隔离的技术，称为 Cgroups，也即明明整台机器有很多的 CPU、内存，而一个应用只能用其中的一部分。</p>
<p>所谓的镜像，就是将你焊好集装箱的那一刻，将集装箱的状态保存下来，就像孙悟空说：“定”，集装箱里面就定在了那一刻，然后将这一刻的状态保存成一系列文件。这些文件的格式是标准的，谁看到这些文件都能还原当时定住的那个时刻。将镜像还原成运行时的过程（就是读取镜像文件，还原那个时刻的过程）就是容器运行的过程。</p>
<p>有了容器，使得 PaaS层对于用户自身应用的自动部署变得快速而优雅。</p>
<h1 id="三-大数据拥抱云计算">三、大数据拥抱云计算</h1>
<p>在PaaS层中一个复杂的通用应用就是大数据平台。大数据是如何一步一步融入云计算的呢？</p>
<h2 id="31-数据不大也包含智慧">3.1 数据不大也包含智慧</h2>
<p>一开始这个大数据并不大，你想象原来才有多少数据？现在大家都去看电子书，上网看新闻了，在我们80后小时候，信息量没有那么大，也就看看书，看看报，一个星期的报纸加起来才有多少字啊，如果你不在一个大城市，一个普通的学校的图书馆加起来也没几个书架，是后来随着信息化的到来，信息才会越来越多。</p>
<p>首先我们来看一下大数据里面的数据，就分三种类型，一种叫结构化的数据，一种叫非结构化的数据，还有一种叫半结构化的数据。什么叫结构化的数据呢？叫有固定格式和有限长度的数据。例如填的表格就是结构化的数据，国籍：中华人民共和国，民族：汉，性别：男，这都叫结构化数据。现在越来越多的就是非结构化的数据，就是不定长，无固定格式的数据，例如网页，有时候非常长，有时候几句话就没了，例如语音，视频都是非结构化的数据。半结构化数据是一些xml或者html的格式的，不从事技术的可能不了解，但也没有关系。</p>
<p>数据怎么样才能对人有用呢？其实数据本身不是有用的，必须要经过一定的处理。例如你每天跑步带个手环收集的也是数据，网上这么多网页也是数据，我们称为Data，数据本身没有什么用处，但是数据里面包含一个很重要的东西，叫做信息Information，数据十分杂乱，经过梳理和清洗，才能够称为信息。信息会包含很多规律，我们需要从信息中将规律总结出来，称为知识knowledge，知识改变命运。信息是很多的，但是有人看到了信息相当于白看，但是有人就从信息中看到了电商的未来，有人看到了直播的未来，所以人家就牛了，你如果没有从信息中提取出知识，天天看朋友圈，也只能在互联网滚滚大潮中做个看客。有了知识，然后利用这些知识去应用于实战，有的人会做得非常好，这个东西叫做智慧intelligence。有知识并不一定有智慧，例如好多学者很有知识，已经发生的事情可以从各个角度分析的头头是道，但一到实干就歇菜，并不能转化成为智慧。而很多的创业家之所以伟大，就是通过获得的知识应用于实践，最后做了很大的生意。</p>
<p>所以数据的应用分这四个步骤：数据，信息，知识，智慧。这是很多商家都想要的，你看我收集了这么多的数据，能不能基于这些数据来帮我做下一步的决策，改善我的产品，例如让用户看视频的时候旁边弹出广告，正好是他想买的东西，再如让用户听音乐的时候，另外推荐一些他非常想听的其他音乐。用户在我的应用或者网站上随便点点鼠标，输入文字对我来说都是数据，我就是要将其中某些东西提取出来，指导实践，形成智慧，让用户陷入到我的应用里面不可自拔，上了我的网就不想离开，手不停的点，不停的买，很多人说双十一我都想断网了，我老婆在上面不断的买买买，买了A又推荐B，老婆大人说，“哎呀，B也是我喜欢的啊，老公我要买”。你说这个程序怎么这么牛，这么有智慧，比我还了解我老婆，这件事情是怎么做到的呢？</p>
<figure data-type="image" tabindex="8"><img src="https://yeolar.github.io/post-images/1604140820467.jpeg" alt="" loading="lazy"></figure>
<h2 id="32-数据如何升华为智慧">3.2 数据如何升华为智慧</h2>
<p>数据的处理分几个步骤，完成了才最后会有智慧。</p>
<p>第一个步骤叫数据的收集。首先得有数据，数据的收集有两个方式，第一个方式是拿，专业点的说法叫抓取或者爬取，例如搜索引擎就是这么做的，它把网上的所有的信息都下载到它的数据中心，然后你一搜才能搜出来。比如你去搜索的时候，结果会是一个列表，这个列表为什么会在搜索引擎的公司里面呢，就是因为他把这个数据啊都拿下来了，但是你一点链接，点出来这个网站就不在搜索引擎它们公司了。比如说新浪有个新闻，你拿百度搜出来，你不点的时候，那一页在百度数据中心，一点出来的网页就是在新浪的数据中心了。另外一个方式就是推送，有很多终端可以帮我收集数据，比如说小米手环，可以将你每天跑步的数据，心跳的数据，睡眠的数据都上传到数据中心里面。</p>
<p>第二个步骤是数据的传输。一般会通过队列方式进行，因为数据量实在是太大了，数据必须经过处理才会有用，可是系统处理不过来，只好排好队，慢慢的处理。</p>
<p>第三个步骤是数据的存储。现在数据就是金钱，掌握了数据就相当于掌握了钱。要不然网站怎么知道你想买什么呢？就是因为它有你历史的交易的数据，这个信息可不能给别人，十分宝贵，所以需要存储下来。</p>
<p>第四个步骤是数据的处理和分析。上面存储的数据是原始数据，原始数据多是杂乱无章的，有很多垃圾数据在里面，因而需要清洗和过滤，得到一些高质量的数据。对于高质量的数据，就可以进行分析，从而对数据进行分类，或者发现数据之间的相互关系，得到知识。比如盛传的沃尔玛超市的啤酒和尿布的故事，就是通过对人们的购买数据进行分析，发现了男人一般买尿布的时候，会同时购买啤酒，这样就发现了啤酒和尿布之间的相互关系，获得知识，然后应用到实践中，将啤酒和尿布的柜台弄的很近，就获得了智慧。</p>
<p>第五个步骤就是对于数据的检索和挖掘。检索就是搜索，所谓外事不决问google，内事不决问百度。内外两大搜索引擎都是讲分析后的数据放入搜索引擎，从而人们想寻找信息的时候，一搜就有了。另外就是挖掘，仅仅搜索出来已经不能满足人们的要求了，还需要从信息中挖掘出相互的关系。比如财经搜索，当搜索某个公司股票的时候，该公司的高管是不是也应该被挖掘出来呢？如果仅仅搜索出这个公司的股票发现涨的特别好，于是你就去买了，其实其高管发了一个声明，对股票十分不利，第二天就跌了，这不坑害广大股民么？所以通过各种算法挖掘数据中的关系，形成知识库，十分重要。</p>
<p><img src="https://yeolar.github.io/post-images/1604141242382.jpeg" alt="" loading="lazy"><br>
<img src="https://yeolar.github.io/post-images/1604141262561.jpeg" alt="" loading="lazy"></p>
<h2 id="33-大数据时代众人拾柴火焰高">3.3 大数据时代，众人拾柴火焰高</h2>
<p>当数据量很小的时候，很少的几台机器就能解决。慢慢的当数据量越来越大，最牛的服务器都解决不了问题的时候，就想怎么办呢？要聚合多台机器的力量，大家齐心协力一起把这个事搞定，众人拾柴火焰高。</p>
<p>对于数据的收集，对于IoT来讲，外面部署这成千上万的检测设备，将大量的温度，适度，监控，电力等等数据统统收集上来，对于互联网网页的搜索引擎来讲，需要将整个互联网所有的网页都下载下来，这显然一台机器做不到，需要多台机器组成网络爬虫系统，每台机器下载一部分，同时工作，才能在有限的时间内，将海量的网页下载完毕。</p>
<figure data-type="image" tabindex="9"><img src="https://yeolar.github.io/post-images/1604141536684.jpeg" alt="" loading="lazy"></figure>
<p>对于数据的传输，一个内存里面的队列肯定会被大量的数据挤爆掉，于是就产生了基于硬盘的分布式队列，这样队列可以多台机器同时传输，随你数据量多大，只要我的队列足够多，管道足够粗，就能够撑得住。</p>
<figure data-type="image" tabindex="10"><img src="https://yeolar.github.io/post-images/1604141721080.jpeg" alt="" loading="lazy"></figure>
<p>对于数据的存储，一台机器的文件系统肯定是放不下了，所以需要一个很大的分布式文件系统来做这件事情，把多台机器的硬盘打成一块大的文件系统。</p>
<figure data-type="image" tabindex="11"><img src="https://yeolar.github.io/post-images/1604141762190.jpeg" alt="" loading="lazy"></figure>
<p>再如数据的分析，可能需要对大量的数据做分解，统计，汇总，一台机器肯定搞不定，处理到猴年马月也分析不完，于是就有分布式计算的方法，将大量的数据分成小份，每台机器处理一小份，多台机器并行处理，很快就能算完。例如著名的Terasort对1个TB的数据排序，相当于1000G，如果单机处理，怎么也要几个小时，但是并行处理209秒就完成了。</p>
<p><img src="https://yeolar.github.io/post-images/1604141896534.jpeg" alt="" loading="lazy"><br>
<img src="https://yeolar.github.io/post-images/1604141923480.jpeg" alt="" loading="lazy"><br>
<img src="https://yeolar.github.io/post-images/1604141940076.jpeg" alt="" loading="lazy"></p>
<p>所以说大数据平台，什么叫做大数据，说白了就是一台机器干不完，大家一起干。随着数据量越来越大，很多不大的公司都需要处理相当多的数据，这些小公司没有这么多机器可怎么办呢？</p>
<h2 id="34-大数据需要云计算云计算需要大数据">3.4 大数据需要云计算，云计算需要大数据</h2>
<p>说到这里，大家想起云计算了吧。当想要干这些活的时候，需要好多好多的机器一块做，真的是想什么时候要，想要多少就要多少。例如大数据分析公司的财务情况，可能一周分析一次，如果要把这一百台机器或者一千台机器都在那放着，一周用一次对吧，非常浪费。那能不能需要计算的时候，把这一千台机器拿出来，然后不算的时候，这一千台机器可以去干别的事情。谁能做这个事儿呢？只有云计算，可以为大数据的运算提供资源层的灵活性。而云计算也会部署大数据放到它的PaaS平台上，作为一个非常非常重要的通用应用。因为大数据平台能够使得多台机器一起干一个事儿，这个东西不是一般人能开发出来的，也不是一般人玩得转的，怎么也得雇个几十上百号人才能把这个玩起来，所以说就像数据库一样，其实还是需要有一帮专业的人来玩这个东西。现在公有云上基本上都会有大数据的解决方案了，一个小公司我需要大数据平台的时候，不需要采购一千台机器，只要到公有云上一点，这一千台机器都出来了，并且上面已经部署好了的大数据平台，只要把数据放进去算就可以了。</p>
<p>云计算需要大数据，大数据需要云计算，两个人就这样结合了。</p>
<h1 id="四-人工智能拥抱大数据">四、人工智能拥抱大数据</h1>
<h2 id="41-机器什么时候才能懂人心">4.1 机器什么时候才能懂人心</h2>
<p>虽说有了大数据，人的欲望总是这个不能够满足。虽说在大数据平台里面有搜索引擎这个东西，想要什么东西我一搜就出来了。但是也存在这样的情况，我想要的东西不会搜，表达不出来，搜索出来的又不是我想要的。例如音乐软件里面推荐一首歌，这首歌我没听过，当然不知道名字，也没法搜，但是软件推荐给我，我的确喜欢，这就是搜索做不到的事情。当人们使用这种应用的时候，会发现机器知道我想要什么，而不是说当我想要的时候，去机器里面搜索。这个机器真像我的朋友一样懂我，这就有点人工智能的意思了。</p>
<p>人们很早就在想这个事情了。最早的时候，人们想象，如果要是有一堵墙，墙后面是个机器，我给它说话，它就给我回应，我如果感觉不出它那边是人还是机器，那它就真的是一个人工智能的东西了。</p>
<h2 id="42-让机器学会推理">4.2 让机器学会推理</h2>
<p>怎么才能做到这一点呢？人们就想：我首先要告诉计算机人类的推理的能力。你看人重要的是什么呀，人和动物的区别在什么呀，就是能推理。我要是把我这个推理的能力啊告诉机器，机器就能根据你的提问，推理出相应的回答，真能这样多好。推理其实人们慢慢的让机器能够做到一些了，例如证明数学公式。这是一个非常让人惊喜的一个过程，机器竟然能够证明数学公式。但是慢慢发现其实这个结果，也没有那么令人惊喜，因为大家发现了一个问题，数学公式非常严谨，推理过程也非常严谨，而且数学公式很容易拿机器来进行表达，程序也相对容易表达。然而人类的语言就没这么简单了，比如今天晚上，你和你女朋友约会，你女朋友说：如果你早来，我没来，你等着，如果我早来，你没来，你等着。这个机器就比比较难理解了，但是人都懂，所以你和女朋友约会，你是不敢迟到的。</p>
<h2 id="43-教给机器知识">4.3 教给机器知识</h2>
<p>所以仅仅告诉机器严格的推理是不够的，还要告诉机器一些知识。但是知识这个事儿，一般人可能就做不来了，可能专家可以，比如语言领域的专家，或者财经领域的专家。语言领域和财经领域知识能不能表示成像数学公式一样稍微严格点呢？例如语言专家可能会总结出主谓宾定状补这些语法规则，主语后面一定是谓语，谓语后面一定是宾语，将这些总结出来，并严格表达出来不久行了吗？后来发现这个不行，太难总结了，语言表达千变万化。就拿主谓宾的例子，很多时候在口语里面就省略了谓语，别人问：你谁啊？我回答：我刘超。但是你不能规定在语音语义识别的时候，要求对着机器说标准的书面语，这样还是不够智能，就像罗永浩在一次演讲中说的那样，每次对着手机，用书面语说：请帮我呼叫某某某，这是一件很尴尬的事情。</p>
<p>人工智能这个阶段叫做专家系统。专家系统不易成功，一方面是知识比较难总结，另一方面总结出来的知识难以教给计算机。因为你自己还迷迷糊糊，似乎觉得有规律，就是说不出来，就怎么能够通过编程教给计算机呢？</p>
<h2 id="44-算了教不会你自己学吧">4.4 算了，教不会你自己学吧</h2>
<p>于是人们想到，看来机器是和人完全不一样的物种，干脆让机器自己学习好了。机器怎么学习呢？既然机器的统计能力这么强，基于统计学习，一定能从大量的数字中发现一定的规律。</p>
<p>其实在娱乐圈有很好的一个例子，可见一斑</p>
<p>有一位网友统计了知名歌手在大陆发行的 9 张专辑中 117 首歌曲的歌词，同一词语在一首歌出现只算一次，形容词、名词和动词的前十名如下表所示（词语后面的数字是出现的次数）：</p>
<table>
<thead>
<tr>
<th>a</th>
<th>形容词</th>
<th>b</th>
<th>名词</th>
<th>c</th>
<th>动词</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>孤独:34</td>
<td>0</td>
<td>生命:50</td>
<td>0</td>
<td>爱:54</td>
</tr>
<tr>
<td>1</td>
<td>自由:17</td>
<td>1</td>
<td>路:37</td>
<td>1</td>
<td>碎:37</td>
</tr>
<tr>
<td>2</td>
<td>迷惘:16</td>
<td>2</td>
<td>夜:29</td>
<td>2</td>
<td>哭:35</td>
</tr>
<tr>
<td>3</td>
<td>坚强:13</td>
<td>3</td>
<td>天空:24</td>
<td>3</td>
<td>死:27</td>
</tr>
<tr>
<td>4</td>
<td>绝望:8</td>
<td>4</td>
<td>孩子:23</td>
<td>4</td>
<td>飞:26</td>
</tr>
<tr>
<td>5</td>
<td>青春:7</td>
<td>5</td>
<td>雨:21</td>
<td>5</td>
<td>梦想:14</td>
</tr>
<tr>
<td>6</td>
<td>迷茫:6</td>
<td>6</td>
<td>石头:9</td>
<td>6</td>
<td>祈祷:10</td>
</tr>
<tr>
<td>7</td>
<td>光明:6</td>
<td>7</td>
<td>鸟:9</td>
<td>7</td>
<td>离去:10</td>
</tr>
</tbody>
</table>
<p>如果我们随便写一串数字，然后按照数位依次在形容词、名词和动词中取出一个词，连在一起会怎么样呢？</p>
<p>例如取圆周率 3.1415926，对应的词语是：坚强，路，飞，自由，雨，埋，迷惘。稍微连接和润色一下：</p>
<p>坚强的孩子，</p>
<p>依然前行在路上，</p>
<p>张开翅膀飞向自由，</p>
<p>让雨水埋葬他的迷惘。</p>
<p>是不是有点感觉了？当然真正基于统计的学习算法比这个简单的统计复杂的多。</p>
<p>然而统计学习比较容易理解简单的相关性，例如一个词和另一个词总是一起出现，两个词应该有关系，而无法表达复杂的相关性，并且统计方法的公式往往非常复杂，为了简化计算，常常做出各种独立性的假设，来降低公式的计算难度，然而现实生活中，具有独立性的事件是相对较少的。</p>
<h2 id="45-模拟大脑的工作方式">4.5 模拟大脑的工作方式</h2>
<p>于是人类开始从机器的世界，反思人类的世界是怎么工作的。</p>
<figure data-type="image" tabindex="12"><img src="https://yeolar.github.io/post-images/1604143292462.jpeg" alt="" loading="lazy"></figure>
<p>人类的脑子里面不是存储着大量的规则，也不是记录着大量的统计数据，而是通过神经元的触发实现的，每个神经元有从其他神经元的输入，当接收到输入的时候，会产生一个输出来刺激其他的神经元，于是大量的神经元相互反应，最终形成各种输出的结果。例如当人们看到美女瞳孔放大，绝不是大脑根据身材比例进行规则判断，也不是将人生中看过的所有的美女都统计一遍，而是神经元从视网膜触发到大脑再回到瞳孔。在这个过程中，其实很难总结出每个神经元对最终的结果起到了哪些作用，反正就是起作用了。</p>
<p>于是人们开始用一个数学单元模拟神经元</p>
<p>这个神经元有输入，有输出，输入和输出之间通过一个公式来表示，输入根据重要程度不同(权重)，影响着输出。</p>
<figure data-type="image" tabindex="13"><img src="https://yeolar.github.io/post-images/1604143395812.jpeg" alt="" loading="lazy"></figure>
<p>于是将n个神经元通过像一张神经网络一样连接在一起，n这个数字可以很大很大，所有的神经元可以分成很多列，每一列很多个排列起来，每个神经元的对于输入的权重可以都不相同，从而每个神经元的公式也不相同。当人们从这张网络中输入一个东西的时候，希望输出一个对人类来讲正确的结果。例如上面的例子，输入一个写着2的图片，输出的列表里面第二个数字最大，其实从机器来讲，它既不知道输入的这个图片写的是2，也不知道输出的这一系列数字的意义，没关系，人知道意义就可以了。正如对于神经元来说，他们既不知道视网膜看到的是美女，也不知道瞳孔放大是为了看的清楚，反正看到美女，瞳孔放大了，就可以了。</p>
<p>对于任何一张神经网络，谁也不敢保证输入是2，输出一定是第二个数字最大，要保证这个结果，需要训练和学习。毕竟看到美女而瞳孔放大也是人类很多年进化的结果。学习的过程就是，输入大量的图片，如果结果不是想要的结果，则进行调整。如何调整呢，就是每个神经元的每个权重都向目标进行微调，由于神经元和权重实在是太多了，所以整张网络产生的结果很难表现出非此即彼的结果，而是向着结果微微的进步，最终能够达到目标结果。当然这些调整的策略还是非常有技巧的，需要算法的高手来仔细的调整。正如人类见到美女，瞳孔一开始没有放大到能看清楚，于是美女跟别人跑了，下次学习的结果是瞳孔放大一点点，而不是放大鼻孔。</p>
<h2 id="46-没道理但做得到">4.6 没道理但做得到</h2>
<p>听起来也没有那么有道理，但是的确能做到，就是这么任性。</p>
<p>神经网络的普遍性定理是这样说的，假设某个人给你某种复杂奇特的函数，f(x)：</p>
<figure data-type="image" tabindex="14"><img src="https://yeolar.github.io/post-images/1604143551203.jpeg" alt="" loading="lazy"></figure>
<p>不管这个函数是什么样的，总会确保有个神经网络能够对任何可能的输入x，其值f(x)（或者某个能够准确的近似）是神经网络的输出。</p>
<p>如果在函数代表着规律，也意味着这个规律无论多么奇妙，多么不能理解，都是能通过大量的神经元，通过大量权重的调整，表示出来的。</p>
<h2 id="47-人工智能的经济学解释">4.7 人工智能的经济学解释</h2>
<p>这让我想到了经济学，于是比较容易理解了。</p>
<figure data-type="image" tabindex="15"><img src="https://yeolar.github.io/post-images/1604143646353.png" alt="" loading="lazy"></figure>
<p>我们把每个神经元当成社会中从事经济活动的个体。于是神经网络相当于整个经济社会，每个神经元对于社会的输入，都有权重的调整，做出相应的输出，比如工资涨了，菜价也涨了，股票跌了，我应该怎么办，怎么花自己的钱。这里面没有规律么？肯定有，但是具体什么规律呢？却很难说清楚。</p>
<p>基于专家系统的经济属于计划经济，整个经济规律的表示不希望通过每个经济个体的独立决策表现出来，而是希望通过专家的高屋建瓴和远见卓识总结出来。专家永远不可能知道哪个城市的哪个街道缺少一个卖甜豆腐脑的。于是专家说应该产多少钢铁，产多少馒头，往往距离人民生活的真正需求有较大的差距，就算整个计划书写个几百页，也无法表达隐藏在人民生活中的小规律。</p>
<p>基于统计的宏观调控就靠谱的多了，每年统计局都会统计整个社会的就业率，通胀率，GDP等等指标，这些指标往往代表着很多的内在规律，虽然不能够精确表达，但是相对靠谱。然而基于统计的规律总结表达相对比较粗糙，比如经济学家看到这些统计数据可以总结出长期来看房价是涨还是跌，股票长期来看是涨还是跌，如果经济总体上扬，房价和股票应该都是涨的。但是基于统计数据，无法总结出股票，物价的微小波动规律。</p>
<p>基于神经网络的微观经济学才是对整个经济规律最最准确的表达，每个人对于从社会中的输入，进行各自的调整，并且调整同样会作为输入反馈到社会中。想象一下股市行情细微的波动曲线，正是每个独立的个体各自不断交易的结果，没有统一的规律可循。而每个人根据整个社会的输入进行独立决策，当某些因素经过多次训练，也会形成宏观上的统计性的规律，这也就是宏观经济学所能看到的。例如每次货币大量发行，最后房价都会上涨，多次训练后，人们也就都学会了。</p>
<h2 id="48-人工智能需要大数据">4.8 人工智能需要大数据</h2>
<p>然而神经网络包含这么多的节点，每个节点包含非常多的参数，整个参数量实在是太大了，需要的计算量实在太大，但是没有关系啊，我们有大数据平台，可以汇聚多台机器的力量一起来计算，才能在有限的时间内得到想要的结果。</p>
<p>人工智能可以做的事情非常多，例如可以鉴别垃圾邮件，鉴别黄色暴力文字和图片等。这也是经历了三个阶段的。第一个阶段依赖于关键词黑白名单和过滤技术，包含哪些词就是黄色或者暴力的文字。随着这个网络语言越来越多，词也不断的变化，不断的更新这个词库就有点顾不过来。第二个阶段时，基于一些新的算法，比如说贝叶斯过滤等，你不用管贝叶斯算法是什么，但是这个名字你应该听过，这个一个基于概率的算法。第三个阶段就是基于大数据和人工智能，进行更加精准的用户画像和文本理解和图像理解。</p>
<p>由于人工智能算法多是依赖于大量的数据的，这些数据往往需要面向某个特定的领域(例如电商，邮箱)进行长期的积累，如果没有数据，就算有人工智能算法也白搭，所以人工智能程序很少像前面的IaaS和PaaS一样，将人工智能程序给某个客户安装一套让客户去用，因为给某个客户单独安装一套，客户没有相关的数据做训练，结果往往是很差的。但是云计算厂商往往是积累了大量数据的，于是就在云计算厂商里面安装一套，暴露一个服务接口，比如您想鉴别一个文本是不是涉及黄色和暴力，直接用这个在线服务就可以了。这种形势的服务，在云计算里面称为软件即服务，SaaS (Software AS A Service)</p>
<p>于是工智能程序作为SaaS平台进入了云计算。</p>
<h1 id="五-云计算大数据人工智能过上了美好的生活">五、云计算，大数据，人工智能过上了美好的生活</h1>
<p>终于云计算的三兄弟凑齐了，分别是IaaS，PaaS和SaaS，所以一般在一个云计算平台上，云，大数据，人工智能都能找得到。对一个大数据公司，积累了大量的数据，也会使用一些人工智能的算法提供一些服务。对于一个人工智能公司，也不可能没有大数据平台支撑。所以云计算，大数据，人工智能就这样整合起来，完成了相遇，相识，相知。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云计算到底是谁发明的？]]></title>
        <id>https://yeolar.github.io/post/yun-ji-suan-dao-di-shi-shui-fa-ming-de/</id>
        <link href="https://yeolar.github.io/post/yun-ji-suan-dao-di-shi-shui-fa-ming-de/">
        </link>
        <updated>2020-10-30T13:29:57.000Z</updated>
        <content type="html"><![CDATA[<p>说到云计算的起源，公众普遍认为，谷歌前CEO埃里克·施密特是云计算概念的第一个提出者。</p>
<p>2006年8月9日，在搜索引擎大会（SES San Jose 2006）上，他提出了“云计算（Cloud Computing）”的概念。</p>
<p><img src="https://yeolar.github.io/post-images/1604064679197.png" alt="" loading="lazy"><br>
埃里克·施密特（Eric Schmidt）</p>
<p>也有人认为，当今云计算市场的龙头老大——美国亚马逊（Amazon）公司，在更早的2006年3月，就正式推出了自家的弹性计算云（Elastic Compute Cloud，EC2）服务，是事实上的云计算开创者。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604064752951.png" alt="" loading="lazy"></figure>
<p>其实，准确来说，不管是谷歌还是亚马逊，都不是云计算的发明人。云计算概念的提出，远比我们想象中要早得多。</p>
<p>今天这篇文章，我们就针对云计算来一次彻底的“寻根问祖”。</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604064788996.png" alt="" loading="lazy"></figure>
<h1 id="part1-公共计算云计算理论的萌芽">Part.1  公共计算——云计算理论的萌芽</h1>
<p>大家应该还记得，我们的计算机通识课本里说过，世界上第一台电子计算机是ENIAC（埃尼阿克）。</p>
<p><img src="https://yeolar.github.io/post-images/1604064812675.jpeg" alt="" loading="lazy"><br>
Electronic Numerical Integrator And Computer</p>
<p>电子数字积分计算机</p>
<p>其实，严谨来说，ENIAC只能算是世界上第二台电子计算机。在它之前，还有一台名叫阿塔纳索夫-贝瑞（Atanasoff–Berry Computer）的计算机，简称ABC计算机。只不过这台ABC计算机不可编程，所以ENIAC是第一台通用电子计算机。</p>
<p>ENIAC的出现，宣告了计算时代的开始，从此人类打开了计算机世界的大门。</p>
<p>像ENIAC这样的早期计算机，体型巨大、耗资昂贵，计算能力也非常有限。最重要的是，它缺乏多用户能力，同一时间只能被一个人占用。大家都想用的话，只能排队。</p>
<p>1955年，美国麻省理工学院（MIT）的约翰·麦卡锡（John McCarthy）教授提出了time-sharing（分时）的技术理念，希望借此可以满足多人同时使用一台计算机的诉求。</p>
<p><img src="https://yeolar.github.io/post-images/1604064883430.jpeg" alt="" loading="lazy"><br>
约翰·麦卡锡（1927-2011）</p>
<p>这个约翰·麦卡锡大家应该很眼熟，没错，他就是Artificial Intelligence（AI）概念的提出者，世界公认的人工智能之父，后来在1971年获得了图灵奖。</p>
<p>无独有偶，1959年6月，英国计算机科学家克里斯托弗·斯特雷奇（Christopher Strachey）在国际信息处理大会上，发表了一篇学术论文，也是关于大型机共享使用的，名字叫做**《大型高速计算机中的时间共享（Time Sharing in Large Fast Computer）》**。</p>
<p><img src="https://yeolar.github.io/post-images/1604064913875.jpeg" alt="" loading="lazy"><br>
克里斯托弗·斯特雷奇（1916-1975）</p>
<p>在这篇论文中，<strong>虚拟化</strong>的概念被首次提出。现在我们都知道，虚拟化是如今云计算架构的基石。当时那篇论文，绝对堪称“惊为天人”。</p>
<p>到了1961年，又是咱们的大神约翰·麦卡锡，在麻省理工学院一百周年纪念庆典上，首次提出了**Utility Computing（公共计算服务）**的概念：</p>
<p>“如果我设想的那种计算机（注：即分时计算机，同时支持多人同时使用的计算机）能够成真，那么计算或许某天会像电话一样被组织成公共服务…… Utility Computing（公共计算服务）将是一种全新的重要工业的基础。”</p>
<p>这个Utility Computing的翻译，其实行业里存在一定的争议。Utility有“公共服务、实用、效用”的意思，有人把它翻译成公共计算，也有人翻译成效用计算。</p>
<p>麦卡锡的理念，其实借鉴了传统的电厂模式。</p>
<p>说白了，就是把计算资源当作是一种像电一样的能源资源。用户可以像把灯泡插入插座一样，随时随地使用计算资源，并根据使用量进行付费。</p>
<p>受麦卡锡观点的影响，麻省理工学院和DARPA（美国国防高级研究计划局）下属的IPTO（信息处理技术办公室）共同启动了著名的<strong>MAC（Multiple Access Computing）项目</strong>。DARPA还专门提供了约200万美元的项目津贴。</p>
<p>MAC项目的目标，就是开发“多人可同时使用的电脑系统”。实际上，这就是“云”和“虚拟化”技术的雏形。</p>
<p>1964年，大西洋月刊发表了一篇题为《The Computers of Tomorrow（明日计算机）》的文章，详细分析了公共计算服务与公共电网的异同点。</p>
<p>文章指出，计算想要成为像电网那样的公共服务，需要关注三个问题：</p>
<ul>
<li>接口——用户如何和资源进行对接？</li>
<li>服务设备——用户通过什么设备将资源转换成服务？</li>
<li>产品同质性——电总归是电，而计算是一种复杂的服务，存在多样性，存在不同的编程语言和硬件，如何兼容、交互？</li>
</ul>
<p>1965年，在《The Computers of Tomorrow》的影响下，MAC项目组开始开发<strong>Multics分时多任务操作系统</strong>。在这个过程中，GE（通用电气）被选为硬件供应商，IBM出局。贝尔实验室后来也加入到MAC的软件开发中。</p>
<p>1965年，从MAC中出局的IBM开始研发CP-40/CMS分时操作系统，该系统于1967年发布，是<strong>历史上第一个虚拟机系统</strong>。</p>
<p>1969年，受不了Multics缓慢进展的贝尔实验室从MAC项目退出，开始开发<strong>Unix操作系统（1970年问世）</strong>。</p>
<p>1969年，在约瑟夫·利克莱德（J.C.R.Licklider，IPTO负责人）的推动下，ARPA（国防部高级研究计划局）研究的计算机网络<strong>ARPANET</strong>诞生。</p>
<p>我相信大家都认识ARPANET，没错，这就是后来的Internet。</p>
<p><img src="https://yeolar.github.io/post-images/1604064983930.jpeg" alt="" loading="lazy"><br>
约瑟夫·利克莱德（1915-1990）</p>
<p>自此，云计算所依赖的三大底层技术全部出现了：</p>
<ul>
<li>用于管理物理计算资源的操作系统</li>
<li>用于把资源分给多人同时使用的虚拟化技术</li>
<li>用于远程接入的互联网</li>
</ul>
<h1 id="part2-网格计算云计算理念的复苏">Part.2  网格计算——云计算理念的复苏</h1>
<p>虽然云计算基础技术纷纷出现，但20世纪70-80年代，人们沉浸于PC市场的繁荣，主要精力都放在了软件和网络上，进而忽视了对Utility Computing的关注。</p>
<p>1984年，SUN公司联合创始人John Gage（约翰·盖奇）提出** “网络就是计算机（The Network is the Computer）”**的重要猜想，用于描述分布式计算技术带来的新世界。云计算，其实就是分布式计算的一种。</p>
<p><img src="https://yeolar.github.io/post-images/1604065021274.jpeg" alt="" loading="lazy"><br>
约翰·盖奇</p>
<p>然而，人们仍然没有对云计算引起足够的关注。</p>
<p>直到90年代，云计算相关的理念重新回到了人们的视野。不过这次它换了一个更简单的名字，叫做<strong>网格计算（Grid Computing）</strong>。</p>
<p>网格（Grid）的叫法，和我们日常理解的“网格化管理”有很大不同，它是直接照搬自电网的概念（Electric Power Grid）。它的本质目的，还是把大量机器整合成一个虚拟的超级机器，给分布在世界各地的人们使用，也就是公共计算服务。</p>
<p>1996年，康柏（Compaq）公司的一群技术主管在讨论计算业务的发展时，首次使用了Cloud Computing这个词，他们认为商业计算会向Cloud Computing的方向转移。</p>
<p><img src="https://yeolar.github.io/post-images/1604065053418.jpeg" alt="" loading="lazy"><br>
1996年11月14日，康柏公司关于cloud computing的商业计划</p>
<p><strong>这是Cloud Computing（云计算）概念的真正首次出现。</strong></p>
<p>1997年，美国教授Ramnath K. Chellappa对“Cloud Computing”这个词做出了首个学术定义：“计算边界由经济而并非完全由技术决定的计算模式”。</p>
<p><img src="https://yeolar.github.io/post-images/1604065077581.jpeg" alt="" loading="lazy"><br>
拉姆纳特·K·切拉帕（印度裔）</p>
<p>此后的云计算发展，掀起了一股小高潮——</p>
<p>1997年，InsynQ基于HP的设备上线了按需使用的应用和桌面服务。</p>
<p>1998 年，VMware公司成立，并首次引入 X86 的虚拟技术。同年，HP成立公共计算部门。</p>
<p>1999 年，MarcAndreessen创建LoudCloud，是世界上第一个商业化的IaaS平台。</p>
<p>同年，salesforce.com公司成立。这家公司是目前公认的云计算先驱，创始人是几个Oracle公司前高管。</p>
<p>公司成立之初，他们就喊出了“No Software”的口号，宣布开启”软件终结“革命。</p>
<p><img src="https://yeolar.github.io/post-images/1604065109843.png" alt="" loading="lazy"><br>
他们通过自己的互联网站点向企业提供客户关系管理（CRM）软件系统，使得企业不必像以前那样通过部署自己的软件系统来进行客户管理。这就是最早的软件即服务（SaaS）模型。</p>
<p>2000年，Sun公司发布 Sun cloud。</p>
<p>2001年，HP公司发布公共数据中心产品。</p>
<p>……</p>
<p>此时此刻，云计算已经是呼之欲出了。</p>
<h1 id="part3-亚马逊谷歌云计算的正式诞生">Part.3  亚马逊&amp;谷歌——云计算的正式诞生</h1>
<p>2000年，当时美国电子商务公司Amazon正在开发电商服务平台Merchant.com，旨在帮助第三方公司在Amazon上构建自己的在线购物网站。</p>
<p>不过，因为架构设计能力和管理流程等方面的问题，这个项目进展缓慢。</p>
<p>于是，亚马逊的管理层开始考虑，是不是可以将已有的代码进行解耦，设计成独立的API服务，然后让内部或外部应用进行服务调用。这样，既可以节约后续的开发工作量，也可以增强系统的灵活性和复用度。</p>
<p>由此，2002年亚马逊启用了**Amazon Web Services（AWS）**平台。当时该免费服务可以让企业将Amazon.com的功能整合到自家网站上。</p>
<p>2003年，安迪·杰西（Andy Jassy），当时杰夫·贝索斯（Jeff Bezos，亚马逊创始人）的秘书长，现在AWS的CEO，在贝索斯的家里召开了一次管理层会议。会上，大家决定要把应用开发的通用部分抽离出来，做一个公共基础设施服务平台，让内外部开发者可以基于这个平台开发自己的应用。</p>
<p><img src="https://yeolar.github.io/post-images/1604065144903.png" alt="" loading="lazy"><br>
安迪·杰西</p>
<p>随后，他们整理了一系列可以成为公共服务的候选模块，并从中挑了服务器、存储和数据库三个部分开始。不仅因为这三个需求最多，还因为Amazon最擅长这部分，毕竟低利润率商业模式让他在如何降低数据中心的运营成本上颇有积累。</p>
<p>2006年，亚马逊推出了两款重磅产品，分别是S3（Simple Storage Service，简单存储服务）和EC2（Elastic Cloud Computer，弹性云计算），从而奠定了自家云计算服务的基石（直至今日都无人可以撼动）。</p>
<p>在那一期间，谷歌其实也没有闲着。这家诞生于1998年的年轻公司，在2003~2006年期间，连续发表了四篇重磅文章，分别关于<strong>分布式文件系统（GFS）、并行计算（MapReduce）、数据管理（Big Table）和分布式资源管理（Chubby）</strong>。</p>
<p>这些关键技术不仅奠定了谷歌自家的云计算服务基础，也为全世界云计算、大数据的发展指明了方向。</p>
<p>2006年，27岁的Google高级工程师克里斯托夫·比希利亚第一次向Google董事长兼CEO施密特提出“云端计算”的想法。在施密特的支持下，Google推出了“Google 101计划”，并正式提出“云”的概念。</p>
<p><img src="https://yeolar.github.io/post-images/1604065163967.jpeg" alt="" loading="lazy"><br>
克里斯托夫·比希利亚</p>
<p>后来《财富》杂志10大最具头脑人物授予其“最聪明的工程师”称号</p>
<p>于是，就有了本文开头施密特发表的讲话。</p>
<p>至此，云计算揭开了神秘的面纱，正式来到了公众的面前。随后的云计算，进入了快速发展阶段，并最终渗透到了我们工作和生活的各个领域。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[互联网调研]]></title>
        <id>https://yeolar.github.io/post/intro/</id>
        <link href="https://yeolar.github.io/post/intro/">
        </link>
        <updated>2020-10-30T13:15:39.000Z</updated>
        <content type="html"><![CDATA[<p>写点东西</p>
]]></content>
    </entry>
</feed>