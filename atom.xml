<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yeolar.github.io</id>
    <title>互联网调研</title>
    <updated>2020-11-18T14:11:32.609Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yeolar.github.io"/>
    <link rel="self" href="https://yeolar.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yeolar.github.io/images/avatar.png</logo>
    <icon>https://yeolar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 互联网调研</rights>
    <entry>
        <title type="html"><![CDATA[什么是低代码（Low-Code）？]]></title>
        <id>https://yeolar.github.io/post/shi-me-shi-di-dai-ma-low-code/</id>
        <link href="https://yeolar.github.io/post/shi-me-shi-di-dai-ma-low-code/">
        </link>
        <updated>2020-11-18T13:33:07.000Z</updated>
        <summary type="html"><![CDATA[<p>什么是低代码？我们为什么需要低代码？低代码会让程序员失业吗？本文总结了低代码领域的基本概念、核心价值与行业现状，带你全面了解低代码。</p>
]]></summary>
        <content type="html"><![CDATA[<p>什么是低代码？我们为什么需要低代码？低代码会让程序员失业吗？本文总结了低代码领域的基本概念、核心价值与行业现状，带你全面了解低代码。</p>
<!-- more -->
<h1 id="一-前言">一 前言</h1>
<p>如果选择用一个关键词来代表即将过去的2020年，我相信所有人都会认同是“新冠”。疫情来得太快就像龙卷风，短短数月就阻断了全世界范围内无数人与人之间的物理连接。但好在，我们已经全面迈入互联网时代：N95口罩再厚，也阻挡不了信息比特流的顺畅流通（宅男：B站依然香）；居家隔离再久，也妨碍不了钉钉消息的准时送达（社畜：工作依然苦）。逍遥子在9月份的云栖大会上说：“新技术代表的新生产力，一定是我们全速战胜疫情、开创未来最好的原动力。” 那么在后疫情时代，究竟需要什么样的新技术，才能真正解放IT生产力，加速社会数字化转型，Make The World Great Again？我认为是低代码（Low-Code）。</p>
<p>基于经典的可视化和模型驱动理念，结合最新的云原生与多端体验技术，低代码能够在合适的业务场景下实现大幅度的提效降本，为专业开发者提供了一种全新的高生产力开发范式（Paradigm Shift）。另一方面，低代码还能让不懂代码的业务人员成为所谓的平民开发者（Citizen Developer），弥补日益扩大的专业人才缺口，同时促成业务与技术深度协作的终极敏捷形态（BizDevOps）。本文将重点介绍低代码相关背景知识，包括低代码的定义与意义、相关概念、行业发展等，期望能帮助大家更好地认识与理解低代码这个新兴领域。</p>
<h1 id="二-什么是低代码">二 什么是低代码</h1>
<p>“Low-Code”是什么？如果你是第一次听说，没准也会跟我当年从老板口中听到这个词后的内心戏一样：啥？“Low-Code”？“Code”是指代码我知道，但这个“Low”字是啥意思？不会是老板发现我最近赶工写的代码很丑很“Low”吧... 想多了，老板怎么可能亲自review代码呢。那难道是指，“Low-level programming”里的“Low”？老板终于发现让我等编程奇才整天堆Java业务代码太浪费，要派我去闭关写一个高性能C语言网络库... 显然也不是，老板哪能有这技术情怀呢。那到底是什么意思？作为一名搜商比情商还高的程序员，能问Google的绝不会问老板。于是我一顿操作后，不假思索地点开了第一条搜索结果。果不其然，这是一条充满自由芳香只有翻墙才能闻到的Wikipedia词条：Low-code development platform。</p>
<p><strong>Wikipedia定义</strong></p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1605706613255.jpg" alt="" loading="lazy"></figure>
<p>从Wiki的这段定义中，我们可以提炼出几个关键信息：</p>
<ul>
<li>低代码开发平台（LCDP）本身也是一种软件，它为开发者提供了一个创建应用软件的开发环境。看到“开发环境”几个字是不是很亲切？对于程序员而言，低代码开发平台的性质与IDEA、VS等代码IDE（集成开发环境）几乎一样，都是服务于开发者的生产力工具。</li>
<li>与传统代码IDE不同的是，低代码开发平台提供的是更高维和易用的可视化IDE。大多数情况下，开发者并不需要使用传统的手写代码方式进行编程，而是可以通过图形化拖拽、参数配置等更高效的方式完成开发工作。</li>
</ul>
<p><strong>Forrester定义</strong></p>
<p>顺着Wiki的描述还能发现，原来“Low-Code”一词早在2014年就由Forrester提出了，它对低代码开发平台的始祖级定义是这样的：</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1605706699187.jpg" alt="" loading="lazy"></figure>
<p>相比Wiki的版本，这个定义更偏向于阐明低代码所带来的核心价值：</p>
<ul>
<li>低代码开发平台能够实现业务应用的快速交付。也就是说，不只是像传统开发平台一样“能”开发应用而已，低代码开发平台的重点是开发应用更“快”。更重要的是，这个快的程度是颠覆性的：根据Forrester在2016年的调研，大部分公司反馈低代码平台帮助他们把开发效率提升了5-10倍。而且我们有理由相信，随着低代码技术、产品和行业的不断成熟，这个提升倍数还能继续上涨。</li>
<li>低代码开发平台能够降低业务应用的开发成本。一方面，低代码开发在软件全生命周期流程上的投入都要更低（代码编写更少、环境设置和部署成本也更简单）；另一方面，低代码开发还显著降低了开发人员的使用门槛，非专业开发者经过简单的IT基础培训就能快速上岗，既能充分调动和利用企业现有的各方面人力资源，也能大幅降低对昂贵专业开发者资源的依赖。</li>
</ul>
<p><strong>低代码核心能力</strong></p>
<p>基于上述的定义和分析，不难总结出如下这3条低代码开发平台的核心能力：</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1605706734867.jpg" alt="" loading="lazy"></figure>
<ul>
<li>全栈可视化编程：可视化包含两层含义，一个是编辑时支持的点选、拖拽和配置操作，另一个是编辑完成后所及即所得（WYSIWYG）的预览效果。传统代码IDE也支持部分可视化能力（如早年Visual Studio的MFC/WPF），但低代码更强调的是全栈、端到端的可视化编程，覆盖一个完整应用开发所涉及的各个技术层面（界面/数据/逻辑）。</li>
<li>全生命周期管理：作为一站式的应用开发平台，低代码支持应用的完整生命周期管理，即从设计阶段开始（有些平台还支持更前置的项目与需求管理），历经开发、构建、测试和部署，一直到上线后的各种运维（e.g. 监控报警、应用上下线）和运营（e.g. 数据报表、用户反馈）。</li>
<li>低代码扩展能力：使用低代码开发时，大部分情况下仍离不开代码，因此平台必须能支持在必要时通过少量的代码对应用各层次进行灵活扩展，比如添加自定义组件、修改主题CSS样式、定制逻辑流动作等。一些可能的需求场景包括：UI样式定制、遗留代码复用、专用的加密算法、非标系统集成。</li>
</ul>
<p><strong>不只是少写代码</strong></p>
<p>回到最初那个直击心灵的小白问题：Low-Code中的“Low”，到底是啥意思？答案已经显而易见：既不是指抽象程度很低（相反，低代码开发方式的抽象程度要比传统编程语言高一个level），也不是指代码很low（也相反，低代码所生成的代码一般都经过精心维护和反复测试，整体质量强于大部分手写代码），而是单纯的“少写代码” —— 只在少数需要的情况下才手写代码，其他大部分时候都能用可视化等非代码方式解决。</p>
<p>再往深一点儿看，低代码不只是少写代码而已：代码写得少，bug也就越少（正所谓“少做少错”），因此开发环节的两大支柱性工作“赶需求”和“修bug”就都少了；要测的代码少了，那么测试用例也可以少写不少；除了开发阶段以外，平台还覆盖了后续的应用构建、部署和管理，因此运维操作也更少了（Low-Code → Low-Ops）。</p>
<p>然而，少并不是最终目的：如果单纯只是想达到少的效果，砍需求减人力、降低质量要求也是一样的。低代码背后的哲学，是少即是多（Less is More），或者更准确说是多快好省（Do More with Less） —— 能力更多、上线更快、质量更好，成本还更省，深刻践行了阿里“既要，又要，还要”的价值观精髓。</p>
<figure data-type="image" tabindex="4"><img src="https://yeolar.github.io/post-images/1605706868227.jpg" alt="" loading="lazy"></figure>
<p><strong>平台的职责与挑战</strong></p>
<p>上面说的是低代码给开发者提供的能力与吸引力，那么作为服务的提供方与应用的承载者，低代码开发平台自身应该承担怎样的职责，其中又会遇到多大的挑战？是否就一定要如阿里云所主张的那样，“把复杂留给自己，把简单留给别人”？虽然这句话听起来很深明大义，但不知道大家有没有想过，为什么我们一定要抱着复杂不放，平白无故给自己找事？就不能直接干掉复杂，也给咱阿里云自己的员工留点简单吗？是工作太容易就体现不出来KPI价值了，还是家里的饭菜不如公司的夜宵香？</p>
<p>冥思苦想许久后，我从热力学第一定律中找到了答案：开发一个应用的总复杂度是恒定的，只能转移而不可能凭空消失。要想让开发者做的更少，安心享受简单的快乐，那么平台方就得做的更多，默默承担尽可能多的复杂度。就像一个满身腱子肉的杂技男演员，四平八稳地托举着在高处旋转与跳跃的女搭档；上面的人显得越轻盈越毫不费力，下面的人就得越稳重越用尽全力。当然，不是说上面的女演员就很轻松没压力，只是他们各自的分工不同，所承担的复杂度也不一样。</p>
<p>根据《人月神话》作者Fred Brooks的划分，软件开发的复杂度可以划分为本质复杂度（Essential complexity ）和偶然复杂度（Accidental complexity）。前者是解决问题时固有的最小复杂度，跟你用什么样的工具、经验是否丰富、架构好不好等都无关，而后者就是除此之外在实际开发过程中引入的复杂度。通常来说，本质复杂度与业务要解决的特定问题域强相关，因此这里我把它称为更好理解的“业务复杂度”；这部分复杂度不是任何开发方法或工具能解决的，包括低代码。而偶然复杂度一般与开发阶段的技术细节强相关，因此我也相应把它称为“技术复杂度”；而这一部分复杂度，恰好就是低代码所擅长且适合解决的。</p>
<p>为开发者尽可能屏蔽底层技术细节、减少不必要的技术复杂度，并支撑其更好地应对业务复杂度（满足灵活通用的业务场景需求），这是身为一个低代码开发平台所应该尽到的核心职责。</p>
<figure data-type="image" tabindex="5"><img src="https://yeolar.github.io/post-images/1605706955896.jpg" alt="" loading="lazy"></figure>
<p>在尽到上述职责的同时，低代码开发平台作为一个面向开发者的产品，还需要致力于为开发者提供简单直观的极致开发体验。这背后除了巨大的工作量，还得能在“强大”和“易用”这两个很难两全其美的矛盾点之间，努力找到一个符合自己产品定位与目标客户需求的平衡点 —— 这也许是设计一个通用低代码开发平台所面临的最大挑战。</p>
<h1 id="三-低代码相关概念对比">三 低代码相关概念对比</h1>
<p><strong>纯代码（Pro-Code / Custom-Code）</strong></p>
<p>“纯代码”可能算是我杜撰的一个词，更常见的说法是专业代码（Pro-Code）或定制代码（Custom-Code）；但意思都一样，就是指传统的以代码为中心（Code-Centric）的开发模式。之所以我选择用“纯代码”，是因为如果用“专业代码”会显得似乎低代码就不专业了一样，而用“定制代码”又容易让人误解成低代码无法支持定制的自定义代码。</p>
<p>当然，更准确的称谓我认为是“高代码”（与低代码恰好对应，只是名字太难听，被我嫌弃了...），因为即便是使用传统的代码IDE，有些开发工作也支持（甚至更适合）以非代码方式完成，比如：iOS端开发时使用的SwiftUI界面设计器、服务端开发数据库应用时使用的PowerDesigner建模工具。不过这部分可视化工作在传统开发模式下只是起辅助作用，最后通常也是生成开发者可直接修改的代码；开发者仍然是以代码为中心来开展主要工作。</p>
<p>低代码与纯代码之间的关系，其实跟视频和文章之间很像：</p>
<ul>
<li>低代码就像是现代的“视频”，大部分内容都由直观易理解、表达能力强的图片组成，因此更容易被大众所接受。但与此同时，视频也不是死板得只能有图片，完全可以添加少量文字（如字幕、标注）来弥补图片表达不够精确的问题。BTW，关于“图”和“文字”之间的辩证关系，可以进一步参考《架构制图：工具与方法论》<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>这篇文章中的相关描述。</li>
<li>纯代码则更像是传统的“文章”，虽然很久以来都一直是信息传播的唯一媒介，但自从视频技术诞生以及相应软硬件基础设施的普及以来，便逐渐开始被抢走了风头。如今，视频已成为大部分人获取信息的主要渠道（从电视电影到B站抖音），而经常读书读文章的人却越来越少。但不可否认的是，文章依然有它存在的意义和受众（不然我也不会费这劲敲这么多字了），即使“市场份额”一直在被挤压，但永远会有它立足的空间。</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://yeolar.github.io/post-images/1605707034315.jpg" alt="" loading="lazy"></figure>
<p>如果按上面这种类比关系推导，低代码未来也会遵循与视频类似的发展轨迹，超越纯代码成为主流开发模式。Gartner的预测也表达了相同的观点：到2024年，所有应用程序开发活动当中的65%将通过低代码的方式完成，同时75%的大型企业将使用至少四种低代码开发工具进行应用开发。</p>
<p>但同样地，就像是视频永远无法取代文章一样，低代码也永远无法彻底取代纯代码开发方式。未来低代码和纯代码方式将以互补的形态长期共存，各自在其所适合的业务场景中发光发热。在后面的“低代码业务场景”章节，会详细列出哪些场景在现阶段更适合用低代码模式开发。</p>
<p><strong>零代码（Zero-Code / No-Code）</strong></p>
<p>从分类的完备性角度来看，有“纯代码”自然也应该有完全相反的“零代码”（也称为“无代码”）。零代码就是完全不需要写代码的应用开发平台，但这并不代表零代码就比低代码更高级和先进，它只是做了一个更极端的选择而已：彻底拥抱简单的图形可视化，完全消灭复杂的文本代码。选择背后的原因是，零代码开发平台期望能尽可能降低应用开发门槛，让人人都能成为开发者（注意：开发 ≠ 写代码），包括完全不懂代码的业务分析师、用户运营，甚至是产品经理（不懂装懂可不算懂）。</p>
<p>即便是专业开发者，在技术分工越来越精细的趋势下（前端/后端/算法/SRE/数据分析..），也很难招到一个能独立开发和维护整套复杂应用的全栈工程师。但零代码可以改变这一切：无论是Java和JavaScript傻傻分不清楚的技术小白，还是精通深度学习但没时间学习Web开发的算法大牛，都可以通过零代码实现自己的技术梦或全栈梦。“改变世界的idea已有，就差一个程序员了”，这句玩笑话或许真的可以成真；哦不，甚至都用不着程序员，有idea的人自己就能上。</p>
<figure data-type="image" tabindex="7"><img src="https://yeolar.github.io/post-images/1605707097251.jpg" alt="" loading="lazy"></figure>
<p>当然，所有选择都要付出代价，零代码也不例外。完全抛弃代码的代价，就是平台能力与灵活性受限：</p>
<ul>
<li>一方面，可视化编辑器的表达能力远不及图灵完备的通用编程语言，不引入代码根本没法实现灵活的定制与扩展（当然，理论上也可以做成Scrach/Blockly那样的图形编程语言，但那样不过是换一种形式在手写代码而已）。</li>
<li>另一方面，由于目标受众是非专业开发人员，平台能支持的操作会更趋于“傻瓜化”（e.g. 页面只支持大块业务组件的简单堆叠，不支持细粒度原子组件和灵活的CSS布局定义），同时也只会透出相对“亲民化”的模型和概念（e.g. 使用“表格”表示数据，而不是用“数据库”），无法支撑强大专业的底层开发原语和编程理念。</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://yeolar.github.io/post-images/1605707147597.jpg" alt="" loading="lazy"></figure>
<p>虽然零代码与狭义上的低代码有着上述明显差异，但从广义上来说，零代码可以当作低代码的一个子集。Gartner在其相关调研报告中，就是将“No Code”划在了范围更广的低代码应用平台“LCAP”（Low-Code Application Platform）中。而当前市面上很多通用的低代码开发平台，也都兼具一定程度的零代码能力；比如低代码领域领头羊Mendix，既提供了简单易用的零代码Web IDE - Mendix Studio，也包括一个功能更强大的低代码桌面IDE - Mendix Studio Pro。</p>
<p><strong>HpaPaaS（高生产力应用PaaS）</strong></p>
<p>上文提到，“Low-Code”一词是拜Forrester所赐。作为同样是国际知名调研机构（a.k.a 造词小能手）的Gartner，显然不会轻易在这场可能决定低代码领域江湖地位的新概念作词大赛中认输，于是也于2017年发明了“HpaPaaS”（High-productivity application Platform as a Service）这个听上去更高大上的缩写词。</p>
<p>按照Gartner的定义，HpaPaaS是一种支持声明式、模型驱动设计和一键部署的平台，提供了云上的快速应用开发（RAD）、部署和运行特性；这显然与低代码的定义如出一辙。但事实证明，名字起得太专业并不见得是好事，“HpaPaas”最终还是败给了起源更早、更接地气也更顺口的“Low-Code”：从2019年开始，Gartner在其相关调研报告中也开始全面采用“Low-Code”一词（如LCAP），亲手为“HpaPaaS”打上了 @deprecated 印记。</p>
<figure data-type="image" tabindex="9"><img src="https://yeolar.github.io/post-images/1605707207554.jpg" alt="" loading="lazy"></figure>
<p>图源：https://blog.kintone.com/business-with-heart/difference-saas-iaas-paas-apaas-hpapaas</p>
<p>值得补充的是，“HpaPaaS“这个词也并非横空出世，而是传承自更早之前Gartner提出的“aPaaS”，它俩之间的关系是：HpaPaaS只是aPaaS的一个子类；除了HpaPaaS这种通过低代码实现的高生产力应用开发平台以外，aPaaS还包括面向纯代码的传统应用开发平台（High-control aPaaS，即可控度更高的纯代码开发方式）。</p>
<p>不值得但就想八卦一下的是，“aPaaS”这个词也非凭空捏造，而是与云计算的兴起渊源颇深。相信各位云道中人都已猜到，aPaaS与IaaS/PaaS/SaaS这些云计算远古概念是一脉相承的：aPaaS介于PaaS和SaaS之间，相比PaaS提供的服务更偏应用，但又不像SaaS一样提供现成的软件服务（更详细的说明可参考配图来源文章）。</p>
<h1 id="四-为什么需要低代码">四 为什么需要低代码</h1>
<p>低代码是什么可能并没那么重要，毕竟在这个信息爆炸的世界，永远不缺少新奇而又短命的事物。大部分所谓的新技术都只是昙花一现：出现了，被看到了；大部分人“哦”了一声，已阅但表示不感兴趣；小部分人惊叹于它的奇思妙想，激动地点了个赞后，回过头来该用什么还是什么。真正决定新技术是否能转化为新生产力的，永远不是技术本身有多么优秀和华丽，而是它是否真的被需要，即：为什么需要低代码？如果用不同的主语填充上面这个问句（冷知识：这叫做“延迟主语初始化”），可以更全面地看待这个问题：</p>
<p><strong>为什么「市场」需要低代码？</strong></p>
<p>在这个大爷大妈都满嘴“互联网+”和“数字化转型”的时代，企业越来越需要通过应用（App）来改善企业内部的信息流转、强化与客户之间的触点连接。然而，诞生还不太久的IT信息时代，也正面临着与我国社会主义初级阶段类似的供需关系矛盾：落后的软件开发生产力跟不上人民日益增长的业务需求。</p>
<figure data-type="image" tabindex="10"><img src="https://yeolar.github.io/post-images/1605707266127.jpg" alt="" loading="lazy"></figure>
<p>Gartner预测，到2021年应用开发需求的市场增长将至少超过企业IT交付能力的5倍。面对如此巨大的IT缺口，如果没有一种革命性的“新生产力”体系，很难想象仅凭现有传统技术体系的发展延续就能彻底解决问题。而低代码技术正是带着这样的使命而降临，期望通过以下几个方面彻底革新应用开发生产力，拯救差一点就要迈入水深火热的IT世界：</p>
<p><em>提效降本 &amp; 质量保障</em></p>
<p>虽然软件行业一直在高速发展，新的语言、框架和工具层出不穷，但作为从业者我们不得不承认：软件开发仍处于手工作坊阶段，效率低、人力成本高、质量不可控。项目延期交付已成为行业常态，而瓶颈几乎总是开发人员（对机器能解决的问题都不是问题）；优秀的开发人才永远是稀缺资源，还贼贵；软件质量缺陷始终无法收敛，线上故障频发资损不断。</p>
<p>相比而言，传统制造业经过几百年工业革命的发展，大部分早已摆脱了对“人”的强依赖：从原料输入到制品输出，中间是各种精密仪器和自动化流水线的稳定支撑，真正实现生产的标准化和规模化。虽然信息化号称是人类的第三次工业革命，但以软件行业目前的状况，远远还没到达成熟的“工业化”阶段。</p>
<p>所以，亲爱的程序员朋友，当你与前端联调了一上午接口，又与产品撕逼了一下午需求，再与自己的bug抗争了一整晚，好不容易遁入梦乡又被一连串报警短信吵醒时，是否有抬头对着星空憧憬过：“I have a dream... that one day，软件开发也能像工业制品一样，批量流水化生产，稳定高效没烦恼。” 事到如今，不管你有没有意识到，这个憧憬正在慢慢变成现实。</p>
<figure data-type="image" tabindex="11"><img src="https://yeolar.github.io/post-images/1605707316720.jpg" alt="" loading="lazy"></figure>
<p>是的，低代码正在将应用软件开发过程工业化：每个低代码开发平台都是一个技术密集型的应用工厂，所有项目相关人员都在同一条产线内紧密协作。开发主力不再是熟知for循环一百种写法的技术Geek，而是一群心怀想法业务sense十足的应用Maker。借助应用工厂中各种成熟的基础设施、现成的标准零件、自动化的装配流水线，开发者只需要专注于最核心的业务价值即可。即便是碰到非标需求，也可以随时自己动手，用最灵活的手工定制（代码）方式来解决各种边角问题。</p>
<p><em>扩大应用开发劳动力</em></p>
<p>通过让大部分开发工作可以仅通过简单的拖拽与配置完成，低代码（包括零代码）显著降低了使用者门槛，让企业能够充分利用前面所提到的平民开发者资源。部分纯零代码需求场景下，低代码还能让业务人员实现自助式（self-service）应用交付，既解决了传统IT交付模式下的任务堆积（backlog）问题，避免稀缺的专业开发资源被大量简单、重复性的应用开发需求所侵占，也能让业务人员真正按自己的想法去实现应用，摆脱交由他人开发时不可避免的桎梏。</p>
<figure data-type="image" tabindex="12"><img src="https://yeolar.github.io/post-images/1605707366844.jpg" alt="" loading="lazy"></figure>
<p>至此，应用开发能力不再是少数专业开发者的专利和特权，且今后所需要的技能门槛与拥有成本也会越来越低，真正实现所谓的“技术民主化”（democratization of technology）。</p>
<p><em>加强开发过程的沟通协作</em></p>
<p>多方调查结果显示，软件项目失败的最主要原因之一就是缺乏沟通（poor communication）。传统开发模式下，业务、产品、设计、开发、测试与运维人员各司其职，且各有一套领域内的工具和语言，长久以来很容易形成一个个“竖井”（silos），让跨职能的沟通变得困难而低效。这也是为什么当前热门的敏捷开发和DevOps都在强调沟通（前者是协同Biz与Dev，而后者是协同Dev和Ops），而经典的DDD领域驱动设计也主张通过“统一语言”来减少业务与技术人员之间的沟通不一致。</p>
<figure data-type="image" tabindex="13"><img src="https://yeolar.github.io/post-images/1605707407904.jpg" alt="" loading="lazy"></figure>
<p>有了低代码后，这一状况将得到根本改善：上述各角色都可以在同一个低代码开发平台上紧密协作（甚至可以是同一个人），这种全新的协作模式不仅打破了职能竖井，还能通过统一的可视化语言和单一的应用表示（页面/数据/逻辑），轻松对齐项目各方对应用形态和项目进度的理解，实现更终极的敏捷开发模式，以及在传统DevOps基础之上更进一步的BizDevOps<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p>
<p><em>统一开发平台下的聚合效应</em></p>
<p>低代码尝试将所有与应用开发相关活动都收敛到同一个平台（one platform）上后，将会产生更多方面的聚合效应与规模收益：</p>
<ul>
<li>人员聚合：除了上一点所提到的各职能角色紧密协作以外，人员聚合到统一的低代码开发平台进行作业后，还能促进整个项目流程的标准化、规范化和统一化。</li>
<li>应用聚合：一方面，新应用的架构设计、资产复用、相互调用变得更容易；另一方面，各应用的数据都天然互通，同时平台外数据也能通过集成能力进行打通，彻底消除企业的数据孤岛问题。</li>
<li>生态聚合：当低代码开发平台聚合了足够多的开发者和应用后，将形成一个巨大的、连接一切、有无限想象力的生态体系，彻底放飞低代码的价值。</li>
</ul>
<p><strong>为什么「这个时代」才需要低代码？</strong></p>
<p>如果你了解过市面上各种低代码产品，不难发现其实这个领域的许多玩家在低代码概念诞生之前就已经存在了，比如：低代码领域的另一个巨头OutSystems，早在2001年就已经创立；而去年也被Forrester评为低代码行业leader之一的FileMaker，更是诞生于遥远的1985年（正好35岁，似乎在疯狂暗示什么）。那么，如果低代码像前面说的那么好，为什么以前没有火起来呢？从技术和业务两个角度看，可以归纳为以下原因：</p>
<p><em>技术成熟度不足</em></p>
<p>低代码底层的各项核心技术（可视化、模型驱动、RAD、BPMS...）都已经有漫长的发展历史，看上去似乎只是新瓶装旧酒。然而理智的人都知道，任何技术都会遵循所谓的“技术成熟度曲线”（The Hype Cycle），不可能刚一诞生就跳过发育直接秀翻全场，被大规模采纳和投入生产。以模型驱动技术为例，虽然十几年前就已经有体系化的理论研究（e.g. MDA）和配套工具（e.g. EMF），但在当时的技术背景下，由于能力不完备、过于理想化、技术门槛高等原因，一直没能在工业界走向主流。</p>
<figure data-type="image" tabindex="14"><img src="https://yeolar.github.io/post-images/1605707481926.jpg" alt="" loading="lazy"></figure>
<p>而如今这个时代，支撑低代码的那些“老”技术都已经过长时间的发展酝酿与市场检验，而另一些完美互补的“新”技术（e.g. 云原生、响应式Web）也在飞速发展和走向成熟，是时候通过“低代码”这个新酒瓶重新包装上市，为亟需新生产力的传统IT市场带来一场真香之旅了。</p>
<p><em>业务收益不明显</em></p>
<p>即使十几年前的低代码技术已经足够成熟，也一定不会在当年的应用开发市场上产生现在这样的影响力。为什么？因为技术都是为业务服务的，而当时的应用开发业务需求可比现在简单多了：没有如今的多渠道（Multi-channel）、多样化体验（Multi-experience）和各种集成与定制需求，也不会奢求如今已成为企业级应用标配的弹性、分布式和高可用，更是缺乏快速变化的IT业务场景来推动持续集成与快速交付。</p>
<p>虽然低代码可以完美解决上述所有问题（e.g. 多端应用生成、云原生架构、API集成能力），但放在当年的市场和业务背景下，加上前面所说的技术不成熟度，整体的投入产出比会很低，不足以让企业大面积采纳低代码解决方案。</p>
<figure data-type="image" tabindex="15"><img src="https://yeolar.github.io/post-images/1605707509309.jpg" alt="" loading="lazy"></figure>
<p>而如今这个时代，企业都快被新技术带来的能力和收益“惯坏了”，动不动就是：我想做一个送菜应用。用户端？安卓、iOS、H5、小程序都来一套。运营端？一般都在电脑上看，但记得手机上也得适配啊。服务端？上云，必须的。哦，我听技术合伙人说现在流行多云架构，也给我整一套哈。运维还要钱？啥是运维？应用有了不就能用了嘛，运维还要花我钱？你当投资者给我的钱是大风刮来的啊！</p>
<p>如果用传统的开发模式，这么全套下来的工时与报价，可能早就吓跑了这群跟产品经理一样天真可爱的人；但现代化的低代码技术，可以圆了上面这位创业者的卖菜梦，用白菜一般的价格，实现白粉一样的价值。当年的程维如果能用上现在的低代码，第一版的滴滴App也就不至于被外包做得乌烟瘴气直接报废了（至少能多扛一阵子...）。</p>
<p><strong>为什么「专业开发者」也需要低代码？</strong></p>
<p>虽然零代码确实是设计给非专业开发者用的，但其所能支撑的业务场景确实有限，无法真正革新传统开发模式，替代那些仍需专业开发者参与的复杂业务场景。而狭义上的低代码却有潜力做到这一点，因为它天生就是为专业开发者而量身定制的。Gartner最近的一项调研报告显示，“66%的低代码开发平台用户都是企业IT部门的专业开发者”。这充分说明了，专业开发者比平民开发者更需要低代码。</p>
<p>屏幕前一批穿格子衬衫的同学要发问了：“低代码都不怎么写代码了，怎么能算是为我们程序员服务呢？”。虽然程序员讨厌重复自己，但重要的事情还是得多说一遍：开发 ≠ 写代码。1万年前蹲在洞穴里的原始人，在用小石子画远古图腾；100年前坐在书桌前的徐志摩，在用钢笔给林徽因写情书；而今天趴在屏幕前的很多人，相信都已经开始用上手写板或iPad涂涂写写了。千百年来，人类使用的工具一直在演进，但所从事活动的本质并没有多大改变。无论是用小石子还是小鼠标，写作绘画的本质都是创造与表达，最终作品的好坏并不取决于当时你手中拿着什么；同样地，应用开发的本质是想法和逻辑，最终价值的高低也不取决你实现时是用的纯代码还是低代码。</p>
<p>而相比纯代码而言，低代码极有可能成为更好的下一代生产力工具：</p>
<p><em>减少不必要的工作量</em></p>
<p>可视化拖拽与参数配置的极简开发模式，结合模型驱动的代码自动生成机制，可以消灭绝大部分繁琐和重复的boilerplate代码；一站式的部署和运维管理平台，无需自己搭建CI/CD流水线、申请环境资源、配置监控报警；一次搭建同时生成、构建和发布多端应用，免去人工同步维护多个功能重复的端应用；开箱即用的组件库、模板库、主题库、连接器等，让最大化软件复用成为可能。总而言之，低代码能够让专业开发者更专注于创新性、有价值、有区分度的工作，而不是把宝贵开发时间都耗费在上面那些不必要的非业务核心工作上。</p>
<p><em>强大的平台能力支撑</em></p>
<p>虽然上面列的技术支撑性工作并不直接产生业务价值，但却会直接影响业务的性能、成本、稳定性、安全性、可持续发展能力等。有远见的企业，绝不允许牺牲这些重要指标，来换取短暂的业务加速。低代码开发平台深知这一点，因此在简化和屏蔽底层技术细节的同时，也会尽可能把自己所cover的部分做到最好（至少能和纯代码开发方式一样好），包括但不限于：</p>
<ul>
<li>现代化的技术架构和实现：现代化的低代码开发平台，在支撑用户应用时所选择的技术架构与实现方案，也会是现代化且符合业界最佳实践的，例如，前端基于主流的HTML5/CSS3标准和React框架，后端基于成熟的Java语言、SpringBoot框架和MySQL数据库，部署环境基于云原生的Docker镜像、CI/CD流水线、K8s集群和Service Mesh技术（相关知识可参考《正确入门Service Mesh：起源、发展和现状》）。</li>
<li>零成本的技术升级和维护：低代码的高维抽象开发方式，让应用的核心业务逻辑与底层技术细节彻底解耦。开发者在大部分情况下都不需要关心底层技术选型，同时也无需亲自跟进这些技术的版本升级与漏洞修复，免费享受与时俱进的技术红利和应用安全性提升。即便遇到某些底层技术或工具需要进行彻底更换（比如不再维护的开源项目），开发者也完全不必感知；技术迁移再费劲再难搞，平台自己努力就行，对开发者来说只要服务一直在线，岁月就依然静好；事后可能还会惊喜地发现，应用访问突然就变得更快了，仿佛冥冥中自有天助，感激上苍和低代码。</li>
</ul>
<p><em>一体化生态能力复用</em></p>
<p>复用（Reuse）是提升软件开发效率和工程质量的最有效途径。传统的代码开发模式下，开发者可以通过提取公共类/函数、引用共享库、调用外部API服务、沉淀代码片段和模板等方式实现复用。在低代码的世界里，平台也可以提供对应的多层次多粒度复用手段，比如页面组件库、逻辑函数库、应用模板库等。</p>
<p>但更重要的是，低代码平台还可以充分发挥其一体化的生态优势，提供强大易用的可复用能力（资产）的发现、集成与共享体系：以页面组件为例，你可以直接用系统组件，也可以在平台自带的组件市场上搜索和引用更合适的组件，还可以自己用代码开发一个自定义组件并发布到市场中。平台的生态体系越大，积累的可复用能力就越多，应用的开发成本也会越低。</p>
<p>相比而言，虽然传统代码世界整体生态更庞大和深厚，但由于各类技术不互通、缺乏统一平台与市场、代码集成成本高等原因，一直以来都没有形成有类似规模潜力的生态能力复用体系，导致重复造轮子和低水平重复建设的现象司空见惯，还美名为“新基建”。</p>
<p>说到这里，另一批裹着冲锋衣头顶锃亮的同学也忍不住了：“万一低代码真的发展起来了，是不是就不需要那么多程序员了啊？上有老下有小的，同是码农身，相煎何太急！”。低代码虽然是一场应用开发生产力革命，但并不会革掉程序员的饭碗。它去掉的只是难懂的编程语法、繁琐的技术细节和一切可自动化的重复性工作，并没有也无法去掉应用开发最核心的东西：严谨的业务逻辑、巧妙的算法设计、良好的工程风格等。对于真正的程序员，即使剥去他一层又一层的编程语言和工具熟练度技能外壳，最终剩下的仍然是一个有价值的硬核开发者。</p>
<p>当然，如果你坚持要用纯粹的写代码方式来改变世界，也不至于失业。要么，你可以选择那些低代码暂时不太适用的领域，比如底层系统驱动、3D游戏引擎、火箭发射程序；或者，你也可以选择去写低代码中那一部分不可或缺的自定义代码扩展，为平民开发者提供高质量的积木。最后，你也完全可以选择为低代码平台本身的底层代码添砖加瓦。</p>
<p><strong>为什么「我不」需要低代码</strong></p>
<p>即使所有人都认同上述“为什么要用低代码”的理由，但仍不时会有试水者跳出来，给大家细数“为什么我不需要低代码”。实践出真知没错，而且大部分质疑背后也都有一定道理；但在我看来，更多的可能是主观或无意识的偏见。这里我列了一些对低代码的常见质疑和我个人的看法，期望能帮助大家看到一个更全面和客观的低代码。</p>
<p><em>质疑1：低代码平台不好使</em></p>
<blockquote>
<p>试用过一些所谓的低代码开发平台，要么能力很弱，要么体验太差，只能开发点玩具应用。</p>
</blockquote>
<p>作为调研过国内外多款低代码产品的深度体验用户，我的观点是：不能以偏概全。低代码市场在国内正处于爆发初期，所以许多与低代码只沾一点边的产品也都在蹭热点；但它们并不能代表低代码目前的业界水平和发展方向。市面上真正成熟的企业级低代码开发平台，完全有能力以高效的开发方式满足大部分复杂场景的功能需求，以及企业级应用所需要的安全、性能、可伸缩等非功能需求，这一点在国外市场已得到充分验证（不然也不会这么被寄予厚望）。</p>
<p>当然，国内市场尚处于鱼龙混杂的混战阶段，遇到真龙的概率很低，但碰上金鱼鲤鱼甚至木头假鱼都在所难免。相信随着时间推移，真正有实力和口碑的产品都能脱颖而出，为大家展现低代码该有的样子。</p>
<p><em>质疑2：低代低开发不可控</em></p>
<blockquote>
<p>平台上的各种可视化组件、逻辑动作和部署环境都是黑盒，如果内部出问题无法排查和解决。</p>
</blockquote>
<p>作为同样不搞清楚底层原理不舒服斯基的程序员，我更愿意相信：问题只是暂时的。虽然这确实是目前使用低代码平台时绕不开的一个痛点，但并不属于低代码技术本身的固有缺陷。计算机领域有一句至理名言：任何问题都可以通过增加一个间接的中间层来解决。低代码的思路亦是如此：与当年的操作系统和现在的云平台一样，都是想通过建立一个黑盒化的中间层抽象来降低开发者的工作量与心智负担。</p>
<p>当然，所有额外增加的中间层都不是完全免费的，低代码也不例外。作为一个尚未成熟稳定的新的中间层，低代码必然会出现各种让使用者束手无措的问题，就跟当年的操作系统内核bug、如今的云主机I/O hang一样。但历史规律也告诉我们，所有伟大的技术最终都会走向成熟；只要低代码领域一直健康发展，问题总会越来越少，最终降到一个绝大部分人感知不到的范围内。过去萦绕在Windows用户心中挥之不去的“蓝屏”问题，对如今的新用户来说早已不知为何物；今天低代码开发者所遇到的种种“蓝瘦”问题，未来也终将成为被遗忘的历史（谁还没段黑历史呢）。</p>
<p><em>质疑3：低代码应用难维护</em></p>
<blockquote>
<p>应用一旦复杂起来，各种复杂逻辑流穿插着自定义代码，看不懂也改不动，还不如全用代码呢。</p>
</blockquote>
<p>作为对软件可维护性深有感触的无脑级布道者（见《救火必备！问题排查与系统优化手册》），我不得不说：用低代码开发，也要讲基本法。一般来说，无论是使用低代码开发还是纯代码开发，造成应用可维护性低的根本原因往往不在于开发工具，而是开发者自身没有去遵循一些软件开发的普适原则，比如工程规范性、命名可读性、DRY/KISS/SOLID原则等。</p>
<p>好的低代码平台绝不会阻碍开发者去改善应用的可维护性；恰恰相反，还会尽可能提供引导和帮助。以Mendix为例，除了支持基本的模型分析与重构（e.g. 无用模型、对象重命名、子逻辑流提取）以外，甚至还提供了基于ISO/IEC 25010标准的应用质量监控（AQM）能力。另一方面，让应用变得难以维护的一个客观原因也是应用本身过于复杂，而低代码作为高度抽象和自动化的开发模式，在降低应用复杂度方面是专业的。</p>
<p>综合来看，低代码虽然不是能解决一切问题的银弹，但更不是会带来更多问题的炸弹：在提高应用可维护性方面的上限，一定比传统开发模式更高；但决定应用可维护性下限的，依然还是开发者自己。</p>
<h1 id="五-低代码行业发展">五 低代码行业发展</h1>
<p>回应质疑的最好方式，就是做好你自己，用实际的表现说话。对于一个行业而言，判断它当前的表现是否够好，或者未来是否有潜力做到更好，可以从以下这三个方面进行衡量：市场规模（蛋糕够不够大）、适用场景（是否可落地）、竞品状况（有没有被验证过）。</p>
<p><strong>市场规模</strong></p>
<blockquote>
<p>Talk is cheap，show me the code money.<br>
—— Linus Starcraft</p>
</blockquote>
<p>文章可以忽悠，但市场不会说谎：</p>
<ul>
<li>Forrester在2015年曾预测过，低代码的市场将从2015年的17亿美元增长至2020年的150亿美元。</li>
<li>Marketsandmarkets在今年四月份的分析报告中预测，低代码的市场将从2020年的130亿美元（估算值，可以看出来与Forrester当年的预测是接近的）增长到2025年的450亿美元（年复合增长率：28.1%）。</li>
<li>PS Inteligence在2018年的分析报告中预测，全球的低代码开发平台市场中，亚太地区将在今后五年（2019-2024年）中保持最高的增长速度。</li>
</ul>
<figure data-type="image" tabindex="16"><img src="https://yeolar.github.io/post-images/1605707777494.jpg" alt="" loading="lazy"></figure>
<p>总结一下就是两点：</p>
<ul>
<li>低代码的市场规模足够大，且一直都在高速增长。</li>
<li>作为亚太地区的经济大国与IT强国，中国的低代码市场将会引来一个爆发期，未来几年内的增速都会超过全球平均水平。</li>
</ul>
<p><strong>适用场景</strong></p>
<p>理论上来说，低代码是完全对标传统纯代码的通用开发模式，应该有能力支撑所有可能的业务场景。但理论也只是理论，低代码一统江湖的梦想尚未照进现实，也不可能完全取代现实。前文中提到过，低代码与纯代码方式是互补关系，未来也将长期共存，各自在其所适合的业务场景中发光发热。同时还需要指出的是，当前阶段的低代码技术、产品和市场都尚未完全成熟，因此部分本来可能很适合用低代码来开发的场景，目前也只能先用纯代码来替代。</p>
<p>Gartner在2019年的低代码调研报告中，曾经绘制过一张用来阐述低代码适用场景的“应用金字塔”：</p>
<figure data-type="image" tabindex="17"><img src="https://yeolar.github.io/post-images/1605707808756.jpg" alt="" loading="lazy"></figure>
<ul>
<li>应用级别划分：从下往上，分别为工作组级（Workgroup Class）、部门级（Departmental Class）、企业级（Enterprise Class）、可扩展需求极强的企业级（Extreme-Scale Enterprise Class）。容易看出来，它主要的划分维度就是应用所面向的用户基数（基数越大，可扩展需求也越高）。</li>
<li>任务关键性：从下往上，各级别应用的任务关键性（Mission Criticality）逐级递增。例如一个只在工作组内使用的后台管理应用，一般都不会涉及到影响整个企业的关键任务。脱离企业这个视角来看，整个软件产业中也有很多通用的任务关键型应用，比如：实时操作系统、航空调度系统、银行对账系统。</li>
<li>实现复杂度：从下往上，各级别应用的复杂度（Complexity）也逐级递增。例如最上层的企业级应用，除了功能覆盖面大导致业务复杂以外，往往还需要满足更多苛刻的非功能需求，包括但不限于：用户体验、性能、可靠性、安全性、可伸缩性、可维护性、兼容性。其他一些复杂软件的案例包括：3D游戏界面（交互复杂）极其底层的游戏引擎（逻辑复杂）、超大型CRM系统（一方面是实现很复杂，另一方面，这种成熟软件的标准化程度较高，大部分情况下可以直接用现成的SaaS软件）。</li>
<li>应用需求量：从上往下，各级别应用的需求体量（Volume）逐级递增，呈现一个金字塔形状。这个特征可以用万能的2/8原则来理解：20%的“全民”应用，由于需求的通用性和普适性，可以覆盖至少80%的用户群体（例如企业大部分人都要用的考勤系统）；而剩下那80%的“小众”应用，由于需求的定制化和特殊性（例如蚂蚁的期权系统...），就只能覆盖各自小圈子里那20%的用户了。</li>
<li>与低代码的契合关系：从上往下，各级别应用与低代码越来越契合（Relevant）。也就是说：越简单的应用，越契合低代码；越不太关键的任务，也越契合低代码。同时，由于契合低代码的应用更偏金字塔底层，而这些应用的需求量都更大，所以可以得出如下判断：低代码能够适用于大部分业务场景（而且这个比例会一直上升，逐步往金字塔的更上层应用逼近），例如：B2E类应用（表单、审批流、ERP系统）、B2B类应用（企业商城、工业控制台）、B2C类应用（企业展示、营销页、店铺装修）。</li>
</ul>
<p><strong>竞品概况</strong></p>
<p>低代码虽然是一个新兴概念，但这个行业本身并不算很新（前文也有提到），这些年以来早就积累了不少资深的荣耀王者。同时，低代码作为一个朝阳产业和资本热点，近几年也不断有更多的新玩家在加入这个刺激战场。</p>
<figure data-type="image" tabindex="18"><img src="https://yeolar.github.io/post-images/1605707863366.jpg" alt="" loading="lazy"></figure>
<p>上图分别是Gartner给出的低代码平台魔力象限和Forrester给出的低代码平台技术波谱。从图中可以看到：</p>
<ul>
<li>OutSystems和Mendix一马当先，是公认的低代码领域头牌。这两家都是很纯粹的通用低代码开发平台，且都经过了长时间的发展和积累：OutSystems成立于2001年，员工人数1000+，年营收超过1亿美元；2018年6月获得了KKR和高盛的3.6亿美元融资，目前估值超过10亿美元；Mendix成立于2005年，员工人数500+，年营收超过2300万美元（18年数据），2018年8月被西门子以7.3亿美元收购。</li>
<li>Salesforce和Microsoft紧随其后，都处于行业领先者地位。但这两家的公司性质和发展路径都很不一样：Salesforce是以SaaS起家，公司规模就不用多说了，反正就是SaaS届的巨无霸。这类SaaS厂商做低代码的动力，是为了解决客户对成品SaaS软件的定制诉求。M$更不用多介绍，只说下他们做低代码的天然优势：一方面，作为办公软件航空母舰，低代码可以帮助他们的客户实现从Excel表单到定制App的能力与体验升级；另一方面，作为云计算三巨头之一，低代码可以帮助他们连接内部的云计算生态体系，为开发者提供一个统一和易用的上云界面。</li>
<li>国外市场已经得到充分验证，但国内市场还刚刚兴起，还没有一家能够赢得上述调研机构的芳心，挤进上面这两张方图。国内目前的一些竞品和融资情况包括：2018年5月，搭搭云完成A轮的千万级融资；2018年9月，宜创科技得到清源创投的战略融资；2018年12月，轻流完成千万级Pre-A融资；2019年8月，数式科技得到盈动资本的数千万人民币天使轮融资；2019年8月，ClickPaas获得晨兴资本数百万美元的A轮融资；2019年，奥哲分别获得阿里5千万的A+轮融和高榕资本上亿元的B轮融资。</li>
</ul>
<h1 id="六-结语">六 结语</h1>
<p>本文总结了低代码领域的基本概念、核心价值与行业现状。虽然这些内容都比较基础和偏理论，但我始终认为，深刻理解一个系统的前提，正是这些务虚的东西 —— 技术架构只会告诉你这个系统是怎么实现的（How），无法准确表述它到底能用来做什么（What），以及为什么要做这样一个东西（Why）；而后面这两个问题的答案，才是后续系统所有设计与演进的根因和驱动力。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>https://developer.aliyun.com/article/774446 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>https://www.cloudops.com/blog/everything-you-need-to-know-about-bizdevops/ <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[墨刀创始人张元一：工具本身就是价值的集合]]></title>
        <id>https://yeolar.github.io/post/mo-dao-chuang-shi-ren-zhang-yuan-yi-gong-ju-ben-shen-jiu-shi-jie-zhi-de-ji-he/</id>
        <link href="https://yeolar.github.io/post/mo-dao-chuang-shi-ren-zhang-yuan-yi-gong-ju-ben-shen-jiu-shi-jie-zhi-de-ji-he/">
        </link>
        <updated>2020-11-17T12:49:00.000Z</updated>
        <summary type="html"><![CDATA[<p>2014年初，张元一创立墨刀，很快成为了国内最受欢迎的在线原型设计与协同工具之一，截至2019年，墨刀平台的注册用户已经突破了140万，至此墨刀已成为了产品经理和设计师的必备工具。</p>
<p>近日，在时间国际大厦中墨刀的办公室里，i黑马&amp;数字观察采访到了创始人张元一，与他一起聊聊墨刀的发展路径以及工具的价值所在。</p>
]]></summary>
        <content type="html"><![CDATA[<p>2014年初，张元一创立墨刀，很快成为了国内最受欢迎的在线原型设计与协同工具之一，截至2019年，墨刀平台的注册用户已经突破了140万，至此墨刀已成为了产品经理和设计师的必备工具。</p>
<p>近日，在时间国际大厦中墨刀的办公室里，i黑马&amp;数字观察采访到了创始人张元一，与他一起聊聊墨刀的发展路径以及工具的价值所在。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1605617521372.png" alt="" loading="lazy"></figure>
<p>墨刀创始人张元一</p>
<p><strong>痛点先行，将“创意想法”可视化</strong></p>
<p>墨刀并不是张元一创业的第一个项目，在创办墨刀之前，他曾做过很多尝试。</p>
<p>第一次创业，张元一做了一个在线活动报名的网站“抢座网”，这个项目来自于其在工作中的遇到的真实难题。</p>
<p>“这些其实都是重复的活动，耗费时间且不会带来工作中的实际效益。”</p>
<p>由于项目本身的局限性以及当时较为恶劣的融资环境， 张元一的首次创业只持续了一年，不过，正是得益于第一次的创业经历，在日后的创业路上，张元一也愈加明晰了自己的方向。</p>
<p>2011年，张元一想和朋友一起做社交软件，可是他却发现自己竟然很难用言语去清楚地表述想法，“当时，我就在想如果有一个工具可以把想做的东西简单地画出来，那就太好了。”</p>
<p>至此，墨刀的雏形开始在张元一的脑子中呈现，2011年底，基于个人需求出发，张元一花了三个月的时间，墨刀于2012年在国外发布上线。</p>
<p>不过，张元一告诉i黑马&amp;数字观察：“当时国内用户还没有养成为在线服务付费的习惯，每个月只有几百美元左右的收入，相比预期差距太大。”</p>
<p>迫于现实的压力，2013年到2014年间，张元一以CTO的身份加入了另外两个创业项目。</p>
<p>直到2014年，迎来了国内移动互联网创业的新热潮，张元一再次看到了墨刀发展的希望，“我觉得把墨刀重新捡起来的机会到了。”</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1605617586079.png" alt="" loading="lazy"></figure>
<p>因此在2014年初的时候，张元一把墨刀进行了重写。2014年5月份，墨刀正式在国内上线，上线之后墨刀的数量呈现出稳定增长的局面，同时得益于创投圈的火热，墨刀也顺利拿到了融资。</p>
<p>对于墨刀团队的企业管理方面，张元一表示：”保持团队的精悍，每个成员都需要自我管理，墨刀团队至今服务全球140万+用户，但团队只有22位成员，同样墨刀提倡和推崇的工作理念是「自由、高效和成效」”。</p>
<p><strong>从创业者到产品经理，从C端到B端</strong></p>
<p>2014年到2019年，墨刀也经历了五年有余。</p>
<p>回想当初，张元一认为墨刀典型的使用场景以及目标用户，应该是和他一样的创业者。</p>
<p>根据不同的展示对象，无论是程序员、投资人，还是企业员工，创业者可以将想法和需求用极为生动的方式表述出来，以此快速降低沟通和理解的成本。</p>
<p>不过，2014年墨刀正式上线后，张元一根据平台的用户调研发现：“当时，我们平台中超过50%的用户是全职的产品经理，创业者的比例不到10%。”</p>
<p>基于以上调研，墨刀开始了第一次的转型，将目标客户群体从创业者向产品经理延伸。</p>
<p>同时，张元一发现：“创业者的需求在于快，其对专业的要求度并不高。而作为产品经理的生产力工具，其会涉及到更多、更复杂的功能。”</p>
<p>因此，墨刀开始从一个快、小、轻的工具向产品经理专业化的工具转变，以此为用户提供更为专业化的原型设计与协同工具产品。</p>
<p>随着墨刀的发展，张元一的思考也在逐步升级，他认为企业设计出一个产品并不是终点而是一个开始。</p>
<p>同理，对于产品经理而言，一个的产品项目上线及版本迭代，在产品原型设计环节中，都需要产品经理与企业的多个部门，进行沟通、协作及分工配合才可以完成的，如设计师对原型进行交互动效设计、技术开发前需要对原型设计元素进行样式代码识别等。</p>
<p>与此同时，张元一发现：“大公司的产品规模完全超出想象，一个小模块可能会涉及到几百上千个页面，很难由一个人去完成，所以，企业需要进行分工、协作。”</p>
<p>为此，2017年，墨刀推出3.0版本，主打团队协同方向，加速团队内部沟通效率及流程，帮助产品团队最大限度的发挥协同效应。即同一项目中可以实现多人同时在线编辑，根据不同的需求可设置不同的成员权限。</p>
<p>2018年，墨刀推出Sketch插件2.0版本，针对产品经理团队协作的设计师Sketch设计稿可以导入墨刀，进行交互设计，自动获取标注信息，推进开发进程。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1605617621040.png" alt="" loading="lazy"></figure>
<p>据张元一介绍，2019年初墨刀成功布局To B市场战略，墨刀企业版上线后，可以帮助更多的企业产品团队。</p>
<p>张元一告诉i黑马&amp;数字观察，墨刀企业版主要能够解决以下三个问题。</p>
<p>首先能够实现产品项目的高效管理及版本迭代，第二团队企业成员可随时随地在线原型设计，一键分享项目链接，第三，在墨刀的企业版中，团队内部可以共享设计素材库，并且多个项目组并行。</p>
<p>同时，企业相关的项目数据及素材等重要资源内容，都会保留在企业内部，轻松实现安全、可靠及高效的企业管理。</p>
<p>多次转型让张元一的思考愈加成熟，他告诉i黑马&amp;数字观察：“随着时间的推移，如果说一个产品只能满足一个小需求，那未来肯定会被淘汰，或者变得越来越小众。”</p>
<p>“而且，从分工协作的角度考量，如果每个人都使用不同的工具的话，，沟通、协作及管理的时间成本是非常高的。”</p>
<p>“因此，随着时间的推移，传统企业采购的工具，有时候是不符合且满足不了产品经理团队的需求，未来肯定会出现一个通用的协同工具。”</p>
<p><strong>让墨刀成为企业首选的原型设计与协作管理必备工具</strong></p>
<p>做一个“好工具”的使命贯穿了张元一这九年的创业历程。</p>
<p>在谈到工具的价值时，他告诉i黑马&amp;数字观察：“国内工具之间的竞争的确非常激烈，但是我认为属于工具的价值还没有完全发挥出来。”</p>
<p>与国外相比，国内对企业用户的数量要求更高。“我反倒觉得用户数相对来说并不是那么重要，其实国外有很多做To B市场的企业，只做200家就可以活得很好了，甚至可以达到上市的程度。”</p>
<p>同时，张元一表示，从产品层面来看，目前墨刀已经可以支撑千人左右的企业协同需求，自三月份上线以来，墨刀企业端的付费客户累计达到了15000家，在电商、金融、生活服务等行业都有标杆用户的，如联想、中国移动、北京银行、什么值得买、三只松鼠、创业邦及千米网等都是墨刀企业客户。</p>
<p>“墨刀可以提供标准化、全平台的移动端、Web端、硬件设备端等产品原型模板，同时也可以为存在特定需求的企业提供定制化的版本。”</p>
<p>谈到墨刀未来的发展，张元一告诉i黑马&amp;数字观察：“依旧是从工具着手，自然地进行扩展。”</p>
<p>同时，在市场变得趋同的大背景下，张元一表示：“从长远来看，随着时间的推移，产品的确会趋向同质化，因此，我们要拼的更多是基本功，比谁的产品底层基础功能更扎实、更稳定，产品的使用更流畅。”</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黄奇帆：这一领域可能产生几十家万亿级企业]]></title>
        <id>https://yeolar.github.io/post/huang-qi-fan-zhe-yi-ling-yu-ke-neng-chan-sheng-ji-shi-jia-wan-yi-ji-qi-ye/</id>
        <link href="https://yeolar.github.io/post/huang-qi-fan-zhe-yi-ling-yu-ke-neng-chan-sheng-ji-shi-jia-wan-yi-ji-qi-ye/">
        </link>
        <updated>2020-11-16T01:17:19.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>我们回顾经济史，每一个时代的风口都会催生一批独角兽……所谓的一个个时代，大体上可以用20年划一个时代。比如六七十年代，中国人说的，收音机、自行车、手表、缝纫机……八九十年代的4大件就是空调、洗衣机、冰箱和电视机……到了新世纪的20年，进入家庭的四大件，那就是轿车、笔记本电脑、手机、液晶面板形成的各种显示设备。最近这10年，实际上就出现了互联网消费时代的企业，比如阿里巴巴、腾讯、百度，美团等等。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>我们回顾经济史，每一个时代的风口都会催生一批独角兽……所谓的一个个时代，大体上可以用20年划一个时代。比如六七十年代，中国人说的，收音机、自行车、手表、缝纫机……八九十年代的4大件就是空调、洗衣机、冰箱和电视机……到了新世纪的20年，进入家庭的四大件，那就是轿车、笔记本电脑、手机、液晶面板形成的各种显示设备。最近这10年，实际上就出现了互联网消费时代的企业，比如阿里巴巴、腾讯、百度，美团等等。</p>
</blockquote>
<!-- more -->
<p>“每个时代总会有一批企业跟千家万户的生活融合在一起，这种产品需求量规模巨大，谁能在这样的一个巨大的产品需求和产业链当中崛起，成为主体的企业，一般都会成为世界级的大企业。”</p>
<p>“如果说资本市场是股权投资的战场，独角兽是科创企业的主力军，私募基金、风险投资基金就是市场化选择独角兽的‘啄木鸟 ’。”</p>
<p>“如果说中国的消费互联网市场目前能够容纳几家万亿级的企业，在产业互联网领域，今后有可能产生或者容纳几十家同等规模的创新企业。这是一个巨大的蓝海，今后的独角兽将主要产生于工业互联网的体系。”</p>
<p>“中央提出在中国要建设推动一批德国的弗劳恩霍夫研究所。中央文件推荐要建某一种研究所，大家以前很少看到，到底什么是弗劳恩霍夫研究所呢？其实它就是一个科学技术转移机构。这个研究所并不搞科研创新活动，他所有的工作人员就是科学技术的经纪人，研究所的功能主要特征就是我们中国人说的‘婚姻介绍所’，做红娘的。 ”</p>
<p>“我们国家去年的研发费占GDP的2.2%，100万亿的GDP差不多是2.2万亿的研发费，这个研发费仅次于美国的总量，我们排第二，所以这个量投入不小，但是我们研发费集中度不高。特别是发达国家，研发费的20%左右集中在基础性的、核心的、高科技的研发方面，也就是我们说的核高基。在这个意义上讲，我们国家去年核高基领域的研发费总投入，仅仅是我们全部研发费的5%，意思就是我们 2.2万亿的研发费，实际上只有1100亿投在核高基上。大家这么想一下，核高基投入不足，也就形成我们的短板。”</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1605489576328.jpg" alt="" loading="lazy"></figure>
<p>以下是黄奇帆11月13日在 “2020中国未来独角兽高峰论坛 ”演讲全全文整理：</p>
<p>两周前，十九届五中全会刚刚闭幕，审议通过了关于制定国民经济和社会发展<strong>第十四个五年计划规划和2035年远景目标的建议</strong>。</p>
<p>这是在新的历史起点上、新的内外形势下，开启新的伟大征程、构建新的发展格局的一次盛会，必将对中国未来 30 年发展轨迹产生深远影响。</p>
<p>今天，我们借这个机会，结合独角兽发展这一会议主题，我想就学习十九届五中全会，加强自立自强有关创新的精神谈一点体会，供大家参考。</p>
<p><strong>中美独角兽企业占全球数量的80%</strong></p>
<p><strong>培育独角兽企业成为各级政府产业政策的重要目标</strong></p>
<p>在胡润2020年全球独角兽榜上显示，今年全球一共有586家独角兽企业上榜，比去年增加了92家，中国和美国占据全球独角兽数量的80% 。</p>
<p>美国有233家，比2019年的203家，增加了30家，中国今年有227家，比2019年的206家增加了21家；</p>
<p>美国估值超过100亿美元的超级独角兽有11家，市值加起来比日本的GDP的6万亿美元还要大。</p>
<p>从区域来看，美国硅谷有122家，占全球独角兽企业的21% ．中国的北京、上海、深圳等地，是独角兽出没相对较多的地区。</p>
<p>正是由于独角兽企业在加速全产业链裂变和迭代方面的特殊作用，培育独角兽企业也成为各级政府产业政策的重要目标 。</p>
<p>国内像南京、武汉、杭州等地，都把培育独角兽作为政府推动创新、促进发展的重要工程来抓。</p>
<p>今天，我们在山西太原召开以独角兽为主题的会议，也体现了山西省委省政府、太原市委市政府抢抓独角兽发展机遇的战略意图，是新形势下贯彻落实总书记关于构建新发展格局战略思想的重要体现。</p>
<p><strong>独角兽的出现与新的风口是分不开的</strong></p>
<p>新一轮科技革命和产业变革浪潮下，产业互联网是新风口，将会出现新的独角兽。独角兽的企业概念，虽然是近10来年提出来的，但这个现象本身早已存在。</p>
<p>事实上，我们回顾经济史，每一个时代的风口都会催生一批独角兽，工业产品的风口，所谓的一个个时代，大体上可以用20年划一个时代。</p>
<p>比如六七十年代，全世界千家万户都使用的商品，实际上就4个，即使中国人说的，收音机、自行车、手表、缝纫机 。</p>
<p>这些在美国，四五十年代就开始进入家庭，日本是五六十年代进入家庭，中国是六七十年。</p>
<p>这个时候，哪个城市能够做这4大件，哪个城市有做自行车或者做手表的企业，这些企业往往是当时最风云、最有名气的，最有广告效应的企业。</p>
<p>在中国来说，到了八九十年代，四大件还照样是老百姓生活需要，但已经不是引领风尚的了。八九十年代的4大件就是空调、洗衣机、冰箱和电视机。</p>
<p>那时候北京、上海、广州、天津能够做这些4大件的，都是属于中国工业最发达的地方。</p>
<p>到了新世纪的20年，进入家庭的四大件，那就是轿车、笔记本电脑、手机、液晶面板形成的各种显示设备 。</p>
<p>哪个城市能够有这4大件的大批量生产企业，哪个城市工业一定比较强，哪个城市有这样的企业，这个企业往往也是中国比较有名气的，或者甚至世界范围内比较有地位的企业，所以这个又是新的时代。</p>
<p>最近这10年，实际上就出现了互联网消费时代的企业，比如阿里巴巴、腾讯、百度，美团等等。</p>
<p>我讲这个概念就是说，每个时代总会有一批企业跟千家万户的生活融合在一起，这种产品需求量规模巨大，谁能在这样的一个巨大的产品需求和产业链当中崛起，成为主体的企业，一般都会成为世界级的大企业。</p>
<p><strong>不同于消费互联网</strong></p>
<p><strong>产业互联网更像是一个行业一个行业的“小锅菜”</strong></p>
<p>今天，我们正处于新一轮科技和产业革命蓬勃兴起、数字经济风起云涌的新时代，在新基建的加持下，产业互联网加是一个风口，一定会催生出体量更大、影响更广的独角兽企业。</p>
<p>所谓产业互联网也就是利用数字技术，把产业各要素、各环节全部数字化、网络化，推动业务流程生产方式的变革重组，进而形成新的产业协作、资源配置和价值创造体系，与消费互联网相比，产业互联网有明显的区别。</p>
<p>比如，产业互联网是产业链集群中多方协作共赢，消费互联网是赢者通吃，产业互联网的价值链更复杂、链条更长，消费互联网集中度较高 ；</p>
<p>产业互联网的盈利模式是为产业创造价值、提高效率、节省开支，消费互联网盈利通常是先烧钱补贴，打败同行对手，再通过规模经济或增值业务赚钱。</p>
<p>这个意思就是，产业互联网实际上在发展中，实际是一个行业一个行业的“小锅菜”。</p>
<p>比如汽车产业链，上千个零部件企业，就是一个行业“小锅菜”，就可能使得不增加投入、不增加原材料消耗的背景下，为产业链增长提供1%~10%的新增值。</p>
<p>也就是说，如果这个产业链原来有1万亿的产出，由于数字化平台的赋能，使得产业链增加额外增加5~10%，变成10，500 亿或者11，000亿，新增的500、1000亿，既是产值也是利润，也是增加值，总之是一个很好的产出的链。</p>
<p>但这个链做完以后，你要像消费互联网一样，1000万人，10亿人、50亿人一刀切的模式推开，是不行的 。</p>
<p>因为汽车产业链有汽车产业链的工业互联网的信息构架，如果到医疗产品的产业链，它的产业链的构架同样是产业链的泛在信息，有各种人工智能分析的信息，这里的结构、内在的含义是完全不同的。</p>
<p>也就是说，你在汽车产业链上发明创造的一些数字技术，不一定在医疗体系的产业链能够直截了当的应用。</p>
<p>从这个意义上，产业互联网这个菜，是要一锅一锅的炒 。</p>
<p>100个工业产业链，可能会有100种工业互联网的摆布结构，你不能一刀切，排浪式的推开，这个是工业互联网跟消费互联网的不同点。</p>
<p>因为人的个性都一样，所以14亿人可以一刀切，一种网络平台，在这样的网络平台下，打败同行变成最重要的了 。</p>
<p>一旦把同行打败了，它就具有了某种垄断的程度，有了垄断的地位，这个时候广告都集中到你这个平台上来了，你就可以收到巨额的广告费。</p>
<p>同样，消费互联网的平台入门费，实际上到了垄断的时候，可能会达到 10%-20% 营业额的费用率，这是很高的 。</p>
<p>我们平时到一个超市、一个百货商店，因为它是个房地产，有物业的成本，这种成本使得你商品上架可能要销售额的15%-20% 。</p>
<p>现在到具有一定垄断意义的互联网消费平台，千家万户的工商企业要把自己的商品上架，特别是能够推到网络页面的前面，就需要付比较高的平台入门费，这都是垄断以后产生的效益。</p>
<p>没垄断的时候，在烧钱竞争的时候，可能是2年、3年、5年，整个过程就是赔本，就是用股东的钱，多少年都赚不了钱。</p>
<p>但是产业互联网不能这么干，产业互联网是在为上千个小企业或者一群龙头企业服务，如果整个的活动过程中，两年、三年对小企业、对龙头企业、毫无帮助、毫无效益，你自己也在烧钱，而别人并没有跟你垄断性市场份额的竞争，大家各管各的。</p>
<p>你做汽车，我做化工，你做机电工业，我做手工业、消费品工业，大家行当不同，也不存在过分的竞争。</p>
<p>你自己烧了许多本钱，又没有给你服务的企业带来具体的好处，你这个企业是没有生存能力的。</p>
<p>就像猪八戒网，它是一个产业互联网，这个产业互联网上现在有5个门类各种各样的企业，如果猪八戒网不能为这5个门类、几十万个企业带来每天看得见摸得着的市场效应、服务效率提高或者各种成本下降的好处，猪八戒网一天都生存不了。</p>
<p>所以搞产业互联网的思维模式，要摒弃消费互联网的发展模式，在消费互联网成功的那一套，产业互联网不一定会成功，这方面大家要有认识。</p>
<p><strong>如果数字化转型能拓展10%的产业价值空间</strong></p>
<p><strong>每年就能多创造2000亿美元的价值</strong></p>
<p>产业互联网是一片蓝色的海洋，它的市场空间有多大呢？</p>
<p>有关材料分析，目前全球有60多个、万亿美元级的产业集群，可以和数字化结合，实现数字化转型。</p>
<p>根据测算，仅仅在航空、电力、医疗、保健、铁路、油气这 个领域，如果引入数字化平台支持，假设只提高1%的效率，全球在未来的15年中可以预计节约近300亿美元 ；</p>
<p>平均每年产生约200亿美元的效益，如果数字化转型能拓展10%的产业价值空间，每年就可以多创造2000亿美元以上的价值。</p>
<p>所以，如果说中国的消费互联网市场目前能够容纳几家万亿级的企业，在产业互联网领域，今后有可能产生或者容纳几十家同等规模的创新企业 。</p>
<p>这是一个巨大的蓝海，今后的独角兽将主要产生于工业互联网的体系。</p>
<p><strong>新基建在全球实际上就是第4次工业革命</strong></p>
<p><strong>中国至少是引领者之一</strong></p>
<p>今年在疫情下，我们党中央3月份的时候提出了一个重要的战略措施，就是推动新基建的发展。</p>
<p>所谓新基建三大工程，第一个叫数字工程，就是5G、大数据、云计算、人工智能、区块链，就是5G加ABCD这5个要素。</p>
<p>数字平台产业化，数字经济产业化，这就是数字工程。这个数字经济产业化，中国在去年的总规模是6万多亿人民币，所以已经有一定规模，但是还不够大，今后加个0都是可能的，这是一个概念。</p>
<p>第二个工程就是产业经济数字化，也就是用数字化综合平台，对产业经济传统产业进行赋能。</p>
<p>我们国家去年工业产业总的销售值是100万亿人民币，这100万亿人民币有上百个各种各样的行业。</p>
<p>有的行业大，有的行业小，这些行业作为传统工业，一旦有数字经济赋能，就会产生颠覆性的资源优化配置的功能，增长1%~10%。这个时候如果用5%来算，100万亿的5%就5万亿，所以后边形成的价值是非常大的。</p>
<p>除了工业以外，还有商业零售，各种各样的服务业，消费类的、贸易类的等等，都有一个数字经济进行赋能的概念。</p>
<p>第三个工程，利用数字经济进行创新工程，推动生物医药和数字经济，以及各种智能制造、关键性的高科技技术、基础创新。</p>
<p>中央说的这三大工程，数字工程、融合工程、创新工程，形成了我们的新基建。</p>
<p>在我们中国叫新基建，在全球实际上就是第4次工业革命。</p>
<p>在第一次工业革命的时代，200多年前，人类进入了机械化蒸汽机时代。那个时候我们正在清朝的后期，整个社会是个封闭体系，所以在第一次工业革命的八九十年过程中，我们国家基本没有受益，也没有得到发展。</p>
<p>第二次工业革命是所谓电气化，也就内燃机、汽车发动机这一类的机械化时代，这个时代差不多也是八九十年，在100多年前，我们正处在清朝末年辛亥革命，国内进行了军阀混战。</p>
<p>再跟着是十几年的抗日战争和4年多的解放战争，所以整个清朝末年到1950年，差不多100年，我们都在打仗之中。</p>
<p>第二次工业革命中国基本上也没跟上，由此形成了中国积弱积贫，落后于世界的这种状态。</p>
<p>解放以后，1950年以后到1980年，我们国家30年的经济发展，尽管计划经济和相对封闭的经济运行状态，但是我们恶补了第一次工业革命和第二次工业革命的欠账。</p>
<p>第三次工业革命是一个信息高速公路、计算机的革命，这个阶段我们进入了改革开放时代，完全跟进了这一场工业革命，以至于现在中国工业成了世界第一大的工业体，同时也是工业门类最为齐全、全要素产业链的工业体系。</p>
<p>但是第三次工业革命我们是跟进者，不是引领者。</p>
<p>现在发生的第四次工业革命，是人类智能化的革命，这个智能化革命时代，以5G为基础的大数据、云计算、人工智能，包括区块链在内的数字革命，也包括生物工程等等。</p>
<p>所有这些，我们不仅是跟进者，我们中国也会是引领者，至少是引领者之一，跟美国、欧洲、日本等等国家一起引领第四次工业革命。</p>
<p>所以这将是人类百年未遇之大变局的一个机遇，人类将从第四次工业革命过程中化解过去几十年积累的欠账坏账，各种各样的要淘汰的东西，走出困境，走上一个新的发展道路。</p>
<p>在这个过程中，我们国家用新基建来引领、推动第四次工业革命，一定能抓住第四次工业革命的战略机遇，在百年未遇之大变局中发挥重大作用。</p>
<p>所以在这个意义上，新基建就是我们时代的风口，而今后二三十年，很多独角兽就将在这个新基建的范围内发生、发育、成长、壮大。</p>
<p>而新基建的核心体系，将不再是消费互联网，而是产业互联网，也就是5g引领下的产业互联网。</p>
<p>这是我要讲的第二部分，就是独角兽的发展要迎着风口去发展，最重要的当下就是新基建、数字化经济、产业互联网、生物医药、各种智能制造、新材料等等。</p>
<p><strong>打通创新链条是培育独角兽的关键</strong></p>
<p><strong>创新的第一个阶段：0到1。原始创新</strong></p>
<p>第三，打通创新链条是培育独角兽的关键所在，地方政府应有所为，有所不为。</p>
<p>创新链条主要有三个环节：</p>
<p>一是从无到有，无中生有的创新，实际上是原始创新，是0~1的环节；</p>
<p>二是从科学到技术的转化创新，是将基础原理转化为生产技术专利的创新，是 1~100的阶段；</p>
<p>三是从技术到产品规模化、产业化，甚至资本化，是100~100万的阶段，地方政府在这三个环节都可以大有作为。</p>
<p>第一个阶段是0~1的创新，就是原始创新、基础创新，无中生有的创新，创新需要专业人才，大专院校、科研院所的专家教授进行实验室里的探索。</p>
<p>在这方面，我们国家目前的短板在哪呢？我们研发创新的经费投入，现在世界规模第二，规模不小，但是投入比较分散，集中度不够。</p>
<p>我们国家去年的研发费占GDP的2.2% ， 100万亿的GDP 差不多是2.2万亿的研发费，这个研发费仅次于美国的总量，我们排第二，所以这个量投入不小，但是我们研发费集中度不高。</p>
<p>在世界各国，特别是发达国家，研发费的 20% 左右集中在基础性的、核心的、高科技的研发方面，也就是我们说的核高基。</p>
<p>核高基的意思就是核心的、高科技的、基本面基础性的创新 。比如我们芯片的创新就属于核高基，飞机发动机的创新当然也是核高基。</p>
<p>在这个意义上讲，我们国家去年核高基领域的研发费总投入，仅仅是我们全部研发费的5%，意思就是我们22，000亿的研发费，实际上只有1100亿投在核高基上。</p>
<p>大家这么想一下，核高基投入不足，也就形成我们的短板，我们在工业和各种发展当中，有一些高科技的技术不掌握，容易被别的国家一剑封喉，扼杀我们，遏制我们。</p>
<p>所以美国人这两年对我们芯片或者其他高科技产品的打压，就是利用他们在核高基领域、关键技术领域、高科技领域走在前面，我们比较落后，一旦没有了这些产品，我们许多产业链会断档。</p>
<p>在世界是平的、地球是圆的、什么东西都能买来的外向型经济的感觉下，这些创新好像无所谓，反正缺什么我买什么，而世界上总是互相分工能买来，出现了造船不如买船，买船不如租船，基本上就把创新这一环节给放松了。</p>
<p>这就是外循环体系下，容易考虑引进消化吸收，什么事情碰鼻子就转弯，攻不下来就去买，买买买就想把天下好东西都买来，但是高科技是买不来的，关键的技术是买不来的，靠要要不来的，必须自主创新。</p>
<p>所以我们国家五中全会提出，十四五期间到2035年期间，直到2050年更长远的期间，要走内循环为主、双循环互相补充、互相支持的新格局。</p>
<p>这个新格局内循环为主，自主自立自强的创新就是最重要的内循环，因为所有的创新，一切民族国家的创新都是内循环，外循环就是引进消化吸收。</p>
<p>在这个意义上讲，把创新这件事，特别是核高基的创新加大比重，今后的 5年或者10年把核高基的比重从现在的5%增加到10%、15%、20% 。</p>
<p>我们国家的体制集中力量办大事是应该做得到的，只要认识一到位，就能够把短板补上去，这是一个概念。</p>
<p>所以这将是我们十四五期间一个重要措施，建议有条件的地方集中优势资源出台政策，鼓励所在地区的高等院校、科研院所、大型科技公司、工业企业加大基础研究投入，在未来5年内将核高基领域的基础研究投入占研发费比重，从现在平均的5%提高到15%左右甚至更高，是我们战略的举措。</p>
<p><strong>独角兽是科创企业的主力军</strong></p>
<p><strong>私募基金、风险投资则是市场化选择独角兽的啄木鸟</strong></p>
<p>培育独角兽企业离不开资本市场的支持和配合。除了政府相应的产业引导基金外，应重点发展风险投资和私募股权等股权投资机构。</p>
<p>如果说资本市场是股权投资的战场，独角兽是科创企业的主力军，私募基金、风险投资基金就是市场化选择独角兽的啄木鸟，是金融服务科创经济的关键所在，是培育独角兽企业的催化剂、良师益友。</p>
<p>美国资本市场中各类风险基金和私募基金集聚的资本总量现在大体上有10万亿美元，我们现在注册的私募基金企业近5万个，集聚的资本也就是5万多亿。</p>
<p>这个概念是这样，私募基金几万个，到去年底整体上集聚的资金 13万亿左右，这个13万亿里边有2万亿在股市里边买卖股票，二级市场的投资，但有7万亿左右买债券、买货币基金，相当于存款，没干什么活，有5万亿是股权投资。</p>
<p>也就相当于我们在说的，不管你买的是独角兽的股权，还是各种各样，0<sub>1，100</sub>100万或者1~100各个阶段创新类企业的股权投资。</p>
<p>总之这一块我们现在是5万亿，规模小，杂而散，如何提高股权投资机构的质量和能力，是中国资本市场建设的重要任务。</p>
<p>国外的私募基金、公募基金一般来说50%会投在资本市场、股权市场，还有50%可能是债券市场或者各种各样的货币基金，我们现在的股权投资比重偏小了，所以没有发挥资本市场和一级市场中的股权的功能。</p>
<p>VC和PE等基金上市前是企业股权融资的重要资金来源，在上市过程中和上市后也是一级二级市场的重要资金渠道，是推动股权融资和资本市场发展的重要动力。</p>
<p><strong>很多发明人为什么没发财？</strong></p>
<p><strong>我们的转化不够</strong></p>
<p>另一方面，还要进一步健全高层次科技人才创新、创业的体制机制。</p>
<p>在这方面我们目前也有个短板，这就是为什么我们刚才说在 1~100 的科研成果产业化、孵化的转化过程中，我们效率相对低的原因。</p>
<p>我们每年有上百个国家级的创新发明，或者技术进步一等奖、二等奖、三等奖，国家有 31 个省，每个省也大体会有几十个到一百个（成果奖）。一年下来，我们全国省级以上的成果奖会有上千个，10年就会上万个。</p>
<p>而且我们又规定，凡是有成果，70% 的专利权都给了专家团队发明人。</p>
<p>那为什么10年下来，没看到太多的发明人变成了 500 万 5000万、5个亿、 50 亿的富翁？</p>
<p>他们为什么没发财？并不是政府不兑现，是因为你这个产品没有得到市场的承认，没有在市场中产生10亿、100亿的效益。</p>
<p>你如果有效益了，这效益的70%，利润的70%就是归你的，但你如果不产生效益，那70%、50%的专利权等于0。</p>
<p>在这个意义上，我们的转化不够，但转换不能够靠发明人去转化。</p>
<p>我们有许多地方搞孵化器，把得到了技术进步一等奖、二等奖的原始发明人、专家拉到孵化器里来搞发明，这是不对的，这是拿大炮打蚊子。</p>
<p>发明人智商很高，能钻牛角尖，能够攻占最复杂的高科技，但是转化的时候要情商，要有广泛的其他的知识，不一定就能做好转化。</p>
<p><strong>推动建设一批科学技术转移机构</strong></p>
<p><strong>提高转化效率</strong></p>
<p>所以在这方面我们缺少两个环节的东西。</p>
<p>第一个，党中央在今年 4 月份关于要素市场进一步市场化改革的决定当中，讲到了五大要素市场，就是劳动力、土地、资本市场、技术市场和数据市场。</p>
<p>讲到技术市场的时候，中央提出在中国要建设推动一批德国的弗劳恩霍夫研究所。</p>
<p>中央文件推荐要建某一种研究所，大家以前很少看到，到底什么是弗劳恩霍夫研究所呢？其实它就是一个科学技术转移机构。</p>
<p>这个研究所并不搞科研创新活动，他所有的工作人员就是科学技术的经纪人，研究所的功能主要特征就是我们中国人说的 婚姻介绍所”，做红娘的。</p>
<p>这个研究所往往把科研院所的知识产权专利，把专利内涵、专利的特性、专利有可能应用的场景把它弄清了、弄透了，然后用科普的方式介绍给社会上相关的，有兴趣的人。</p>
<p>有兴趣的人看到了这个产品可能我没兴趣，那个产品我可能有能力进行转化，他（研究所）就做了个红娘，把善于做转化的人和有技术专利的人进行结合，结合以后，从 1 到 100 转化。</p>
<p>转化成功，他就拥有 0~1 发明者 50% 的知识产权，最后的知识产权是50对50。</p>
<p>如果说发明人有70% ，那转化人就分享35%，形成这么个格局。</p>
<p>这个概念跟硅谷的拜杜法案基本一致， 拜杜法案在几十年前产生，当时这个法律规定，任何美国的科学技术发明1/3 归知识产权投资的，不管是政府投资，还是学校投资，还是科研院所投资，还是科学院投资，还是企业投资，投资者占1/3 。发明人占1/3，把发明转化为生产力的人，他也占1/3 ，这样三个的1/3 。</p>
<p>由于有了这个概念，硅谷可以说有了上百栋各种各样的别墅小楼，一个个里边都是搞转化的。这里边搞转化的，成千上万个各种各样的公司往往不是科学技术的发明人，发明人在斯坦福，在麻省理工学院，在美国几千个大学研究所。</p>
<p>发明以后，他们的菜单提供给了想搞转化的人，转化的人在学校里看着菜单，签个合同，背着书包进去，背着钱包出来，一谈成功，1/3 的知识产权归他。</p>
<p>有了物质刺激，财务的刺激，就有千百万转化的人去干这个活，他如果三年没干成，比如没转换，那他挂在他的墙上也没什么损失。白干三年他也拉倒，也没什么吃亏，在这个意义上，拜杜法案跟弗劳恩霍夫研究所起着相同的功能。</p>
<p>前不久，美国人搞过一次法律研究的评价的会，这100年里边对美国经济社会发展、技术发展最具贡献的法律，拜杜法案就是其中之一。</p>
<p>所以大家可以看到，实际上在独角兽培养过程中，也是要有非常重要的，对专家学者的物质刺激、激励的因素，这种激励不仅是原始创新发明人的激励，也表现为转化者的激励。</p>
<p>独角兽企业如果一半的股权归了转化者，这个转化者可能是技术专利变成生产力的转化者，也包括转化过程中进行企业运行的，市场模式创新的转化者等等。</p>
<p>总之，如果我们能够把这方面的技术，市场体制、机制都改革好，配套好；宏观上有好的国际化、法制化、市场化的营商环境；体制上能够对发明创造的技术转化和市场化、变成独角兽上市也有不同阶段的体制、机制的创新配套，那么我们中国的人才机制，独角兽的发展机制就能真正到位。</p>
<p>各位来宾，创新是企业经济发展的不竭动力，“十四五”时期要实现创新能力显著提升，需要有一批引领科技革命和产业变革的独角兽。</p>
<p>让我们拭目以待，迎接独角兽成群结队的奔腾而来，谢谢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[比特币起源发展史]]></title>
        <id>https://yeolar.github.io/post/bi-te-bi-qi-yuan-fa-zhan-shi/</id>
        <link href="https://yeolar.github.io/post/bi-te-bi-qi-yuan-fa-zhan-shi/">
        </link>
        <updated>2020-11-15T13:30:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-什么是比特币">1、什么是比特币</h1>
<p>比特币，英文名BitCoin，简称BTC，是一种由开源的P2P软件产生的电子货币，是一种网络虚拟货币。比特币不依靠特定货币机构发行，它通过特定算法的大量计算产生，比特币经济使用整个P2P网络中众多节点构成的分布式数据库来确认并记录所有的交易行为。P2P的去中心化特性与算法本身可以确保无法通过大量制造比特币来人为操控币值。</p>
<p>比特币（BTC）是基于密码学、依托于区块链技术的一种去中心化传输模式的加密货币。目前在加密货币市场中市值排名第一。</p>
<p>您可以访问比特币历史网站看看比特币的价格：http://history.btc126.com</p>
<h1 id="2-比特币的起源">2、比特币的起源</h1>
<p>2008年，美国金融危机爆发，引发了全球经济危机。这场风暴早期出现在美国次级房屋信贷市场，大批借贷者无法按时还款，逐步引起流动性危机。加上美国政府为了缓解危机大量发行美元救市，更加暴露出中心化模式的致命缺点：由于交易双方之间缺乏信任，往往需要中心化机构进行担保，但这并不能保证双方都会履约，或者中心机构一定能发挥正面作用。</p>
<p>2008年11月1日，中本聪（Satoshi Nakamoto）发布比特币白皮书，详细阐述了比特币的运行机制。比特币运用区块链技术建立了一个基于加密技术的去中心化支付系统，解决了交易信任问题。该系统通过使用工作量证明机制和点对点网络对公开的交易进行记录，交易双方在不需要第三方机构的情况下，也能正常进行比特币交易。</p>
<p>2009年1月3日，比特币区块链的创世区块被中本聪挖出，并产生了50个BTC的区块奖励，标志着比特币的正式问世。</p>
<p>2009年1月12日，Hal Finney从中本聪处获得10个BTC，由此产生了第一笔比特币转账交易。</p>
<h1 id="3-比特币的运行机制">3、比特币的运行机制</h1>
<p>每一笔比特币交易，都会被区块链网络中的节点记录下来，以此增强交易公信力，保护交易双方利益。但如果所有节点都参与记录的话，容易因为网络延迟等因素造成账本信息不一致，也难以避免记账人会篡改交易信息。</p>
<p>因此比特币采用工作量证明（Proof of Work）共识机制，让所有节点通过解决工作量证明难题的方式参与竞争，竞争成功的节点拥有新区块的记账权，并能够将记录的信息广播出去。其他节点接收后将根据此消息进行数据同步，确保账本一致。这种竞争记账权的过程，叫做挖矿，参与挖矿的节点，叫做矿工。矿工挖矿成功后可以获得区块奖励，即一定数额的比特币，还可以收取该区块上的交易手续费。在利益的驱使下，节点会积极参与挖矿并维护交易记录的真实有效。</p>
<p>比特币的发行只有一种方式，即区块奖励，也就是说比特币是通过挖矿产生的。不过，比特币并不能通过挖矿无限产生，其算法规定了每产生210,100 个区块（约四年），比特币的区块链奖励就要减半一次。由于比特币的发行总量恒定为2100万个，预计会在2140年挖完。这个规定确保了比特币不会由于人为增发而发生严重的通货膨胀，可以保护比特币的价值。</p>
<h1 id="4-比特币与区块链的渊源">4、比特币与区块链的渊源</h1>
<p>比特币的运行以区块链技术为依托，比特币与区块链有着密不可分的关系。比特币是一种资产，而区块链就是为这种资产设定好运行规则的底层技术，从而保证每一笔交易顺利进行。这就好比视频文件与播放器之间的关系，视频的播放必须要通过播放器的底层技术处理才能实现。区块链技术的诞生源于比特币概念的提出，可以说区块链技术是比特币催化下的产物。目前，区块链技术不止运用于比特币等加密货币，在各个领域都有广泛的应用，但比特币仍旧是区块链技术上最早、最成功的应用。</p>
<h1 id="5-比特币的三个特点">5、比特币的三个特点</h1>
<ol>
<li>去中心化</li>
</ol>
<p>传统的经济模式里，货币由政府机构发行，交易双方的个人基本信息和转账交易等信息都掌握在银行等第三方机构的数据库里，由这些机构集中管理。这些机构掌握的信息资料齐全，能对交易双方做出较为准确的信用评估，以及在出现纠纷后进行公正的仲裁。所以交易双方会在它们的介入和担保后，再进行交易。交易双方只可以查阅与自己相关的数据，这就是中心化的管理模式。</p>
<p>然而，在比特币的去中心化模式里，机构既没有发行比特币的权利，也无权记录和管理用户信息。比特币网络采用分布式记账的方式，保证每一笔交易都被公开记录，并同步到整个区块链中，人人可查。同时，由于比特币区块链采用了特殊的数据结构，以及使用工作量证明进行计算的共识算法，因此保证了区块内交易记录无法被篡改。这种运行模式公信力非常强，不需要第三方机构介入。</p>
<ol start="2">
<li>匿名性</li>
</ol>
<p>比特币采用密码学的方式对个人身份进行确认以及对资产进行加密保护。在比特币区块网络建立一个账户，不需要上传任何有关身份背景的证明资料，只要拥有私钥，就能真正掌控对应地址中的比特币。所有交易都是匿名进行的，其他用户在查询区块交易记录时，只能查询到某一地址向另一地址转账的比特币数量，无法将交易双方锁定为某个具体的人，因此不会泄露个人信息。同时，比特币不受时间和空间限制，可在全球范围内流通，它的流通性是传统货币无法比拟的。</p>
<ol start="3">
<li>自主性高</li>
</ol>
<p>用户的比特币由用户通过私钥进行控制，可以被隔离保存在任何存储介质内，且任何人都不能强制收取费用。用户保管好私钥不泄露代表了其拥有该资产的绝对主权。</p>
<p>总结：比特币的问世具有跨时代的意义。它的诞生颠覆了传统的交易模式，带来了被广泛运用的区块链技术。其他加密货币也在比特币的启发下应运而生，从而开辟了新的投资交易市场。</p>
<h1 id="6-一张图读懂比特币">6、一张图读懂比特币</h1>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1605447271615.png" alt="" loading="lazy"></figure>
<h1 id="7-比特币的由来">7、比特币的由来</h1>
<p>2008年，一位称为中本聪(Satoshi Nakamoto)的人发表了一篇新的论文，论文阐述了以密码学为基础的电子货币理论(也就是现在的比特币)。论文指出：世界各国的货币这么多，而每个国家的货币只是一个流通符号，一旦失去了国家的信用保障，它们就是一堆废纸。为什么不发明一套世界通用，而又无国别之分的货币系统呢？于是，论文详细讲述了如何利用密码学制造一种虚拟货币的方法。这就是比特币的理论。</p>
<p>在论文中提出的比特币货币系统，有一些这样的属性：</p>
<p>(1) 去中心化：没有发行人，整个网络由用户构成，采用P2P方式存储和运行<br>
(2) 全世界流通：世界上任意一台电脑，只要下载比特币客户端，就可以制造、出售、购买、收取比特币<br>
(3) 安全持有：操控比特币需要私钥，它可以被隔离保存在任何存储介质。除了用户自己之外无人可以获取。<br>
(4) 低交易费用：可以免费汇出比特币，但最终对每笔交易将收取约0.001比特币的交易费以确保交易更快执行。收取的交易费，会做为奖励，发给后续去制造比特币的用户。<br>
(5) 方便快捷的交易转账：只要你知道对方的账户地址，就可以转账，方便快捷<br>
(6) 防止通货膨胀：全世界一共只产生2100万个比特币，从发布之日起，每10分钟产生50个比特币，但产量每4年会减半，即发布4年后，每10分钟产生25个比特币，发布8年后，每10分钟产生12.5个比特币，这些新产生的比特币，属于制造比特币的人。</p>
<h1 id="8-比特币大事记">8、比特币大事记</h1>
<p>2009年，比特币系统正式发布，但由于知道的人很少，1比特币的价格仅几美分。</p>
<p>2013年4月，随着越来越多的人认可和发现比特币，比特币的价格4年来累计飙升了上万倍，1比特币的价格最高达到了266美元。</p>
<p>2013年11月，比特币价格飙升到1000美元。</p>
<p>2014年，随着央行对比特币的监管，比特币开始走下坡路，但是比特币的相关应用却不断发展壮大。</p>
<p>2015年，2016年，这是沉淀的2年，比特币默默无闻，甚至被遗忘。</p>
<p>2017年9月4日，因为ICO的搅局，中国人民银行等七部委发布的《关于防范代帀发行融资风险的公告》，要求国内交易所于10月底全部关门。</p>
<p>随后，各交易所转战海外，分别开设了国外交易平台，比特币等虚拟货币再次满血回归，价格也不断攀升，最高到12万元/枚。</p>
<p>2018年，比特币没有多大的起伏，N多的区块链媒体平台倒闭，价格始终在2万-2.5万之间徘徊。</p>
<p>2019年，新年开始，比特币开始骚动不安，今年会是比特币疯狂的一年么？</p>
<p>2019年4月1日，比特币价格突然暴涨，一度达到5000美元。</p>
<p>2019年6月20日，比特币价格再度突破1万美元。</p>
<p>2019年10月25日，中共中央政治局提出把区块链作为核心技术自主创新重要突破口，加快推动区块链技术和产业创新发展。</p>
<p>2020年，今年比特币将第三次减半，价格也随之上涨。</p>
<p>2020年2月9日，比特币价格再次突破1万美元。</p>
<p>2020年3月12日，比特币遭遇黑色星期四，从8000美元跌至4860美元。</p>
<p>2020年5月，比特币产量将减半，以历史来看大概率会上涨。</p>
<p>2020年5月12日3时23分 比特币第三次减半完成，产量由12.5个降至6.25个</p>
<p>2020年7月26日 比特币价格再次突破10000美元，牛市即将开启？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一张图读懂公司成长发展史]]></title>
        <id>https://yeolar.github.io/post/yi-zhang-tu-du-dong-gong-si-cheng-chang-fa-zhan-shi-airbnbinstagrampinterestangry-bird/</id>
        <link href="https://yeolar.github.io/post/yi-zhang-tu-du-dong-gong-si-cheng-chang-fa-zhan-shi-airbnbinstagrampinterestangry-bird/">
        </link>
        <updated>2020-11-14T11:47:42.000Z</updated>
        <summary type="html"><![CDATA[<p>AirBnB，Instagram，Pinterest，Angry bird 是怎么诞生的？这些创业者都是怎么成功的？让我们先来看一下这些公司的创业历程（图片来自网络）。</p>
<p>好像看起来，这些公司都经历过濒临死亡的边缘。所以，一帆风顺的时候不要沾沾自喜，坎坷崩溃的时候，也不要过度消极，说不定你就是下一个 AirBnB。</p>
]]></summary>
        <content type="html"><![CDATA[<p>AirBnB，Instagram，Pinterest，Angry bird 是怎么诞生的？这些创业者都是怎么成功的？让我们先来看一下这些公司的创业历程（图片来自网络）。</p>
<p>好像看起来，这些公司都经历过濒临死亡的边缘。所以，一帆风顺的时候不要沾沾自喜，坎坷崩溃的时候，也不要过度消极，说不定你就是下一个 AirBnB。</p>
<!-- more -->
<h1 id="三个年轻人如何从-3-张气垫床做到全球-100-万间房">三个年轻人如何从 3 张气垫床做到全球 100 万间房？</h1>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1605354894324.jpg" alt="" loading="lazy"></figure>
<p>Airbnb创业过程：旧金山的2个付不起房租的哥们，决定出租他们3个充气床，他们做了个简单的介绍网站，3个人来了每个人付了80美元，2哥们开始觉得这个巨棒的主意，找到前任室友当合伙人，产品上线来了2个订单，几个月后平均每周收入200美元，拿到60万元美金风投，拿到720万美金风投然后拿到1亿美金风投。</p>
<h1 id="pinterest是这么诞生的">Pinterest是这么诞生的？</h1>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1605354986491.jpg" alt="" loading="lazy"></figure>
<p>Pinterest创业过程：在GOOGLE里做EXCEL表格做到疯，下班之前做点闲杂项目，跟很多人聊创业想法，女朋友跟他说别叽叽歪歪直接做吧，决定从GOOGLE辞职，没有打计划，在考虑各种想法，找到了个联合创始人，做了个APP叫TOTE失败，找到第三个联合创始人，被几个风投拒绝，怕回GOOGLE丢人坚持干下去，做了50个不同版本，产品上线4个月后200个用户，给7000个不同用户亲自写EMAIL，自己母亲是Pinterest第一个忠实用户，现在2500万用户，全球世界流量排名35。</p>
<h1 id="愤怒的小鸟是这么诞生的">愤怒的小鸟是这么诞生的？</h1>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1605354994840.jpg" alt="" loading="lazy"></figure>
<p>愤怒的小鸟创业过程：三个哥们开了一个公司，一起开发了51个游戏，穷的差点破产，决定最后做一个就不做了，在一起想了10个不同想法，其中一个就是愤怒的小鸟。</p>
<h1 id="instagram是这么诞生的">Instagram是这么诞生的？</h1>
<figure data-type="image" tabindex="4"><img src="https://yeolar.github.io/post-images/1605355008121.jpg" alt="" loading="lazy"></figure>
<p>Instagram创业过程：工作下班之后自学编程，做了一个H5的原型叫Burbn，给几个朋友试用，见了几个投资人展示给他们看，决定辞职，拿到50万美元天使投资，找到一个合伙人，做了一个巨难用的版本，决定回到原先的Burbn，决定把除了照片之外的功能全部删除，改名叫Instagram。</p>
<figure data-type="image" tabindex="5"><img src="https://yeolar.github.io/post-images/1605355016536.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swiftype为什么从EC2切换到真正的服务器]]></title>
        <id>https://yeolar.github.io/post/swiftype-wei-shi-me-cong-ec2-qie-huan-dao-zhen-zheng-de-fu-wu-qi/</id>
        <link href="https://yeolar.github.io/post/swiftype-wei-shi-me-cong-ec2-qie-huan-dao-zhen-zheng-de-fu-wu-qi/">
        </link>
        <updated>2020-11-14T11:30:27.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://swiftype.com/">Swiftype</a> 是一家搜索解决方案提供商，目前已为超过 10 万个网站和应用程序提供搜索服务。 <a href="https://twitter.com/kovyrin">Oleksiy Kovyrin</a> 是其技术运营部门的负责人。近日，他发表了一篇<a href="http://highscalability.com/blog/2015/3/16/how-and-why-swiftype-moved-from-ec2-to-real-hardware.html">博文</a>，介绍Swiftype 为什么以及如何从EC2 切换到真正的服务器。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://swiftype.com/">Swiftype</a> 是一家搜索解决方案提供商，目前已为超过 10 万个网站和应用程序提供搜索服务。 <a href="https://twitter.com/kovyrin">Oleksiy Kovyrin</a> 是其技术运营部门的负责人。近日，他发表了一篇<a href="http://highscalability.com/blog/2015/3/16/how-and-why-swiftype-moved-from-ec2-to-real-hardware.html">博文</a>，介绍Swiftype 为什么以及如何从EC2 切换到真正的服务器。</p>
<!-- more -->
<p>2012 年，Swiftype 创建之初选择了 Amazon Web Services 作为基础设施，因为云容易增加服务器，而又不需要自己管理硬件，并且没有前期成本。遗憾地是，虽然有些服务（如 Route53 和 S3）非常有用且稳定，但 EC2 却常常给团队带来困扰。基础设施的可靠性和稳定性决定着他们能否满足客户的性能期望和不间断服务的需求。但在 Amazon 云上，他们经常会遇到网络问题、VM 实例宕机问题、不可预见的性能衰减（可能是由同他们共享硬件的其它应用程序导致的）。这些问题占用了他们大量的时间。因此，他们决定放弃 EC2，转而使用真正的硬件。基于以往与托管供应商打交道的经验，他们决定选择 SoftLayer。</p>
<p>在迁移之前，他们有大约 40 个 Amazon EC2 实例，每周会遇到 2 到 3 次严重的问题，有时候每天都遇到。于是，他们决定切换到真正的硬件，并且切换过程不能中断现有服务。为此，他们从以下两个方面做了充分的准备：</p>
<ul>
<li><strong>连接 EC2 和 SoftLayer</strong>——他们在 SoftLayer 上的数据中心里构建一个新的基础设施架构，即可以以开发级负载运行所有关键生产服务的最小服务器子集。然后，他们在新旧数据中心之间构建了一个 VPN 隧道系统，用于确保两个数据中心的组件之间可以实现透明的网络连接。</li>
<li><strong>修改应用程序架构</strong>——他们对应用程序进行了修改，确保它们可以在原有的云环境和新建的基础设施上并行运行。然后，他们构建了一个数据复制通道，用于确保云基础设施和 SoftLayer 部署能够保持同步。</li>
</ul>
<p>Amazon EC2 的 Virtual Private Cloud（VPC）功能提供了一种连接 EC2 服务器和另一个私有网络的方法。但是，对于 Swiftype 的现有实例而言，他们需要停机才能以这种方式实现连接。在经过慎重地考虑和计划之后，他们意识到，真正需要跨数据中心互连的只有 MongoDB 节点，其它的都可以使用数据中心的本地服务，如 Redis 集群、搜索服务器、应用程序集群等。这样一来，需要互连的实例数量就相对较少了。因此，他们采用了一种简单但经证明稳定且有效的方式：</p>
<ul>
<li>每个数据中心部署一个专用的 OpenVPN 服务器，用于实现所有客户端流量到其私有网络地址的转换；</li>
<li>每个需要连接到另一个数据中心的节点会建立一个 VPN 通道，并建立本地路由表，将所有指向另一个数据中心的连接正确地转发到那个隧道。</li>
</ul>
<p>接下来是修改应用程序架构，这项工作的前提是深入了解每个组件。Kovyrin 指出，对于任意复杂度的基础设施，其迁移都必须有足够的时间和工程师资源，要仔细考虑应用程序和后端服务之间建立的每一个网络连接。该过程主要包含如下步骤：</p>
<ul>
<li>所有无状态服务（缓存、应用程序集群、Web 层）均在两个数据中心单独部署。</li>
<li>对于每个有状态后端服务（数据库、搜索集群、异步队列等），他们必须考虑是否需要将数据复制到另一个数据中心，或者是否不得不承担数据中心互连造成的延迟。总之，VPN 是最后选项，尽量减少数据中心之间的流量和到无法复制的主服务副本的连接。</li>
<li>对于可以复制的服务，他们就复制，并确保应用程序服务器总是或优先使用服务的本地副本。</li>
<li>对于无法复制的服务（如搜索后端），他们修改应用程序，使用异步工作进程和队列实现数据复制。</li>
</ul>
<p>经过一个多月的努力后，一切准备就绪。他们通过将 DNS TTL 调至几秒开启切换。在 EC2 流量已经很少之后，他们停用了旧数据中心，并将剩余的连接转发到新数据中心。由于 DNS 更新需要时间，这个过程持续了至少一个周的时间。</p>
<p>从 EC2 切换到真正的硬件之后，发生了以下几个方面的变化：</p>
<ul>
<li>稳定性提升：严重故障次数由每周 2 到 3 次降到了每月 1 到 2 次；</li>
<li>性能提升：所有后端服务的性能都获得了提升，IO 密集型服务（如数据库和搜索集群）比 CPU 密集型服务提升更明显，更重要的是，性能有了更强的可预见性，不会突然出现与软件活动本身无关的降低或升高；</li>
<li>成本降低：月度成本至少降低了 50%；</li>
<li>配置灵活度提升，但配置时间增加了。</li>
</ul>
<p>最后，Kovyrin 总结道：</p>
<blockquote>
<p>如果你的目标从一开始就是业务构建，并且没有多余的工程师资源消耗在“云税（cloud tax）”上，那么，使用真正的硬件可能是更好的选择。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Algolia通往高可用搜索API的狂暴之路]]></title>
        <id>https://yeolar.github.io/post/algolia-tong-wang-gao-ke-yong-sou-suo-api-de-kuang-bao-zhi-lu/</id>
        <link href="https://yeolar.github.io/post/algolia-tong-wang-gao-ke-yong-sou-suo-api-de-kuang-bao-zhi-lu/">
        </link>
        <updated>2020-11-14T11:05:43.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://www.algolia.com/">Algolia</a> 是一家提供托管式搜索 API 的初创企业。作为一家年轻的企业，其<a href="http://highscalability.com/blog/2015/3/9/the-architecture-of-algolias-distributed-search-network.html">架构</a>令人印象深刻：</p>
<ul>
<li>其高端专用机器托管在世界上 13 个地区的 25 个数据中心里</li>
<li>其 master-master 配置至少会在三台不同的机器上复制他们的搜索引擎</li>
<li>每个月处理超过 60 亿次查询</li>
<li>每个月接收和处理超过 200 亿次写操作</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p><a href="http://www.algolia.com/">Algolia</a> 是一家提供托管式搜索 API 的初创企业。作为一家年轻的企业，其<a href="http://highscalability.com/blog/2015/3/9/the-architecture-of-algolias-distributed-search-network.html">架构</a>令人印象深刻：</p>
<ul>
<li>其高端专用机器托管在世界上 13 个地区的 25 个数据中心里</li>
<li>其 master-master 配置至少会在三台不同的机器上复制他们的搜索引擎</li>
<li>每个月处理超过 60 亿次查询</li>
<li>每个月接收和处理超过 200 亿次写操作</li>
</ul>
<!-- more -->
<p><a href="https://www.linkedin.com/in/julienlemoine">Julien Lemoine</a> 是 Algolia 的联合创始人兼首席技术官。他计划用一个系列的文章，介绍他们如何分 15 步构建出如此高可用的基础设施。近日，他发表了这个系列的<a href="http://highscalability.com/blog/2015/7/13/algolias-fury-road-to-a-worldwide-api.html">第一篇文章</a>，重点讨论了前三个步骤。</p>
<p>在开始介绍架构之前，Julien 比较了云和裸机。对于大多数情况而言，云基础设施都是一个不错的方案。它易于部署，而且本身提供了高可用性。而基于裸机的基础设施需要他们自己构建高可用性。但选择裸机基础设施，他们可以购买性能更好的硬件，而且与所获得的性能相比，价格也算相当便宜了。</p>
<p>接下来，Julien 按时间顺序介绍了 Algolia 架构演进的前三个阶段，时间跨度为 2013 年 3 月到 8 月。</p>
<h1 id="步骤12013-年-3-月">步骤1：2013 年 3 月</h1>
<p>这个阶段，他们的搜索服务 API 内测版本开始运行。基于对产品市场前景的自信，他们在两个不同的地点（加拿大东部和欧洲西部）分别部署了一台机器。每台机器根据地点为不同的用户提供服务。此时，他们百分百关注性能，时钟频率是他们决策时重点考虑的一个因素，因为就同一代 CPU 而言，时钟频率与搜索引擎的搜索查询速度有直接关系。索引由单独的进程完成，而且优先级较低；而所有的查询都直接在 nginx 内处理，并且优先级最高，即它可以占用更多的 CPU 时间，这样可以有效地处理流量峰值。让他们引以为豪的是，其中一个内部测试用户执意用 Algolia 的服务替换了其当时正在使用的解决方案。</p>
<h1 id="步骤22013-年-6-月">步骤2：2013 年 6 月</h1>
<p>经过三个月的开发和大量的测试，他们在 Beta 测试中引入了高可用性，其思想是：用集群取代了单机，集群由三台相同的机器组成，每台机器都完美地复制了所有数据，均可以作为 master。也就是说，每台机器都可以接受用户的写操作，每次写操作都会触发一个一致性保证机制。另外，基于前期的测试，他们发现：</p>
<ul>
<li>32G 的内存不够用，单是索引进程有时候就会用掉 10G</li>
<li>磁盘空间不够用，为了处理节点失败，机器需要将多个任务保存在磁盘上</li>
</ul>
<p>由于内存需求增加，他们将机器由 Xeon E3 系列换成了 Xeon E5 系列，因为前者只能处理 32G 内存。而考虑到时钟频率的重要性，他们决定采用 Xeon E5 1600 系列。至此，他们已经提供了高可用性。</p>
<p>与此同时，他们还测试了多种负载均衡和故障检测方法，发现所有的硬件负载均衡器均让他们几乎不可能使用多个提供商。于是，他们在 API 客户端中实现了一种基本的重试策略，即在开发的时候确保每个 API 都能够访问三台不同的机器。</p>
<h1 id="步骤32013-年-8-月">步骤3：2013 年 8 月</h1>
<p>他们将 API 客户端的数量增加到 10 种， 包括 JS、Ruby、Python、PHP、Objective-C、Java、C#、Node.js 等。而且，他们尽量避免自动生成代码，人工开发了 API 客户端。2013 年 8 月，他们在上述两个地点（加拿大东部和欧洲西部）正式推出了其搜索服务 API。每个地点一个集群，每个集群包含三台相同的主机。主机换成了 E5-2687W，内存加倍（128G），并且使用了更好的 SSD。这主要是因为他们观察到，内存不足以缓存所有的用户数据，而 SSD 成为索引速度的瓶颈。接下来，他们又重点实现了“可用区域（availability zone）”。关于这一点，Julien 并未提供细节信息。</p>
<p>在本系列的下一篇文章中，Julien 将介绍其 API 正式推出后前 18 个月的情况以及所有意料之外的问题，其中包括第一次停机。</p>
<hr>
<p>在本系列的上一篇文章中，Algolia 联合创始人兼首席技术官Julien Lemoine 介绍了他们构建高可用基础设施的前3 个步骤。近日，本系列的<a href="http://highscalability.com/blog/2015/7/20/algolias-fury-road-to-a-worldwide-api-steps-part-2.html">第二篇文章</a>发表，主要介绍自2013 年9 月API 正式推出至2014 年12 月18 个月间的情况以及所有意料之外的问题，其中包括第一次停机。</p>
<h1 id="步骤42014-年-1-月部署会危及高可用性">步骤4：2014 年 1 月——部署会危及高可用性</h1>
<p>在这个阶段，他们主要关注如何实现敏捷开发而又不以牺牲稳定性为代价。为此，他们开发了一个测试套件，其中包含6000 多个单元测试和200 多个非回归测试。但还是不够，即使一项新特性通过了所有的测试，仍然可能在生产环境中引入Bug，比如，曾有个Bug 导致了 <a href="https://blog.algolia.com/postmortem-todays-8min-indexing-downtime/">8 分钟的索引操作中断</a>。多亏他们在设计架构时实现了搜索查询与索引操作的分离，前者才没有受到影响。不过，这个问题让他们确定了其高可用设置中的一些问题：</p>
<ul>
<li>回滚要快，为此，他们实现了通过单行命令回滚；</li>
<li>部署脚本需要执行完整性检查，如果有错误，就自动回滚；</li>
<li>不能仅仅因为测试通过就部署到生产环境中的所有集群上，他们会按照顺序依次部署测试集群、社区集群（面向免费用户）、付费用户集群。</li>
</ul>
<p>现在，当有新特性需要测试时，他们会选择一个集群组用于测试，并按照下面的步骤部署：</p>
<ol>
<li>向所选集群组中所有集群的第一台机器部署；</li>
<li>监控 24 小时，然后向所选集群组中所有集群的第二台机器部署；</li>
<li>监控 24 小时，然后向所选集群组中所有集群的第三台机器部署；</li>
<li>几天后，向生产环境中的所有集群部署。</li>
</ol>
<p>通过这种方法，他们可以在几个小时内检测到几乎不可能通过单元测试发现的 Bug。</p>
<h1 id="步骤52014-年-3-月处理高负载的写操作">步骤5：2014 年 3 月——处理高负载的写操作</h1>
<p>他们开始解决一个新问题：延迟。他们位于亚洲的集群延迟过高。为了测试市场反应，他们决定将机器部署在 AWS 上。他们并不愿意这样做，因为即使使用 AWS 提供的最好的 CPU，搜索查询的性能仍然比使用 E5-2687W CPU 低大约 15%。不过，为了缩短测试推出时间，他们这样做了。但是，他们尽量确保不引入对 AWS 的依赖，以便后续可以迁移到其它提供商。</p>
<p>同时，欧洲的客户开始抱怨搜索查询延迟增加。他们很快就发现，那与索引操作大幅飙升有关。这初看起来有些不可思议，因为他们在设计时实现了索引操作和搜索查询的分离，但调查之后他们发现，确保集群间一致性的一致性算法在处理写操作时存在瓶颈。当瓶颈出现时，它会阻塞 HTTP 服务器线程，导致搜索查询等待。为了修复这一问题，他们在一致性操作之前实现了一个队列，由它接收写操作，然后将它们批量发送给一致性操作算法。这样，写操作就不会冻结 HTTP 服务器线程了。此后，他们再也没有遇到集群冻结的情况。</p>
<h1 id="步骤62014-年-4-月网络高可用几乎不可能在一个数据中心里实现">步骤6：2014 年 4 月——网络高可用几乎不可能在一个数据中心里实现</h1>
<p>2014 年 4 月初，他们开始收到用户的抱怨。这些用户来自美国东部，但使用加拿大东部的集群，而美国西部的用户则没有受到影响。原来是一场车祸导致了加拿大和美国东部之间的网络路由路径发生了变化，而新路径的带宽不够，不可避免地出现了数据丢失。他们早先没有考虑这种情况，因此，当这种情况出现时，他们只能联系用户并说明情况。</p>
<p>他们认识到，需要基于多提供商、多数据中心和多网络提供商改进高可用性，实现一种真正的分布式基础设施。</p>
<h1 id="步骤72014-年-7-月首次部署到两个数据中心">步骤7：2014 年 7 月——首次部署到两个数据中心</h1>
<p>他们从最大的客户开始将机器部署到不同的数据中心（相距超过 100 公里）。这两个数据中心为同一个提供商所有。同时，根据先前的经验，他们将硬件进行了升级。虽然 E5-2687W 的 CPU 使用率就未到过 100%，但他们还是升级到了使用下一代 CPU 的 Xeon E5-1650v2。结果，他们的服务性能提高了将近 15%。</p>
<h1 id="步骤82014-年-8-月在美国部署服务">步骤8：2014 年 8 月——在美国部署服务！</h1>
<p>2014 年 8 月，他们在美国东部（弗吉尼亚州）和美国西部（加利福尼亚）通过一个新的提供商推出了服务。根据先前的经验，他们使用了同一提供商（不同的网络设备和电源装置）提供的不同的可用区域，并借助更低的延迟和更高的带宽改进了搜索体验。</p>
<h1 id="步骤92014-年-10-月通过-chef-实现自动化">步骤9：2014 年 10 月——通过 Chef 实现自动化</h1>
<p>随着机器数量不断增加，他们将管理工具改成了 Chef。与使用 Shell 脚本相比，这会节省大量的时间。在配置数以百计的机器时，Chef 非常有用，但也有缺点。他们曾经因为 cookbook 的输入错误而导致部分生产环境的服务器宕机。为了防止这类问题再次出现，他们决定将生产环境使用的 cookbook 分成两个版本：</p>
<ul>
<li>第一个版本为稳定版本，部署到所有集群的第一台和第二台机器上；</li>
<li>第二个版本为生产版本，部署到所有集群的第三台机器上。</li>
</ul>
<p>当修改 cookbook 时，他们首先会将修改应用到生产版本。经过几天的测试后，他们才会将修改应用到稳定版本。</p>
<h1 id="步骤102014-年-12-月dns-是架构中的一个-spof">步骤10：2014 年 12 月——DNS 是架构中的一个 SPoF</h1>
<p>随着时间推移，越来越多的用户抱怨他们的服务时断时续，尤其是在亚洲。通过调查他们发现，使用.io TLD 是问题的原因所在。事实证明，同其它顶级域名（.net、.com 和.org）相比，.io TLD 选播网络中的可选地址更少，导致 DNS 服务器过载。用户有时候会在 DNS 解析时遭遇超时。于是，他们将.io TLD 换成了.net TLD，并换了一个允许他们在 <a href="http://algolia.io/">algolia.io</a> 和 <a href="http://algolia.net/">algolia.net</a> 之间同步的 DNS 提供商，这使他们很容易保持向后兼容。迁移完成后，他们进行了广泛的测试，<a href="https://blog.algolia.com/black-thursday-dns-issueolia.io/">发现了几个对部分客户有影响的问题</a>。DNS 比他们想象的复杂，他们的测试并不全面。</p>
<p>这个问题让他们认识到，唯一的DNS 提供商是一个SPoF（单点故障点），而他们的迁移行为实际上是非常危险的。因此，他们开始着手制定计划，消除架构中的SPoF。</p>
<p>至此，Julien 已经介绍了他们构建高可用基础设施的前10 个步骤（总共15 个）。接下来，他将重点讨论他们引以为豪的DNS 以及如何提升高可用性。</p>
<hr>
<p>在本系列的第一和第二篇文章中，Algolia 联合创始人兼首席技术官Julien Lemoine 分别介绍了他们构建高可用基础设施的前3 个步骤和自2013 年9 月API 正式推出至2014 年12 月18 个月间的情况以及所有意料之外的问题（其中包括第一次停机）。近日，本系列的<a href="http://highscalability.com/blog/2015/7/27/algolias-fury-road-to-a-worldwide-api-part-3.html">第三篇文章</a>发表，主要介绍他们如何从一个“初创企业”的架构转变成一个可以满足大型上市公司需求的架构。</p>
<h1 id="步骤112015-年2-月全球同步的基础设施">步骤11：2015 年2 月——全球同步的基础设施</h1>
<p>这个月，他们实现了自2014 年4 月开始就一直为之努力的目标，“将服务扩展到全球，更好地服务于用户”。他们的网络包含12 个不同的地点：美国东部（弗吉尼亚）、美国西部（加利福尼亚）、澳大利亚、巴西、加拿大、法国、德国、香港、印度、日本、俄罗斯和新加坡。最重要的是，他们推出了“分布式搜索”特性。借助这个特性，用户只需几次点击就可以在他们的网络中选定需要自动复制数据的地点。用户使用的API 保持不变，而查询请求会自动路由到最近的地点。这不仅降低了延迟，还提高了搜索基础设施的可用性。</p>
<p>据Julien 介绍，他们的“分布式搜索网络（Distributed Search Network，DSN）”与CDN（内容分发网络）完全不同。他们不是在每个边缘地点缓存常用查询，而是存储一个包含所有数据的完整副本。边缘地点本身都可以响应任何查询。就是说，如果用户选择了三个接入点（美国东部、德国、新加坡），那么位于德国的接入点会响应欧洲用户的查询，位于新加坡的接入点会响应亚洲用户的查询，而位于美国东部的接入点则会响应美国用户的查询。</p>
<p>为了支持这种变化，他们修改了API 客户端的重试逻辑。客户端会首先指向主机名 <a href="http://appid-dsn.algolia.net/t-3.html">APPID-dsn.algolia.net</a> ，后者会使用 DNS 将客户端请求路由到最近的地点。如果最近的主机不可用，那么为了能够返回下一个最近的地点，DNS 记录会在 1 分钟内删除那台主机。这就是他们将每条记录的 TTL 设为 1 分钟的原因。如果遇到这种故障，那么他们的官方 API 客户端会通过在 <a href="http://appid-1.algolia.net/">APPID-1.algolia.net</a> 、 <a href="http://appid-2.algolia.net/">APPID-2.algolia.net</a> 和 <a href="http://appid-3.algolia.net/">APPID-3.algolia.net</a> 上重试将流量重定向到“主区域（main region）”。他们认为，这种方法可以实现高性能与高可用性的最佳平衡。</p>
<h1 id="步骤122015-年-3-月提高单个地点的高可用性">步骤12：2015 年 3 月——提高单个地点的高可用性</h1>
<p>对于搜索和国际用户而言，分布式搜索网络极大的提高了可用性。而为了提高主区域的可用性，他们将美国的集群分布在两个完全独立的提供商那里：</p>
<ul>
<li>两个位置相近的、不同的数据中心；</li>
<li>三台不同的机器——同以前一样，两台位于一个数据中心的不同的可用区域中，一台位于另一个数据中心；</li>
<li>两个不同的自治系统。</li>
</ul>
<p>这样，他们可以选择将流量路由到另一个提供商。他们在提高单个地点的可用性方面迈进了很大一步。</p>
<h1 id="步骤132015-年-4-月随机出现的文件损坏问题">步骤13：2015 年 4 月——随机出现的文件损坏问题</h1>
<p>这个月，他们开始注意到生产环境中随机出现的文件损坏问题，这是由部分 SSD 的 TRIM 实现中存在 Bug 导致的（具体原因参见<a href="https://blog.algolia.com/when-solid-state-drives-are-not-that-solid/">这里</a>）。这是个棘手的问题，他们花了一个月的时间来跟踪和定位。所幸，他们没有丢失任何客户数据，这主要得益于以下两个方面：</p>
<ul>
<li>他们存储了数据的三个副本；</li>
<li>更重要的是，他们没有复制索引操作的结果，而是在每台机器上重复了用户的操作。这有效避免了问题向其它机器传播。</li>
</ul>
<p>他们没有预见到这种问题，但使用独立的机器是他们能够将问题影响最小化的原因。因此，Julien 强烈建议，任何需要高可用性的系统都要采用这种独立性。</p>
<h1 id="步骤142015-年-5-月引入多个-dns-提供商">步骤14：2015 年 5 月——引入多个 DNS 提供商</h1>
<p>他们选择 <a href="https://nsone.net/">NSONE</a> 作为一个 DNS 提供商，因为该提供商提供了很棒的 DNS API，允许他们通过 API 针对每个用户配置查询的路由方式，并且支持 <a href="http://noops.me/?p=653">edns-client-subnets</a> ，可以提供更准确的地理位置路由。</p>
<p>这里的挑战在于，他们需要引入第二家 DNS 提供商，而又不损失 NSONE 提供的强大功能。他们决定通过修改 API 客户端重试策略的方式引入。所有的 API 客户端都会首先连接 <a href="http://appid-dsn.algolia.net/">APPID-dsn.algolia.net</a> ，如果有问题，它们会在另一个提供商提供的顶级域名上重试。他们选择将 AWS Route 53 作为第二家提供商。如果有任何问题，API 客户端将从 <a href="http://appid-1.algolianet.com/">APPID-1.algolianet.com</a> 、 <a href="http://appid-2.algolianet.com/">APPID-2.algolianet.com</a> 和 <a href="http://appid-3.algolianet.com/">APPID-3.algolianet.com</a> 中随机选择一个重试。这样，他们就在 algolia.net 域上保留了 NSONE 所有的地理位置路由特性，同时引入了第二个提供商在 algolianet.com 域上提供了更高的可用性。</p>
<h1 id="步骤152015-年-7-月每个集群跨三个完全独立的提供商">步骤15：2015 年 7 月——每个集群跨三个完全独立的提供商</h1>
<p>虽然经过了一系列的扩展，但他们的基础设施并不能完全应对所有问题，这主要是因为 Link/Router 丢失数据包和路由泄露。在上个步骤中，他们改进了在美国的部署，构建了跨多个数据中心、多个自治系统和多个上游提供商的集群。不过，索引操作需要三台机器中的两台运行正常方可进行。当使用两个提供商时，如果其中一个宕掉，他们就会无法提供索引服务，但搜索服务仍然可用。正是因为这个原因，他们决定实现跨三个完全独立的提供商的集群。这让他们的基础设施超级冗余，但却同时提供了高可用的搜索和索引服务。</p>
<p>总之，构建高可用的架构是需要时间的。所以，作为初创企业，不用在开始的时候就担心基础设施不够完美。但是，应该尽早考虑如何扩展基础设施，Julien 甚至建议在 Beta 测试之前就开始。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这家伙单打独斗创建了一个网站，然后卖了1亿美元]]></title>
        <id>https://yeolar.github.io/post/zhe-jia-huo-dan-da-du-dou-chuang-jian-liao-yi-ge-wang-zhan-ran-hou-mai-liao-1-yi-mei-yuan/</id>
        <link href="https://yeolar.github.io/post/zhe-jia-huo-dan-da-du-dou-chuang-jian-liao-yi-ge-wang-zhan-ran-hou-mai-liao-1-yi-mei-yuan/">
        </link>
        <updated>2020-11-03T14:37:46.000Z</updated>
        <summary type="html"><![CDATA[<p>外国网站ViralNova创业者是如何做到光靠一人之力，让网站价值1亿美元的？在个人的创业过程中也遭遇挫折。创始人DeLong最终选择出售网站，并非是网站运营不善，那又是什么原因呢？下文着重介绍DeLong的创业历程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>外国网站ViralNova创业者是如何做到光靠一人之力，让网站价值1亿美元的？在个人的创业过程中也遭遇挫折。创始人DeLong最终选择出售网站，并非是网站运营不善，那又是什么原因呢？下文着重介绍DeLong的创业历程。</p>
<!-- more -->
<p>数字媒体公司Zealot Networks 收购了ViralNova，总估值高达1亿美元。ViralNova是一个类似于 Buzzfeed类型的媒体，其创立者是 Scott DeLong。当然，DeLong创建ViralNova网站背后也有一个有趣的故事。</p>
<p>在很长的一段时间里，ViralNova整个网站的创建运营完全由DeLong和两个自由投稿者完成。在他们的努力下，ViralNova发展到了Buzzfeed一样的规模，据估计每月有一亿的读者，而这是在网站没有任何人投资，也没雇佣任何员工下做到的。</p>
<p>ViralNova网站创立于2013年，在网站的每个页面都投放了谷歌的广告。在8个月内，这样简单的运营方式年收入达到百万美元。ViralNova采用故事化的标题来吸引人的注意，发到社交网上后经常让用户疯转。</p>
<p>文章标题类似于：</p>
<p>“It Might Look Like A Normal Chandelier. But When You Stand Underneath It And Look Up.。.Wow.</p>
<p>This Guy‘s Crazy Idea Started To Make His Wife Nervous. But It Was Worth It， Trust Me.”</p>
<p>ViralNova的发展主要是依赖Facebook，比如， EliteDaily、Upworthy、Distractify等几乎都是在同一时间推出，它们发布的文章在Facebook上广泛传播，网站每个月就会增加数千万的读者。</p>
<p>在过去的一年里，Facebook改变了NewsFeed算法让用户看到更少无关的内容，从而打压那些病毒式网站的推广。很多ViralNova的竞争者因此被扼杀，当然DeLong业务也损失惨重。2014年，他用类似的方法在推特上运行网站。</p>
<p>不过，ViralNova最终的结果可能是最成功的。最近，DailyMail 以5000万美元收购了EliteDaily，Mic也筹集数千万资金，主要由Twitter提供。而Upworthy和Distractify也慢慢落寞了。</p>
<p>ViralNova并不是一直像个领跑者。DeLong也有挫败想要认输的时候。</p>
<p>来自俄亥俄州32岁的DeLong以前就建过不少网站，并售卖掉，看似很有经验，但他却不是一个成熟的CEO。在他20岁的时候做了一个网站，每个月利用谷歌广告获得了500美元的收入，网站建立不久后，他就大学毕业了。</p>
<p>“每当睁开眼睛，我觉得如果我每个月能挣500美元，那么我也可以挣5000美元”DeLong回忆道，他认为在互联网领域是没有止境的。</p>
<p>DeLong建立的下一个网站GodVine做得更为成功，这个网站利用Facebook庞大的女性群体，提供容易让人共鸣振奋的故事内容，成为Alexa排名前1500的网站，后来DeLong把网站卖给了Salem Communications。</p>
<p>ViralNova注定要成为一个更大的版本GodVine，ViralNova发布着病毒式的内容。DeLong在巴塞罗那工作期间倍感无聊，于是创建了ViralNova。后来他搬回俄亥俄州，对于网站的创建速度颇为惊讶。</p>
<p>但是在ViralNova上线后的八个月，2014年1月DeLong发现一个人运营这样的一个网站压力太大。他的网站好似一个空落落的Wordpress，ViralNova有太高的流量，DeLong想要在在网站新增任何一点小内容都会影响流量。尽管DeLong收入净值达到数百万美元，但背后工作力度也很大。每天平均工作16个小时，就连周末也不能休息。于是他很快的精疲力竭，雇佣了代理经纪人寻找网站收购者。</p>
<p>令人意外的是ViralNova的买家并不多，但是想要投资的人却不少。有硅谷的风险投资家提出投资数百万美元，让ViralNova成为实质上的企业，不过DeLong拒绝了。</p>
<p>“我并不想担起招聘的责任，也不想开办公室。我喜欢做自己喜欢的事情，很讨厌压力。”DeLong对BI表示。</p>
<p>纽约企业家 Sean Beckner也试图说服DeLong坚持做下去。Beckner在2014年1月份就了解到DeLong想要出售ViralNova的意愿，并发送邮件给DeLong表示可以收购ViralNova的一部分。根据协议，DeLong可以获得报酬并获得自己想要的工作方式，同时进一步扩展网站业务。经过两个月的协商，两人达成共识。</p>
<p>后来Beckner成为ViralNova的CEO和CFO，而Jeff Geurts则任职副总裁，Shaun Tilford任职CTO。</p>
<p>Tilford构建了定制的CMS，并将团队称为Nova，加入社交数据分析工具，该功能能同时测试两个不同的标题哪个效果会更好。此前与DeLong的一同工作的自由作家Sara Heddleston成为了网站主编，同时聘请了12个作家。此外还聘请了专业的销售团队，ViralNova 每月网站页面浏览量破亿。</p>
<p>现在，ViralNova有22个全职员工，今年有望带来3500万美元收入。公司有可能搬到Zealot Media的加州总部威尼斯。尽管DeLong已承诺会继续在ViralNova工作，不过Zealot Networks很大方，给他的待遇超过他的需求。</p>
<p>当被问及现在是否还要每天连续工作16个小时与否，DeLong回答说：“目前的工作方式好很多，我也有自己的私人生活”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个人，一个网站，5.75亿美元卖掉]]></title>
        <id>https://yeolar.github.io/post/yi-ge-ren-yi-ge-wang-zhan-575-yi-mei-yuan-mai-diao/</id>
        <link href="https://yeolar.github.io/post/yi-ge-ren-yi-ge-wang-zhan-575-yi-mei-yuan-mai-diao/">
        </link>
        <updated>2020-11-03T14:19:54.000Z</updated>
        <summary type="html"><![CDATA[<p>一个人，24岁时写了一个网站， 每天只工作2小时，他还嫌工作量太大。他每天从谷歌广告赚好几万美元，不用合伙人，从来也不融资，一个人掌握100%股权， 36岁时5.75亿美元卖掉公司。</p>
<p>2015年7月14日，婚恋网站Plenty of Fish以5.75亿美元的价格被Match Group收购，他的创始人Markus Frind现年才36岁。网站长期由Markus自己一个人从2003年开始经营，就靠放谷歌广告赚钱。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个人，24岁时写了一个网站， 每天只工作2小时，他还嫌工作量太大。他每天从谷歌广告赚好几万美元，不用合伙人，从来也不融资，一个人掌握100%股权， 36岁时5.75亿美元卖掉公司。</p>
<p>2015年7月14日，婚恋网站Plenty of Fish以5.75亿美元的价格被Match Group收购，他的创始人Markus Frind现年才36岁。网站长期由Markus自己一个人从2003年开始经营，就靠放谷歌广告赚钱。</p>
<!-- more -->
<p>因为网站太赚钱，又没有什么员工，所以Markus完全不需要合伙人，不需要融资，公司的股权100%属于他一个人。卖掉公司时，没有任何人来分这5.75亿美元，5.75亿美元全部属于他一个人！</p>
<p>这简直就是屌丝一个人创业的楷模。</p>
<p>2008年的时候，Markus告诉《纽约时报》，他的网站一年的净利润是1000万美元。他每周工作10小时，每天只干2小时。但是，他居然跟记者说：这个工作量太大了！</p>
<p>Markus对Business Insider说，当他知道什么是风险投资这种东西的时候，他每年已经有几百万美元的净利润了。所以，他实在不知道该怎么跟风险投资人说，实在不知道该怎么融资。</p>
<p>Markus今年卖掉Plenty of Fish的时候， 网站已经有9000万注册用户了。360万活跃用户。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604413295821.jpg" alt="" loading="lazy"></figure>
<p>Markus说他2003年刚开始想做Plenty of Fish，是因为刚刚学会了一门新出来的计算机语言ASP。为了练练手，以后找工作的时候能证明自己懂ASP，就随手做了Plenty of Fish。结果居然有很多人来网站注册，慢慢就火起来了。等到网站每个月能赚4000美元，差不多能养活他自己的时候，他就辞了工作，靠网站的广告费为生。</p>
<p>Markus觉得他创办和维护Plenty of Fish期间，从来没有出现过任何真正困难。Plenty of Fish上线只建立了几个月的时候， 一天只有几百个访客，但是流量增加很匀速、成长很稳定。所以他可以很明确的预到，接下来的四五个月会有多少访客。然后他就有足够的时间，一个人慢慢提高服务器的性能、改善数据库的结构。Markus对记者说，他最骄傲的事情是： “就靠我一个人，每个月能生成10亿个网页页面”。</p>
<p>Markus每天只工作2个小时。INC采访他的时候，问他每天什么时候他觉得最有意思。他说，早上，因为只有早上2-3个小时我在工作。当被问到，你觉得工作时最有意思的事情是什么时，他的回答是：“去银行，把谷歌广告给我开的面额100万的支票存到进去。”</p>
<p>说到谷歌给Markus开的广告费，不得不把Markus的广告收入明细列出来。就是下图：</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604413351211.jpg" alt="" loading="lazy"></figure>
<p>2003年6月，只有493个浏览量，广告收入7.6加拿大元（差不多跟美元等值）；2013年7月，就有了18万多的浏览量，广告收入1千7百多了。慢慢每月稳步递增，道理2004年2月，广告收入已经到了1万2千多了。2004年6月的收入，突破了5万块钱。2005年4月， 月收入突破10万元。</p>
<p>2006年6月，他贴出了一张谷歌广告给他寄来的90万元的支票，相对于每天赚3万块。这个时候，这个网站仍旧还是只有他一个人。而他的竞争对手，一般都至少有600台服务器，至少300名以上的员工。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1604413368892.jpg" alt="" loading="lazy"></figure>
<p>在实现了每个月自己一个人都能赚到百万美元的目标之后，又过了一年，到了2007年Markus才有了第一个员工人。到现在， Plenty of Fish每个月已经有了 3.7亿的独立IP和25亿的浏览量，员工仍然只有65个人。</p>
<p>一个人，默默创业（甚至都谈不上创业，只是业余做了个“小”网站）；一个人，默默改善自己的网站；一个人，默默赚钱（直到数钱数到手抽筋）。</p>
<p>这才是创业，才是真正的脚踏实地，才是真正的生意。</p>
<p>Markus是每个白手起家者的楷模。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MongoDB简史]]></title>
        <id>https://yeolar.github.io/post/mongodb-jian-shi/</id>
        <link href="https://yeolar.github.io/post/mongodb-jian-shi/">
        </link>
        <updated>2020-11-03T13:19:28.000Z</updated>
        <summary type="html"><![CDATA[<p>说到现代 Web 应用程序开发，不得不提到 MongoDB。如果你是一名全栈程序员，每天都会跟 MERN 打交道，其中 M 指的就是 MongoDB。MongoDB 开源社区版为大量的 Web 应用程序提供支持。从 2007 年开始，MongoDB 走过了漫长的道路。它是 MongoDB 公司的主要产品，这家公司市值已经超过 100 亿美元。与很多产品一样，在线广告是推动 MongoDB 愿景和发展的关键催化剂。MongoDB 的故事很有趣，在本文中，我将带你一起探索 MongoDB 的发展之旅。</p>
]]></summary>
        <content type="html"><![CDATA[<p>说到现代 Web 应用程序开发，不得不提到 MongoDB。如果你是一名全栈程序员，每天都会跟 MERN 打交道，其中 M 指的就是 MongoDB。MongoDB 开源社区版为大量的 Web 应用程序提供支持。从 2007 年开始，MongoDB 走过了漫长的道路。它是 MongoDB 公司的主要产品，这家公司市值已经超过 100 亿美元。与很多产品一样，在线广告是推动 MongoDB 愿景和发展的关键催化剂。MongoDB 的故事很有趣，在本文中，我将带你一起探索 MongoDB 的发展之旅。</p>
<!-- more -->
<h1 id="开端大型数据库想法的萌芽">开端：大型数据库想法的萌芽</h1>
<p>MongoDB 的故事开始于 2007 年。1995 年，Dwight Merriman 和 Kevin O’Connor 创办了著名的在线广告公司 DoubleClick。不久后，Kevin Ryan 也加入了这个团队 (Dwight 和 Kevin 后来共同创办了 5 家公司——Gilt、10gen、Panther Express、ShopWiki 和 Business Insider)。DoubleClick 很快就大获成功，几年之内，它的广告流量达到了每秒 40 万条。当时的关系型数据库技术还没有预料到会有如此大规模的流量。配备如此规模的关系数据库需要大量的资金和硬件资源。因此，Dwight(他是当时的 CTO) 和他的团队开发了自定义数据库实现来扩展 DoubleClick，以应对流量的激增。</p>
<figure data-type="image" tabindex="1"><img src="https://yeolar.github.io/post-images/1604409691495.png" alt="" loading="lazy"></figure>
<p>2003 年，Eliot Horowitz 在大学毕业之后加入 DoubleClick 的研发部门，成为一名软件工程师。两年后，他离开了 DoubleClick，和 Dwight 一起创办了 ShopWiki。他们都意识到，他们在一次又一次地解决同样的水平伸缩性问题。因此，2007 年，Dwight、Eliot 和 Kevin Ryan 一起创办了一家叫作 10gen 的新公司。10gen 专注于提供一个带有自有应用程序和数据库栈的 PaaS 托管解决方案。10gen 很快引起了风险投资人 Albert Wenger(Union Square Ventures) 的注意，他向 10gen 投资了 150 万美元。以下是 Albert Wenger 在 2008 年写的有关 10gen 投资的文字：</p>
<blockquote>
<p>今天，我们很高兴地宣布，我们将为一支特立独行的团队提供支持，也就是 10gen 的一班天才们。他们汇聚了构建互联网规模系统的经验，比如 DART、Panther Express CDN，广泛参与了开源活动，包括 Apache 软件基金会。他们正在为云计算构建一个开源技术栈，包括一个应用服务器和一个数据库，它们都是基于现代硬件能力和构建 Web 站点或服务的经验从头开始开发的。应用服务器最初支持服务器端 JavaScript 和 Ruby(实验性的)。数据库采用了一种有趣的设计来存储对象，这种设计在快速随机访问和高效的集合扫描之间做出了平衡。</p>
</blockquote>
<p>Albert 所说的“采用了有趣的设计的数据库”实际上指的就是 MongoDB。从 2007 年到 2009 年，这个新数据库迅速发展。Dwight 第一次提交的 MongoDB 代码可以在<a href="https://github.com/mongodb/mongo/commit/e73188b5512c82290a4070af4afddac20d0b981e">这里看到</a>。</p>
<p>MongoDB 的核心引擎是用 C++ 开发的。之所以把这个数据库叫作 MongoDB，是因为他们想用它来为一些典型的应用场景 (如内容服务) 提供海量数据的存储服务。最初，这个团队只有 4 名工程师 (包括 Dwight 和 Eliot)，并只专注于 MongoDB 数据库。他们的商业理念是通过开源免费下载的方式来发布数据库，并在这个基础上提供商业支持和培训服务。</p>
<p>MongoDB 1.0 于 2009 年 2 月发布。最初的版本提供了一种具有文档模型、索引和基本复制功能的查询语言，还提供了实验版的分片功能，但生产版本的分片集群功能在一年后发布的 1.6 版本中才有。</p>
<p>以下是 Dwight 对于“Mongo 是否适用于高度可伸缩系统”的问题的回答：</p>
<blockquote>
<p>在水平伸缩方面，可以使用自动分片功能来构建大型的 MongoDB 集群。现在是 alpha 版，但如果你的项目才刚刚启动，那么当你需要它的时候，它可能已经生产就绪了。</p>
</blockquote>
<h1 id="mongodb-早期的设计哲学">MongoDB 早期的设计哲学</h1>
<p>在早期，MongoDB 的基本设计原则如下：</p>
<ul>
<li>快速和简单的数据模型，实现更快的编程——支持 CRUD 的文档模型。</li>
<li>使用熟悉的编程语言和格式——JavaScript/JSON。</li>
<li>无模式文档——方便敏捷迭代开发。</li>
<li>为了快速开发和更易于伸缩，只提供必要的功能，没有连接和跨集合的事务。</li>
<li>支持简单的水平伸缩和持久性 / 可用性 (复制 / 分片)。</li>
</ul>
<p>在 2011 年的一次“NoSQL 以及为什么我们要开发 MongoDB”的 <a href="https://youtu.be/hOOQJpGu1kY?t=2408">ZendCon 演讲</a>中，Dwight 详细介绍了这些原则。大约在 42 分钟的时候，还出现了一个有关复制和分片之间区别的讨论。随着代码的成熟和 MongoDB 成为主流，这些原则当中有很多都被明显淡化了。最新的 MongoDB（从 4.2 开始）可以在一定程度上支持连接，甚至是支持分布式事务！</p>
<h1 id="什么是-mongodb">什么是 MongoDB？</h1>
<p>在详细讲述 MongoDB 的历史和发展历程之前，我们先简单地了解一下 MongoDB！</p>
<p>MongoDB 是一个基于文档的 NoSQL 数据库。它可以在所有主流平台上运行 (Windows、Linux、Mac)，并且可以免费下载它的开源版本。MongoDB 将数据实体存储在集合中，存储的每一个数据块都是 JSON 格式。例如，如果一个用户提交了一个在线订单，该订单的全部细节 (订单号、订单项、收获地址等) 将保存在一个 JSON 文档中，然后将其保存到“customer_order”集合中。</p>
<p>MongoDB 还附带了一个控制台客户端，这是一个功能齐全的 JavaScript 环境，你可以用它添加、删除、编辑或查询数据库中的文档数据。</p>
<h1 id="mongodb-架构">MongoDB 架构</h1>
<p>下面是 MongoDB 服务器主要组件的架构视图。</p>
<figure data-type="image" tabindex="2"><img src="https://yeolar.github.io/post-images/1604410079716.png" alt="" loading="lazy"></figure>
<p>MongoDB 目前为 13 种编程语言提供了驱动程序，包括 Java、Node.JS、Python、PHP 和 Swift。存储引擎 MMAPv1 从 4.2 版本开始就被移除了。加密存储引擎只在商业版中提供。</p>
<p>MongoDB 的美妙之处在于它的开源免费社区版为你提供了这些能力：</p>
<ul>
<li>一个简单的单机实例就可以满足大多数小型应用程序的需求。</li>
<li>一个多机实例可以为大多数商业应用程序提供持久性 / 高可用性。</li>
<li>一个具有水平伸缩能力的大型集群 (分片集群) 可以处理非常大的数据集和大量的查询。MongoDB 提供了自动化基础设施，用于实现分布式的数据分布和处理。</li>
</ul>
<p>下面的这些图表演示了各种运行 MongoDB 实例的方式。</p>
<h1 id="单服务器-容错设置">单服务器 / 容错设置</h1>
<p>对于小型应用程序，单台服务器就足以满足频繁的数据备份需求了。如果需要容错，可以使用副本集。在容错配置中，通常有 3 个或更多的 MongoDB 实例。这些实例当中只有一个作为主实例，如果它发生故障，其他两个辅助实例中的一个将成为主实例。这些实例中的数据都是一样的。</p>
<figure data-type="image" tabindex="3"><img src="https://yeolar.github.io/post-images/1604410167501.png" alt="" loading="lazy"></figure>
<h1 id="具有水平伸缩能力的分片集群">具有水平伸缩能力的分片集群</h1>
<p>对于同时要求具备水平伸缩能力和容错能力的大型数据库，需要使用 MongoDB 分片集群。从下图可以看出，一个容错分片集群推荐的最小机器数量是 14 台！每一个容错副本集只处理数据的一个子集，数据分区是由 MongoDB 引擎自动完成的。</p>
<figure data-type="image" tabindex="4"><img src="https://yeolar.github.io/post-images/1604410301598.png" alt="" loading="lazy"></figure>
<p>在下载最新版本的 MongoDB(4.4) 并解压缩之后，你会发现它只包含以下三个主要文件：</p>
<ul>
<li>mongo——MongoDB Shell，使用基于 JavaScript 的命令与服务器发生交互。</li>
<li>mongod——运行 MongoDB 的主文件，可以作为单个数据库实例、分片集群的成员或分片集群的配置服务器运行。</li>
<li>mongos——一个路由器应用程序，用在具有水平伸缩能力的数据库服务器集群中。</li>
</ul>
<p>在 Mac 上，这 3 个可执行文件的总大小约为 150MB。对于任意类型的 MongoDB 部署，都只需要这几个组件！在一个软件膨胀的世界里，这是一种很受欢迎的变革！这种简单和优雅让 MongoDB 变得强大而可靠。</p>
<h1 id="mongodb-的演化史-2009-年2020-年">MongoDB 的演化史 (2009 年——2020 年)</h1>
<p>MongoDB 1.0 是在 2009 年 2 月发布的，提供了大部分基本的查询功能。MongoDB 1.2 是在 2009 年 12 月发布的，引入了 map-reduce，支持大规模数据处理。在看到 MongoDB 的巨大潜力之后，10gen 公司迅速壮大了团队。MongoDB 1.4(2010 年 3 月) 引入了后台索引创建，MongoDB 1.6(2010 年 8 月) 引入了一些主要特性，比如用于水平伸缩的分片、具备自动故障转移能力的副本集以及对 IPv6 的支持。</p>
<figure data-type="image" tabindex="5"><img src="https://yeolar.github.io/post-images/1604410370487.png" alt="" loading="lazy"></figure>
<p>到了 2012 年，10gen 有 100 名员工，公司开始提供 24/7 服务。MongoDB 2.2 版本 (2012 年 8 月) 引入了聚合管道，可以将多个数据处理步骤组合成一个操作链。到了 2013 年，10gen 拥有 250 多名员工和 1000 多名客户。为了挖掘商业潜力，10gen 更名为 MongoDB 公司，专注于数据库产品。MongoDB 2.4 版本 (2013 年 3 月) 在 Mongo Shell 中引入了文本搜索和谷歌的 V8 JS 引擎等增强功能。除了 2.4 之外，还发布了 MongoDB 企业版，提供了监控和安全集成等附加功能。</p>
<p>MongoDB 早期版本的一个主要问题是它用来保存和管理磁盘数据的存储引擎相对较弱。于是，MongoDB 公司进行了第一笔收购，收购了 WiredTiger 公司。这家公司有超级稳定的存储引擎产品 WiredTiger。MongoDB 拿下了这家公司的开发团队和产品，以及首席架构师 Michael Cahill(也是 Berkeley DB 的架构师之一)，让他担任存储工程总监一职。WiredTiger 是一个高效的存储引擎，使用了各种编程技术，如风险指针（hazard pointer）、无锁算法、快速锁存（fast latch）和消息传递，与其他引擎相比，WiredTiger 可以在每个 CPU 内核上执行更多的任务。为了最小化磁盘开销和 I/O，WiredTiger 使用了紧凑的文件格式和压缩（可选）。</p>
<p>MongoDB 的下一个主要版本是 3.0(2015 年 3 月)，其中包含了新的 WiredTiger 存储引擎、可插拔存储引擎 API、增加了 50 个副本集限制和安全改进。同年，Glassdoor 将 MongoDB 公司列为最佳的雇主之一。同年晚些时候又发布了 3.2 版本，支持文档验证、部分索引和一些主要的聚合增强。</p>
<p>2017 年，微软发布了多模型 NoSQL 数据库服务 CosmosDB，作为微软 Azure 云平台的一部分。它提供了与 MongoDB 3.2 的协议兼容性，针对 MongoDB 3.2 的查询也可以在 CosmosDB 上运行，这加快了开发人员采用 CosmosDB 的速度。</p>
<p>截止 2016 年，MongoDB 公司拥有 500 多名员工，数据库的下载量超过 2000 万次。2017 年 10 月，MongoDB 公司上市，市值超过 10 亿美元。MongoDB 3.6 在一个月后 (2017 年 11 月) 发布，为多集合连接查询、变更流和使用 JSON 模式进行文档验证提供了更好的支持。MongoDB 3.6 是微软 Azure CosmosDB 截至 2020 年 8 月能够支持的最新版本。</p>
<figure data-type="image" tabindex="6"><img src="https://yeolar.github.io/post-images/1604410427511.png" alt="" loading="lazy"></figure>
<p>2018 年，MongoDB 公司斥资 6800 万美元收购了 mLab，这是 MongoDB 公司的第二笔收购。当时，mLab 在云端提供 MongoDB 服务 (DBaaS)，并拥有大量的客户。云计算是未来，MongoDB 公司迅速收购并集成了 mLab，将其作为 MongoDB Atlas 云平台的一部分。然后，他们通过改变开源版本的许可条款来限制更多的 DBaaS 竞争者出现！</p>
<p>MongoDB 开源社区版和高级企业版都使用了相同的底层引擎。这意味着任何人都可以使用社区版，然后基于社区版提供付费的云服务。对于 MongoDB 公司来说，它们的云产品 MongoDB Atlas 就多了很多直接竞争者。因此，在 2018 年 10 月，MongoDB 公司将社区版的许可从 GNU AGPLv3 (AGPL) 更改为服务器端公共许可 (SSPL)。许可中有一个条款用来防止未来 SaaS 竞争对手使用 MongoDB 并提供他们自己的 SaaS 版本：</p>
<blockquote>
<p>如果您将本程序的功能或修改版本作为服务提供给第三方，必须将服务源代码通过网络下载的方式免费提供给所有人。</p>
</blockquote>
<p>这是一个由 MongoDB 公司自己提出的许可条款，并声称兼容 OSI。不过，该条款后来在开放源码计划 (OSI) 的审批过程中被撤回，不过开源版本的 MongoDB 仍然采用 SSPL 许可。</p>
<p>到了 2018 年，MongoDB 公司拥有 1000 多名员工。下一个主要版本 MongoDB 4.0(2018 年 6 月) 提供了跨文档事务处理能力。这是一个重要的里程碑，MongoDB 已经为高数据完整性需求做好了准备。</p>
<p>云生态系统在快速增长，不久后，MongoDB 公司意识到他们需要发展成一个成熟的云平台，而不只是提供数据库服务。2019 年，MongoDB 公司进行了第三笔收购，以 3900 万美元收购了云计算移动数据库公司 Realm。有意思的是，MongoDB 最初也是一种 PaaS 托管解决方案，而 12 年之后，它又回到了同样的方向。同年，MongoDB 公司发布了带有分布式事务支持的 MongoDB 4.2。</p>
<p>截至 2020 年 8 月，MongoDB 社区版版本是 4.4。值得注意的是，MongoDB 数据库工具可以单独下载。MongoDB 4.4 包含了一些主要的特性增强，比如多集合联合聚合、复合哈希分片键和对冲读（Hedged Read）/ 镜像读。</p>
<h1 id="现在的-mongodb">现在的 MongoDB</h1>
<p>截至 2020 年，MongoDB 的全球下载量达到了 1.1 亿次。MongoDB 公司目前有 2000 多名员工，有超过 18000 名付费客户，其中有很多客户同时使用 MongoDB Atlas 和 MongoDB 企业版。截至 2020 年 8 月，MongoDB 社区版版本是 4.4。大多数大公司在内部的一些场景中使用社区版。MongoDB 社区版仍然是开源的，除了一些关键特性外，它与 MongoDB 企业版差不多。</p>
<p>MongoDB 企业版 (每个服务器每年的费用在 1 万美元左右) 提供了以下这些附加功能：</p>
<ul>
<li>内存存储引擎——适用于需要快速数据访问而不需要持久存储的场景。</li>
<li>审计——数据库管理员在部署时跟踪系统活动。</li>
<li>身份验证和授权——支持 Kerberos 身份验证和 LDAP 身份验证和授权。</li>
<li>加密——WiredTiger 引擎提供了一个原生加密选项。默认是 AES256，使用 OpenSSL。</li>
</ul>
<p>除了社区版，MongoDB 公司还提供了以下这些产品：</p>
<ul>
<li>MongoDB Database Tools——命令行工具集合，包括导入 / 导出 (mongodump、mongorestore 等) 和诊断工具 (mongostat、mongotop)。</li>
<li>MongoDB 企业服务器——企业版，提供额外的安全和审计功能。</li>
<li>MongoDB Atlas——基于云的 SaaS 版服务器。</li>
<li>Atlas Data Lake——一个基于云的数据湖工具，由 MongoDB 查询语言提供支持，可以通过 MongoDB Atlas 和 AWS S3 查询和分析数据。</li>
<li>Atlas Search——一个基于云的全文搜索引擎，基于 MongoDB Atlas。</li>
<li>MongoDB Realm——一个为移动应用提供后端服务的托管云服务。</li>
<li>MongoDB Charts——一个云工具，用于创建 MongoDB 数据的可视化表示。</li>
<li>MongoDB Compass——可下载的 GUI 工具，用于连接 MongoDB 数据库和查询数据。</li>
<li>MongoDB Ops Manager——用于在自定义基础设施上部署、备份和扩展 MongoDB 的管理平台。</li>
<li>MongoDB Cloud Manager——云版本的 Ops 管理器。</li>
<li>MongoDB Connectors——为其他平台 / 工具提供的用于连接 MongoDB 的驱动程序。</li>
</ul>
<h1 id="前方的道路">前方的道路</h1>
<p>由于在 SSPL 许可方面存在争议，开发者社区中有一些人对 MongoDB 生态系统持谨慎态度。投资者还面临着围绕生态系统创收的压力。如果你把 2008 年版和 2020 年版的 MongoDB 主页放在一起看，这一点就显而易见 (见下图)。MongoDB 社区版下载页面实际上也列出了企业版中才有的特性！</p>
<figure data-type="image" tabindex="7"><img src="https://yeolar.github.io/post-images/1604410797150.png" alt="" loading="lazy"></figure>
<p>另外，MongoDB 公司还面临来自云供应商的激烈竞争。MongoDB 公司面临的主要问题是数据存储只是企业应用程序的一部分，如果没有一个令人信服的全栈云服务，在未来可能很难与云供应商竞争。</p>
<p>Eliot Horowitz (MongoDB 的关键人物) 于 2020 年 7 月离开了公司。尽管他还在担任顾问的角色，但 MongoDB 的产品仍存在一些风险，比如焦点被弱化、减少对免费社区版的支持或进一步修改许可条款。</p>
<h1 id="写在最后">写在最后</h1>
<p>MongoDB 是一个围绕开源技术产品成功创办一家公司的完美案例，也是在产品生命周期中如何选择正确时机转向的绝佳例子。MongoDB 的简单性和较小的安装体积可以在不增加很多开销的情况下构建复杂的系统。我希望 MongoDB 公司在未来几年继续为社区版提供支持。</p>
<p><strong>原文链接</strong><br>
<a href="https://www.quickprogrammingtips.com/mongodb/mongodb-history.html">MongoDB History</a></p>
]]></content>
    </entry>
</feed>